
NTI_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000c00  00000c94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800064  00800064  00000c98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003eea  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001647  00000000  00000000  00004fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000209d  00000000  00000000  0000662d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b84  00000000  00000000  000086cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001292  00000000  00000000  00009250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002017  00000000  00000000  0000a4e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000378  00000000  00000000  0000c4f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__vector_1>
   8:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__vector_2>
   c:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__vector_3>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__vector_6>
  1c:	0c 94 b3 04 	jmp	0x966	; 0x966 <__vector_7>
  20:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__vector_8>
  24:	0c 94 8a 04 	jmp	0x914	; 0x914 <__vector_9>
  28:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__vector_10>
  2c:	0c 94 38 04 	jmp	0x870	; 0x870 <__vector_11>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__vector_13>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 05 	jmp	0xaae	; 0xaae <__vector_15>
  40:	0c 94 c0 02 	jmp	0x580	; 0x580 <__vector_16>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	f5 02       	muls	r31, r21
  56:	fb 02       	muls	r31, r27
  58:	01 03       	mulsu	r16, r17
  5a:	07 03       	mulsu	r16, r23
  5c:	0d 03       	fmul	r16, r21
  5e:	13 03       	mulsu	r17, r19
  60:	19 03       	fmul	r17, r17
  62:	1f 03       	fmul	r17, r23
  64:	33 03       	mulsu	r19, r19
  66:	39 03       	fmul	r19, r17
  68:	3f 03       	fmul	r19, r23
  6a:	45 03       	mulsu	r20, r21
  6c:	4b 03       	fmul	r20, r19
  6e:	51 03       	mulsu	r21, r17
  70:	57 03       	mulsu	r21, r23
  72:	5d 03       	fmul	r21, r21

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e0 e0       	ldi	r30, 0x00	; 0
  88:	fc e0       	ldi	r31, 0x0C	; 12
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a4 36       	cpi	r26, 0x64	; 100
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	a4 e6       	ldi	r26, 0x64	; 100
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	ac 37       	cpi	r26, 0x7C	; 124
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 97 02 	call	0x52e	; 0x52e <main>
  aa:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <coolingsystem_init>:
#define F_CPU 8000000
#include <util/delay.h>

void coolingsystem_init(void)
{
	lm35_init();
  b2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <lm35_init>
	Timer0_Init(Timer0_Fast_PWM_Mode,Timer0_Scaler_8,Timer0_Set_on_compare);
  b6:	43 e0       	ldi	r20, 0x03	; 3
  b8:	62 e0       	ldi	r22, 0x02	; 2
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <Timer0_Init>
	H_LCD_void_Init();
  c0:	0e 94 9a 01 	call	0x334	; 0x334 <H_LCD_void_Init>
	DIO_voidSetPinDirection(ptrB,3,OUTPUT);
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	63 e0       	ldi	r22, 0x03	; 3
  c8:	86 e3       	ldi	r24, 0x36	; 54
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
  d0:	08 95       	ret

000000d2 <coolingsystem_app>:
}

void coolingsystem_app(void)
{
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
	H_LCD_void_clear();
  d6:	0e 94 66 02 	call	0x4cc	; 0x4cc <H_LCD_void_clear>
	u16 temp;
	temp=lm35_gettemp();
  da:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lm35_gettemp>
  de:	ec 01       	movw	r28, r24
	H_LCD_void_sendIntNum((u32)temp);
  e0:	bc 01       	movw	r22, r24
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <H_LCD_void_sendIntNum>
	if (temp<25)
  ea:	c9 31       	cpi	r28, 0x19	; 25
  ec:	d1 05       	cpc	r29, r1
  ee:	20 f4       	brcc	.+8      	; 0xf8 <coolingsystem_app+0x26>
	{
		setFastPWM(0);
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 2d 04 	call	0x85a	; 0x85a <setFastPWM>
  f6:	0c c0       	rjmp	.+24     	; 0x110 <coolingsystem_app+0x3e>
	}
	else if (temp<35)
  f8:	c3 32       	cpi	r28, 0x23	; 35
  fa:	d1 05       	cpc	r29, r1
  fc:	20 f4       	brcc	.+8      	; 0x106 <coolingsystem_app+0x34>
	{
		setFastPWM(50);
  fe:	82 e3       	ldi	r24, 0x32	; 50
 100:	0e 94 2d 04 	call	0x85a	; 0x85a <setFastPWM>
 104:	05 c0       	rjmp	.+10     	; 0x110 <coolingsystem_app+0x3e>
		
	}
	else if (temp>35)
 106:	a4 97       	sbiw	r28, 0x24	; 36
 108:	18 f0       	brcs	.+6      	; 0x110 <coolingsystem_app+0x3e>
	{
		setFastPWM(80);
 10a:	80 e5       	ldi	r24, 0x50	; 80
 10c:	0e 94 2d 04 	call	0x85a	; 0x85a <setFastPWM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	80 e7       	ldi	r24, 0x70	; 112
 114:	92 e0       	ldi	r25, 0x02	; 2
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <coolingsystem_app+0x44>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <coolingsystem_app+0x4e>
 120:	00 00       	nop
		
	}
	_delay_ms(100);
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <sevseg_init>:
#include <util/delay.h>
	
void sevseg_init(void)
{
	//set com as output for the four 7seg
	DIO_voidSetPinDirection(ptrA,2,1);
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	62 e0       	ldi	r22, 0x02	; 2
 12c:	89 e3       	ldi	r24, 0x39	; 57
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrA,3,1);
 134:	41 e0       	ldi	r20, 0x01	; 1
 136:	63 e0       	ldi	r22, 0x03	; 3
 138:	89 e3       	ldi	r24, 0x39	; 57
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,5,1);
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	65 e0       	ldi	r22, 0x05	; 5
 144:	86 e3       	ldi	r24, 0x36	; 54
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,6,1);
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	66 e0       	ldi	r22, 0x06	; 6
 150:	86 e3       	ldi	r24, 0x36	; 54
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
	
    //enable only one 7seg
	DIO_voidSetPinValue(ptrA,2,1);
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	62 e0       	ldi	r22, 0x02	; 2
 15c:	89 e3       	ldi	r24, 0x39	; 57
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ptrA,3,0);
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	63 e0       	ldi	r22, 0x03	; 3
 168:	89 e3       	ldi	r24, 0x39	; 57
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ptrB,5,1);
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	65 e0       	ldi	r22, 0x05	; 5
 174:	86 e3       	ldi	r24, 0x36	; 54
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ptrB,6,1);
 17c:	41 e0       	ldi	r20, 0x01	; 1
 17e:	66 e0       	ldi	r22, 0x06	; 6
 180:	86 e3       	ldi	r24, 0x36	; 54
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_voidSetPinValue>
	
	//set decoder pins as output
	DIO_voidSetPinDirection(ptrB,0,1);
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	86 e3       	ldi	r24, 0x36	; 54
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,1,1);
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	86 e3       	ldi	r24, 0x36	; 54
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,2,1);
 1a0:	41 e0       	ldi	r20, 0x01	; 1
 1a2:	62 e0       	ldi	r22, 0x02	; 2
 1a4:	86 e3       	ldi	r24, 0x36	; 54
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,4,1);
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	64 e0       	ldi	r22, 0x04	; 4
 1b0:	86 e3       	ldi	r24, 0x36	; 54
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
 1b8:	08 95       	ret

000001ba <keypad_init>:
{'M','N','O','S'}
};
void keypad_init (void)
{
	//set output pins rows
	DIO_voidSetPinDirection(PORT_OUT,FIRST_OUTPUT,OUTPUT);
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	64 e0       	ldi	r22, 0x04	; 4
 1be:	86 e3       	ldi	r24, 0x36	; 54
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_OUT,SECOND_OUTPUT,OUTPUT);
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	65 e0       	ldi	r22, 0x05	; 5
 1ca:	86 e3       	ldi	r24, 0x36	; 54
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_OUT,THIRD_OUTPUT,OUTPUT);
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	66 e0       	ldi	r22, 0x06	; 6
 1d6:	86 e3       	ldi	r24, 0x36	; 54
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_OUT,FORTH_OUTPUT,OUTPUT);
 1de:	41 e0       	ldi	r20, 0x01	; 1
 1e0:	67 e0       	ldi	r22, 0x07	; 7
 1e2:	86 e3       	ldi	r24, 0x36	; 54
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
	//set input pins cols
	DIO_voidSetPinDirection(PORT_IN,FIRST_INPUT,INPUT);
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	62 e0       	ldi	r22, 0x02	; 2
 1ee:	80 e3       	ldi	r24, 0x30	; 48
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_IN,SECOND_INPUT,INPUT);
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	63 e0       	ldi	r22, 0x03	; 3
 1fa:	80 e3       	ldi	r24, 0x30	; 48
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_IN,THIRD_INPUT,INPUT);
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	64 e0       	ldi	r22, 0x04	; 4
 206:	80 e3       	ldi	r24, 0x30	; 48
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_IN,FORTH_INPUT,INPUT);
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	65 e0       	ldi	r22, 0x05	; 5
 212:	80 e3       	ldi	r24, 0x30	; 48
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
	//set output as high
	DIO_voidSetPinValue(PORT_OUT,FIRST_OUTPUT,HIGH);
 21a:	41 e0       	ldi	r20, 0x01	; 1
 21c:	64 e0       	ldi	r22, 0x04	; 4
 21e:	86 e3       	ldi	r24, 0x36	; 54
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_OUT,SECOND_OUTPUT,HIGH);
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	65 e0       	ldi	r22, 0x05	; 5
 22a:	86 e3       	ldi	r24, 0x36	; 54
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_OUT,SECOND_OUTPUT,HIGH);
 232:	41 e0       	ldi	r20, 0x01	; 1
 234:	65 e0       	ldi	r22, 0x05	; 5
 236:	86 e3       	ldi	r24, 0x36	; 54
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_OUT,SECOND_OUTPUT,HIGH);
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	65 e0       	ldi	r22, 0x05	; 5
 242:	86 e3       	ldi	r24, 0x36	; 54
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_voidSetPinValue>
 24a:	08 95       	ret

0000024c <H_LCD_void_latchByte>:
	{
		H_LCD_void_sendCommand(0x80|copy_u8Col);
	}
	else if (copy_u8Row ==1)
	{
		H_LCD_void_sendCommand(0x80+0x40+copy_u8Col);
 24c:	df 92       	push	r13
 24e:	ef 92       	push	r14
 250:	ff 92       	push	r15
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	d8 2e       	mov	r13, r24
 25c:	e1 2c       	mov	r14, r1
 25e:	f1 2c       	mov	r15, r1
 260:	07 e0       	ldi	r16, 0x07	; 7
 262:	10 e0       	ldi	r17, 0x00	; 0
 264:	35 c0       	rjmp	.+106    	; 0x2d0 <H_LCD_void_latchByte+0x84>
 266:	4d 2d       	mov	r20, r13
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	00 2e       	mov	r0, r16
 26c:	02 c0       	rjmp	.+4      	; 0x272 <H_LCD_void_latchByte+0x26>
 26e:	55 95       	asr	r21
 270:	47 95       	ror	r20
 272:	0a 94       	dec	r0
 274:	e2 f7       	brpl	.-8      	; 0x26e <H_LCD_void_latchByte+0x22>
 276:	41 70       	andi	r20, 0x01	; 1
 278:	fe 01       	movw	r30, r28
 27a:	e0 5a       	subi	r30, 0xA0	; 160
 27c:	ff 4f       	sbci	r31, 0xFF	; 255
 27e:	60 81       	ld	r22, Z
 280:	89 e3       	ldi	r24, 0x39	; 57
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_voidSetPinValue>
 288:	01 50       	subi	r16, 0x01	; 1
 28a:	11 09       	sbc	r17, r1
 28c:	21 96       	adiw	r28, 0x01	; 1
 28e:	02 c0       	rjmp	.+4      	; 0x294 <H_LCD_void_latchByte+0x48>
 290:	c0 e0       	ldi	r28, 0x00	; 0
 292:	d0 e0       	ldi	r29, 0x00	; 0
 294:	c4 30       	cpi	r28, 0x04	; 4
 296:	d1 05       	cpc	r29, r1
 298:	34 f3       	brlt	.-52     	; 0x266 <H_LCD_void_latchByte+0x1a>
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	62 e0       	ldi	r22, 0x02	; 2
 29e:	89 e3       	ldi	r24, 0x39	; 57
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_voidSetPinValue>
 2a6:	8f e0       	ldi	r24, 0x0F	; 15
 2a8:	97 e2       	ldi	r25, 0x27	; 39
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <H_LCD_void_latchByte+0x5e>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <H_LCD_void_latchByte+0x64>
 2b0:	00 00       	nop
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	62 e0       	ldi	r22, 0x02	; 2
 2b6:	89 e3       	ldi	r24, 0x39	; 57
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_voidSetPinValue>
 2be:	8f e0       	ldi	r24, 0x0F	; 15
 2c0:	97 e2       	ldi	r25, 0x27	; 39
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <H_LCD_void_latchByte+0x76>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <H_LCD_void_latchByte+0x7c>
 2c8:	00 00       	nop
 2ca:	9f ef       	ldi	r25, 0xFF	; 255
 2cc:	e9 1a       	sub	r14, r25
 2ce:	f9 0a       	sbc	r15, r25
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	e8 16       	cp	r14, r24
 2d4:	f1 04       	cpc	r15, r1
 2d6:	e4 f2       	brlt	.-72     	; 0x290 <H_LCD_void_latchByte+0x44>
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	ff 90       	pop	r15
 2e2:	ef 90       	pop	r14
 2e4:	df 90       	pop	r13
 2e6:	08 95       	ret

000002e8 <H_LCD_void_sendData>:
 2e8:	cf 93       	push	r28
 2ea:	c8 2f       	mov	r28, r24
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	89 e3       	ldi	r24, 0x39	; 57
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_voidSetPinValue>
 2f8:	8c 2f       	mov	r24, r28
 2fa:	0e 94 26 01 	call	0x24c	; 0x24c <H_LCD_void_latchByte>
 2fe:	8f ec       	ldi	r24, 0xCF	; 207
 300:	97 e0       	ldi	r25, 0x07	; 7
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <H_LCD_void_sendData+0x1a>
 306:	00 c0       	rjmp	.+0      	; 0x308 <H_LCD_void_sendData+0x20>
 308:	00 00       	nop
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <H_LCD_void_sendCommand>:
 30e:	cf 93       	push	r28
 310:	c8 2f       	mov	r28, r24
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	89 e3       	ldi	r24, 0x39	; 57
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_voidSetPinValue>
 31e:	8c 2f       	mov	r24, r28
 320:	0e 94 26 01 	call	0x24c	; 0x24c <H_LCD_void_latchByte>
 324:	8f ec       	ldi	r24, 0xCF	; 207
 326:	97 e0       	ldi	r25, 0x07	; 7
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <H_LCD_void_sendCommand+0x1a>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <H_LCD_void_sendCommand+0x20>
 32e:	00 00       	nop
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <H_LCD_void_Init>:
 334:	41 e0       	ldi	r20, 0x01	; 1
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	89 e3       	ldi	r24, 0x39	; 57
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	89 e3       	ldi	r24, 0x39	; 57
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
 34c:	41 e0       	ldi	r20, 0x01	; 1
 34e:	63 e0       	ldi	r22, 0x03	; 3
 350:	89 e3       	ldi	r24, 0x39	; 57
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
 358:	41 e0       	ldi	r20, 0x01	; 1
 35a:	64 e0       	ldi	r22, 0x04	; 4
 35c:	89 e3       	ldi	r24, 0x39	; 57
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
 364:	41 e0       	ldi	r20, 0x01	; 1
 366:	65 e0       	ldi	r22, 0x05	; 5
 368:	89 e3       	ldi	r24, 0x39	; 57
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
 370:	41 e0       	ldi	r20, 0x01	; 1
 372:	66 e0       	ldi	r22, 0x06	; 6
 374:	89 e3       	ldi	r24, 0x39	; 57
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
 37c:	2f e7       	ldi	r18, 0x7F	; 127
 37e:	88 e3       	ldi	r24, 0x38	; 56
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	21 50       	subi	r18, 0x01	; 1
 384:	80 40       	sbci	r24, 0x00	; 0
 386:	90 40       	sbci	r25, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <H_LCD_void_Init+0x4e>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <H_LCD_void_Init+0x58>
 38c:	00 00       	nop
 38e:	40 e0       	ldi	r20, 0x00	; 0
 390:	61 e0       	ldi	r22, 0x01	; 1
 392:	89 e3       	ldi	r24, 0x39	; 57
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_voidSetPinValue>
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	0e 94 87 01 	call	0x30e	; 0x30e <H_LCD_void_sendCommand>
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	0e 94 87 01 	call	0x30e	; 0x30e <H_LCD_void_sendCommand>
 3a6:	88 e0       	ldi	r24, 0x08	; 8
 3a8:	0e 94 87 01 	call	0x30e	; 0x30e <H_LCD_void_sendCommand>
 3ac:	8f ec       	ldi	r24, 0xCF	; 207
 3ae:	97 e0       	ldi	r25, 0x07	; 7
 3b0:	01 97       	sbiw	r24, 0x01	; 1
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <H_LCD_void_Init+0x7c>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <H_LCD_void_Init+0x82>
 3b6:	00 00       	nop
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	0e 94 87 01 	call	0x30e	; 0x30e <H_LCD_void_sendCommand>
 3be:	8c e0       	ldi	r24, 0x0C	; 12
 3c0:	0e 94 87 01 	call	0x30e	; 0x30e <H_LCD_void_sendCommand>
 3c4:	8f ec       	ldi	r24, 0xCF	; 207
 3c6:	97 e0       	ldi	r25, 0x07	; 7
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <H_LCD_void_Init+0x94>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <H_LCD_void_Init+0x9a>
 3ce:	00 00       	nop
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	0e 94 87 01 	call	0x30e	; 0x30e <H_LCD_void_sendCommand>
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 87 01 	call	0x30e	; 0x30e <H_LCD_void_sendCommand>
 3dc:	8f e6       	ldi	r24, 0x6F	; 111
 3de:	97 e1       	ldi	r25, 0x17	; 23
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <H_LCD_void_Init+0xac>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <H_LCD_void_Init+0xb2>
 3e6:	00 00       	nop
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 87 01 	call	0x30e	; 0x30e <H_LCD_void_sendCommand>
 3ee:	86 e0       	ldi	r24, 0x06	; 6
 3f0:	0e 94 87 01 	call	0x30e	; 0x30e <H_LCD_void_sendCommand>
 3f4:	08 95       	ret

000003f6 <H_LCD_void_sendIntNum>:
 3f6:	cf 92       	push	r12
 3f8:	df 92       	push	r13
 3fa:	ef 92       	push	r14
 3fc:	ff 92       	push	r15
 3fe:	0f 93       	push	r16
 400:	1f 93       	push	r17
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	cd b7       	in	r28, 0x3d	; 61
 408:	de b7       	in	r29, 0x3e	; 62
 40a:	64 97       	sbiw	r28, 0x14	; 20
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	f8 94       	cli
 410:	de bf       	out	0x3e, r29	; 62
 412:	0f be       	out	0x3f, r0	; 63
 414:	cd bf       	out	0x3d, r28	; 61
 416:	6b 01       	movw	r12, r22
 418:	7c 01       	movw	r14, r24
 41a:	fe 01       	movw	r30, r28
 41c:	31 96       	adiw	r30, 0x01	; 1
 41e:	84 e1       	ldi	r24, 0x14	; 20
 420:	df 01       	movw	r26, r30
 422:	1d 92       	st	X+, r1
 424:	8a 95       	dec	r24
 426:	e9 f7       	brne	.-6      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 428:	c1 14       	cp	r12, r1
 42a:	d1 04       	cpc	r13, r1
 42c:	e1 04       	cpc	r14, r1
 42e:	f1 04       	cpc	r15, r1
 430:	21 f4       	brne	.+8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 432:	80 e3       	ldi	r24, 0x30	; 48
 434:	0e 94 74 01 	call	0x2e8	; 0x2e8 <H_LCD_void_sendData>
 438:	3a c0       	rjmp	.+116    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 43a:	ff 20       	and	r15, r15
 43c:	5c f4       	brge	.+22     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 43e:	8d e2       	ldi	r24, 0x2D	; 45
 440:	0e 94 74 01 	call	0x2e8	; 0x2e8 <H_LCD_void_sendData>
 444:	f0 94       	com	r15
 446:	e0 94       	com	r14
 448:	d0 94       	com	r13
 44a:	c0 94       	com	r12
 44c:	c1 1c       	adc	r12, r1
 44e:	d1 1c       	adc	r13, r1
 450:	e1 1c       	adc	r14, r1
 452:	f1 1c       	adc	r15, r1
 454:	00 e0       	ldi	r16, 0x00	; 0
 456:	10 e0       	ldi	r17, 0x00	; 0
 458:	15 c0       	rjmp	.+42     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 45a:	c7 01       	movw	r24, r14
 45c:	b6 01       	movw	r22, r12
 45e:	2a e0       	ldi	r18, 0x0A	; 10
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	40 e0       	ldi	r20, 0x00	; 0
 464:	50 e0       	ldi	r21, 0x00	; 0
 466:	0e 94 ca 05 	call	0xb94	; 0xb94 <__divmodsi4>
 46a:	e1 e0       	ldi	r30, 0x01	; 1
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	ec 0f       	add	r30, r28
 470:	fd 1f       	adc	r31, r29
 472:	e0 0f       	add	r30, r16
 474:	f1 1f       	adc	r31, r17
 476:	60 83       	st	Z, r22
 478:	c2 2e       	mov	r12, r18
 47a:	d3 2e       	mov	r13, r19
 47c:	e4 2e       	mov	r14, r20
 47e:	f5 2e       	mov	r15, r21
 480:	0f 5f       	subi	r16, 0xFF	; 255
 482:	1f 4f       	sbci	r17, 0xFF	; 255
 484:	1c 14       	cp	r1, r12
 486:	1d 04       	cpc	r1, r13
 488:	1e 04       	cpc	r1, r14
 48a:	1f 04       	cpc	r1, r15
 48c:	34 f3       	brlt	.-52     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 48e:	0c c0       	rjmp	.+24     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 490:	01 50       	subi	r16, 0x01	; 1
 492:	11 09       	sbc	r17, r1
 494:	e1 e0       	ldi	r30, 0x01	; 1
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	ec 0f       	add	r30, r28
 49a:	fd 1f       	adc	r31, r29
 49c:	e0 0f       	add	r30, r16
 49e:	f1 1f       	adc	r31, r17
 4a0:	80 81       	ld	r24, Z
 4a2:	80 5d       	subi	r24, 0xD0	; 208
 4a4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <H_LCD_void_sendData>
 4a8:	10 16       	cp	r1, r16
 4aa:	11 06       	cpc	r1, r17
 4ac:	8c f3       	brlt	.-30     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 4ae:	64 96       	adiw	r28, 0x14	; 20
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	f8 94       	cli
 4b4:	de bf       	out	0x3e, r29	; 62
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	cd bf       	out	0x3d, r28	; 61
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	1f 91       	pop	r17
 4c0:	0f 91       	pop	r16
 4c2:	ff 90       	pop	r15
 4c4:	ef 90       	pop	r14
 4c6:	df 90       	pop	r13
 4c8:	cf 90       	pop	r12
 4ca:	08 95       	ret

000004cc <H_LCD_void_clear>:
	}
}

void H_LCD_void_clear(void)
{
	H_LCD_void_sendCommand(0x01);
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	0e 94 87 01 	call	0x30e	; 0x30e <H_LCD_void_sendCommand>
 4d2:	8f ec       	ldi	r24, 0xCF	; 207
 4d4:	97 e0       	ldi	r25, 0x07	; 7
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <H_LCD_void_clear+0xa>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <H_LCD_void_clear+0x10>
 4dc:	00 00       	nop
 4de:	08 95       	ret

000004e0 <lm35_init>:
#include "C:\Users\USER\Desktop\nti repo\NTI\NTI_AVR\NTI_AVR\MCAL\ADC\adc.h"
#include "C:\Users\USER\Desktop\nti repo\NTI\NTI_AVR\NTI_AVR\MCAL\DIO\Dio.h"

void lm35_init(void)
{
	DIO_voidSetPinDirection(lm_port,lm_pin,INPUT);
 4e0:	40 e0       	ldi	r20, 0x00	; 0
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	89 e3       	ldi	r24, 0x39	; 57
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_voidSetPinDirection>
	ADC_Init();
 4ec:	0e 94 a0 02 	call	0x540	; 0x540 <ADC_Init>
 4f0:	08 95       	ret

000004f2 <lm35_gettemp>:
}

u16 lm35_gettemp(void)
{
	u16 adc_read=ADC_getDigitalValueSynchBlocking(lm_pin);
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	0e 94 b2 02 	call	0x564	; 0x564 <ADC_getDigitalValueSynchBlocking>
	u16 voltvalue=((u32)adc_read*5000)/1024; //volt in mv
 4f8:	9c 01       	movw	r18, r24
 4fa:	a8 e8       	ldi	r26, 0x88	; 136
 4fc:	b3 e1       	ldi	r27, 0x13	; 19
 4fe:	0e 94 ef 05 	call	0xbde	; 0xbde <__umulhisi3>
 502:	9b 01       	movw	r18, r22
 504:	ac 01       	movw	r20, r24
 506:	01 2e       	mov	r0, r17
 508:	1a e0       	ldi	r17, 0x0A	; 10
 50a:	56 95       	lsr	r21
 50c:	47 95       	ror	r20
 50e:	37 95       	ror	r19
 510:	27 95       	ror	r18
 512:	1a 95       	dec	r17
 514:	d1 f7       	brne	.-12     	; 0x50a <lm35_gettemp+0x18>
 516:	10 2d       	mov	r17, r0
	u16 temp=voltvalue/10;
 518:	ad ec       	ldi	r26, 0xCD	; 205
 51a:	bc ec       	ldi	r27, 0xCC	; 204
 51c:	0e 94 ef 05 	call	0xbde	; 0xbde <__umulhisi3>
	return temp;
 520:	96 95       	lsr	r25
 522:	87 95       	ror	r24
 524:	96 95       	lsr	r25
 526:	87 95       	ror	r24
 528:	96 95       	lsr	r25
 52a:	87 95       	ror	r24
 52c:	08 95       	ret

0000052e <main>:
}

int main(void)
{
	//H_LCD_void_Init();
	sevseg_init();
 52e:	0e 94 94 00 	call	0x128	; 0x128 <sevseg_init>
	keypad_init();
 532:	0e 94 dd 00 	call	0x1ba	; 0x1ba <keypad_init>
  SPI_init_bits init={F_4,SAMPLE,LOW_IDLE,MASTER,MSB,ENABLED,POLLING};
     //Uart_Init();
	 // SPI_init(&init);
	 //I2C_init(I2C_prescaler_4,SCL_100);
	// EEPROM_Init();
	coolingsystem_init();
 536:	0e 94 59 00 	call	0xb2	; 0xb2 <coolingsystem_init>
	//Timer1_OVF_InterruptEnable();
	//sei();


while (1) {
	coolingsystem_app();
 53a:	0e 94 69 00 	call	0xd2	; 0xd2 <coolingsystem_app>
 53e:	fd cf       	rjmp	.-6      	; 0x53a <main+0xc>

00000540 <ADC_Init>:
	//set call back pointer
	if (p!= 0) EXT_INT_ptr=p;
	//enable interrupt
	SET_BIT(ADCSRA,ADIE);
	//start conversion
	SET_BIT(ADCSRA,ADSC);
 540:	86 b1       	in	r24, 0x06	; 6
 542:	88 7f       	andi	r24, 0xF8	; 248
 544:	86 b9       	out	0x06, r24	; 6
 546:	86 b1       	in	r24, 0x06	; 6
 548:	83 60       	ori	r24, 0x03	; 3
 54a:	86 b9       	out	0x06, r24	; 6
 54c:	87 b1       	in	r24, 0x07	; 7
 54e:	8f 73       	andi	r24, 0x3F	; 63
 550:	87 b9       	out	0x07, r24	; 7
 552:	87 b1       	in	r24, 0x07	; 7
 554:	87 b9       	out	0x07, r24	; 7
 556:	87 b1       	in	r24, 0x07	; 7
 558:	8f 7d       	andi	r24, 0xDF	; 223
 55a:	87 b9       	out	0x07, r24	; 7
 55c:	86 b1       	in	r24, 0x06	; 6
 55e:	80 68       	ori	r24, 0x80	; 128
 560:	86 b9       	out	0x06, r24	; 6
 562:	08 95       	ret

00000564 <ADC_getDigitalValueSynchBlocking>:
 564:	97 b1       	in	r25, 0x07	; 7
 566:	90 7e       	andi	r25, 0xE0	; 224
 568:	97 b9       	out	0x07, r25	; 7
 56a:	97 b1       	in	r25, 0x07	; 7
 56c:	89 2b       	or	r24, r25
 56e:	87 b9       	out	0x07, r24	; 7
 570:	86 b1       	in	r24, 0x06	; 6
 572:	80 64       	ori	r24, 0x40	; 64
 574:	86 b9       	out	0x06, r24	; 6
 576:	36 99       	sbic	0x06, 6	; 6
 578:	fe cf       	rjmp	.-4      	; 0x576 <ADC_getDigitalValueSynchBlocking+0x12>
 57a:	84 b1       	in	r24, 0x04	; 4
 57c:	95 b1       	in	r25, 0x05	; 5
 57e:	08 95       	ret

00000580 <__vector_16>:
	
}

ISR(ADC_vect)
{
 580:	1f 92       	push	r1
 582:	0f 92       	push	r0
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	0f 92       	push	r0
 588:	11 24       	eor	r1, r1
 58a:	2f 93       	push	r18
 58c:	3f 93       	push	r19
 58e:	4f 93       	push	r20
 590:	5f 93       	push	r21
 592:	6f 93       	push	r22
 594:	7f 93       	push	r23
 596:	8f 93       	push	r24
 598:	9f 93       	push	r25
 59a:	af 93       	push	r26
 59c:	bf 93       	push	r27
 59e:	ef 93       	push	r30
 5a0:	ff 93       	push	r31

	if (EXT_INT_ptr!=0)
 5a2:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__data_end>
 5a6:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <__data_end+0x1>
 5aa:	30 97       	sbiw	r30, 0x00	; 0
 5ac:	09 f0       	breq	.+2      	; 0x5b0 <__vector_16+0x30>
	{
		EXT_INT_ptr();
 5ae:	09 95       	icall
	}
}
 5b0:	ff 91       	pop	r31
 5b2:	ef 91       	pop	r30
 5b4:	bf 91       	pop	r27
 5b6:	af 91       	pop	r26
 5b8:	9f 91       	pop	r25
 5ba:	8f 91       	pop	r24
 5bc:	7f 91       	pop	r23
 5be:	6f 91       	pop	r22
 5c0:	5f 91       	pop	r21
 5c2:	4f 91       	pop	r20
 5c4:	3f 91       	pop	r19
 5c6:	2f 91       	pop	r18
 5c8:	0f 90       	pop	r0
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	0f 90       	pop	r0
 5ce:	1f 90       	pop	r1
 5d0:	18 95       	reti

000005d2 <DIO_voidSetPinDirection>:

#include "C:\Users\USER\Desktop\nti repo\NTI\NTI_AVR\NTI_AVR\MCAL\DIO\Dio.h"
#include "C:\Users\USER\Desktop\nti repo\NTI\NTI_AVR\NTI_AVR\MCAL\DIO\Dio_Private.h"
#include "C:\Users\USER\Desktop\nti repo\NTI\NTI_AVR\NTI_AVR\stdtypes.h"
void DIO_voidSetPinDirection(ports_t *ptr,unsigned char p,Direction dir )
{
 5d2:	0f 93       	push	r16
 5d4:	1f 93       	push	r17
	switch(p)
 5d6:	06 2f       	mov	r16, r22
 5d8:	10 e0       	ldi	r17, 0x00	; 0
 5da:	08 30       	cpi	r16, 0x08	; 8
 5dc:	11 05       	cpc	r17, r1
 5de:	a0 f5       	brcc	.+104    	; 0x648 <DIO_voidSetPinDirection+0x76>
 5e0:	f8 01       	movw	r30, r16
 5e2:	e6 5d       	subi	r30, 0xD6	; 214
 5e4:	ff 4f       	sbci	r31, 0xFF	; 255
 5e6:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__tablejump2__>
	{
		case 0: ptr->DDR.PIN0=dir; break;
 5ea:	fc 01       	movw	r30, r24
 5ec:	21 81       	ldd	r18, Z+1	; 0x01
 5ee:	40 fb       	bst	r20, 0
 5f0:	20 f9       	bld	r18, 0
 5f2:	21 83       	std	Z+1, r18	; 0x01
 5f4:	29 c0       	rjmp	.+82     	; 0x648 <DIO_voidSetPinDirection+0x76>
		case 1: ptr->DDR.PIN1=dir; break;
 5f6:	fc 01       	movw	r30, r24
 5f8:	21 81       	ldd	r18, Z+1	; 0x01
 5fa:	40 fb       	bst	r20, 0
 5fc:	21 f9       	bld	r18, 1
 5fe:	21 83       	std	Z+1, r18	; 0x01
 600:	23 c0       	rjmp	.+70     	; 0x648 <DIO_voidSetPinDirection+0x76>
		case 2: ptr->DDR.PIN2=dir; break;
 602:	fc 01       	movw	r30, r24
 604:	21 81       	ldd	r18, Z+1	; 0x01
 606:	40 fb       	bst	r20, 0
 608:	22 f9       	bld	r18, 2
 60a:	21 83       	std	Z+1, r18	; 0x01
 60c:	1d c0       	rjmp	.+58     	; 0x648 <DIO_voidSetPinDirection+0x76>
		case 3: ptr->DDR.PIN3=dir; break;
 60e:	fc 01       	movw	r30, r24
 610:	21 81       	ldd	r18, Z+1	; 0x01
 612:	40 fb       	bst	r20, 0
 614:	23 f9       	bld	r18, 3
 616:	21 83       	std	Z+1, r18	; 0x01
 618:	17 c0       	rjmp	.+46     	; 0x648 <DIO_voidSetPinDirection+0x76>
		case 4: ptr->DDR.PIN4=dir; break;
 61a:	fc 01       	movw	r30, r24
 61c:	21 81       	ldd	r18, Z+1	; 0x01
 61e:	40 fb       	bst	r20, 0
 620:	24 f9       	bld	r18, 4
 622:	21 83       	std	Z+1, r18	; 0x01
 624:	11 c0       	rjmp	.+34     	; 0x648 <DIO_voidSetPinDirection+0x76>
		case 5: ptr->DDR.PIN5=dir; break;
 626:	fc 01       	movw	r30, r24
 628:	21 81       	ldd	r18, Z+1	; 0x01
 62a:	40 fb       	bst	r20, 0
 62c:	25 f9       	bld	r18, 5
 62e:	21 83       	std	Z+1, r18	; 0x01
 630:	0b c0       	rjmp	.+22     	; 0x648 <DIO_voidSetPinDirection+0x76>
		case 6: ptr->DDR.PIN6=dir; break;
 632:	fc 01       	movw	r30, r24
 634:	21 81       	ldd	r18, Z+1	; 0x01
 636:	40 fb       	bst	r20, 0
 638:	26 f9       	bld	r18, 6
 63a:	21 83       	std	Z+1, r18	; 0x01
 63c:	05 c0       	rjmp	.+10     	; 0x648 <DIO_voidSetPinDirection+0x76>
		case 7: ptr->DDR.PIN7=dir; break;
 63e:	fc 01       	movw	r30, r24
 640:	21 81       	ldd	r18, Z+1	; 0x01
 642:	40 fb       	bst	r20, 0
 644:	27 f9       	bld	r18, 7
 646:	21 83       	std	Z+1, r18	; 0x01
	}
}
 648:	1f 91       	pop	r17
 64a:	0f 91       	pop	r16
 64c:	08 95       	ret

0000064e <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(ports_t *ptr,unsigned char p,Value val)
{
 64e:	0f 93       	push	r16
 650:	1f 93       	push	r17
	switch(p)
 652:	06 2f       	mov	r16, r22
 654:	10 e0       	ldi	r17, 0x00	; 0
 656:	08 30       	cpi	r16, 0x08	; 8
 658:	11 05       	cpc	r17, r1
 65a:	a0 f5       	brcc	.+104    	; 0x6c4 <DIO_voidSetPinValue+0x76>
 65c:	f8 01       	movw	r30, r16
 65e:	ee 5c       	subi	r30, 0xCE	; 206
 660:	ff 4f       	sbci	r31, 0xFF	; 255
 662:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__tablejump2__>
	{
		case 0: ptr->port.PIN0=val; break;
 666:	fc 01       	movw	r30, r24
 668:	22 81       	ldd	r18, Z+2	; 0x02
 66a:	40 fb       	bst	r20, 0
 66c:	20 f9       	bld	r18, 0
 66e:	22 83       	std	Z+2, r18	; 0x02
 670:	29 c0       	rjmp	.+82     	; 0x6c4 <DIO_voidSetPinValue+0x76>
		case 1: ptr->port.PIN1=val; break;
 672:	fc 01       	movw	r30, r24
 674:	22 81       	ldd	r18, Z+2	; 0x02
 676:	40 fb       	bst	r20, 0
 678:	21 f9       	bld	r18, 1
 67a:	22 83       	std	Z+2, r18	; 0x02
 67c:	23 c0       	rjmp	.+70     	; 0x6c4 <DIO_voidSetPinValue+0x76>
		case 2: ptr->port.PIN2=val; break;
 67e:	fc 01       	movw	r30, r24
 680:	22 81       	ldd	r18, Z+2	; 0x02
 682:	40 fb       	bst	r20, 0
 684:	22 f9       	bld	r18, 2
 686:	22 83       	std	Z+2, r18	; 0x02
 688:	1d c0       	rjmp	.+58     	; 0x6c4 <DIO_voidSetPinValue+0x76>
		case 3: ptr->port.PIN3=val; break;
 68a:	fc 01       	movw	r30, r24
 68c:	22 81       	ldd	r18, Z+2	; 0x02
 68e:	40 fb       	bst	r20, 0
 690:	23 f9       	bld	r18, 3
 692:	22 83       	std	Z+2, r18	; 0x02
 694:	17 c0       	rjmp	.+46     	; 0x6c4 <DIO_voidSetPinValue+0x76>
		case 4: ptr->port.PIN4=val; break;
 696:	fc 01       	movw	r30, r24
 698:	22 81       	ldd	r18, Z+2	; 0x02
 69a:	40 fb       	bst	r20, 0
 69c:	24 f9       	bld	r18, 4
 69e:	22 83       	std	Z+2, r18	; 0x02
 6a0:	11 c0       	rjmp	.+34     	; 0x6c4 <DIO_voidSetPinValue+0x76>
		case 5: ptr->port.PIN5=val; break;
 6a2:	fc 01       	movw	r30, r24
 6a4:	22 81       	ldd	r18, Z+2	; 0x02
 6a6:	40 fb       	bst	r20, 0
 6a8:	25 f9       	bld	r18, 5
 6aa:	22 83       	std	Z+2, r18	; 0x02
 6ac:	0b c0       	rjmp	.+22     	; 0x6c4 <DIO_voidSetPinValue+0x76>
		case 6: ptr->port.PIN6=val; break;
 6ae:	fc 01       	movw	r30, r24
 6b0:	22 81       	ldd	r18, Z+2	; 0x02
 6b2:	40 fb       	bst	r20, 0
 6b4:	26 f9       	bld	r18, 6
 6b6:	22 83       	std	Z+2, r18	; 0x02
 6b8:	05 c0       	rjmp	.+10     	; 0x6c4 <DIO_voidSetPinValue+0x76>
		case 7: ptr->port.PIN7=val; break;
 6ba:	fc 01       	movw	r30, r24
 6bc:	22 81       	ldd	r18, Z+2	; 0x02
 6be:	40 fb       	bst	r20, 0
 6c0:	27 f9       	bld	r18, 7
 6c2:	22 83       	std	Z+2, r18	; 0x02
	}
}
 6c4:	1f 91       	pop	r17
 6c6:	0f 91       	pop	r16
 6c8:	08 95       	ret

000006ca <__vector_1>:
	}
	
}

ISR(INT0_vect)
{
 6ca:	1f 92       	push	r1
 6cc:	0f 92       	push	r0
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	0f 92       	push	r0
 6d2:	11 24       	eor	r1, r1
 6d4:	2f 93       	push	r18
 6d6:	3f 93       	push	r19
 6d8:	4f 93       	push	r20
 6da:	5f 93       	push	r21
 6dc:	6f 93       	push	r22
 6de:	7f 93       	push	r23
 6e0:	8f 93       	push	r24
 6e2:	9f 93       	push	r25
 6e4:	af 93       	push	r26
 6e6:	bf 93       	push	r27
 6e8:	ef 93       	push	r30
 6ea:	ff 93       	push	r31
	if (p_NTI[0]!=0)
 6ec:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <p_NTI>
 6f0:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <p_NTI+0x1>
 6f4:	30 97       	sbiw	r30, 0x00	; 0
 6f6:	09 f0       	breq	.+2      	; 0x6fa <__vector_1+0x30>
	{
		p_NTI[0]();
 6f8:	09 95       	icall
	}
	return;
}
 6fa:	ff 91       	pop	r31
 6fc:	ef 91       	pop	r30
 6fe:	bf 91       	pop	r27
 700:	af 91       	pop	r26
 702:	9f 91       	pop	r25
 704:	8f 91       	pop	r24
 706:	7f 91       	pop	r23
 708:	6f 91       	pop	r22
 70a:	5f 91       	pop	r21
 70c:	4f 91       	pop	r20
 70e:	3f 91       	pop	r19
 710:	2f 91       	pop	r18
 712:	0f 90       	pop	r0
 714:	0f be       	out	0x3f, r0	; 63
 716:	0f 90       	pop	r0
 718:	1f 90       	pop	r1
 71a:	18 95       	reti

0000071c <__vector_2>:

ISR(INT1_vect)
{
 71c:	1f 92       	push	r1
 71e:	0f 92       	push	r0
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	0f 92       	push	r0
 724:	11 24       	eor	r1, r1
 726:	2f 93       	push	r18
 728:	3f 93       	push	r19
 72a:	4f 93       	push	r20
 72c:	5f 93       	push	r21
 72e:	6f 93       	push	r22
 730:	7f 93       	push	r23
 732:	8f 93       	push	r24
 734:	9f 93       	push	r25
 736:	af 93       	push	r26
 738:	bf 93       	push	r27
 73a:	ef 93       	push	r30
 73c:	ff 93       	push	r31
	if (p_NTI[1]!=0)
 73e:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <p_NTI+0x2>
 742:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <p_NTI+0x3>
 746:	30 97       	sbiw	r30, 0x00	; 0
 748:	09 f0       	breq	.+2      	; 0x74c <__vector_2+0x30>
	{
		p_NTI[1]();
 74a:	09 95       	icall
	}
	return;
}
 74c:	ff 91       	pop	r31
 74e:	ef 91       	pop	r30
 750:	bf 91       	pop	r27
 752:	af 91       	pop	r26
 754:	9f 91       	pop	r25
 756:	8f 91       	pop	r24
 758:	7f 91       	pop	r23
 75a:	6f 91       	pop	r22
 75c:	5f 91       	pop	r21
 75e:	4f 91       	pop	r20
 760:	3f 91       	pop	r19
 762:	2f 91       	pop	r18
 764:	0f 90       	pop	r0
 766:	0f be       	out	0x3f, r0	; 63
 768:	0f 90       	pop	r0
 76a:	1f 90       	pop	r1
 76c:	18 95       	reti

0000076e <__vector_3>:

ISR(INT2_vect)
{
 76e:	1f 92       	push	r1
 770:	0f 92       	push	r0
 772:	0f b6       	in	r0, 0x3f	; 63
 774:	0f 92       	push	r0
 776:	11 24       	eor	r1, r1
 778:	2f 93       	push	r18
 77a:	3f 93       	push	r19
 77c:	4f 93       	push	r20
 77e:	5f 93       	push	r21
 780:	6f 93       	push	r22
 782:	7f 93       	push	r23
 784:	8f 93       	push	r24
 786:	9f 93       	push	r25
 788:	af 93       	push	r26
 78a:	bf 93       	push	r27
 78c:	ef 93       	push	r30
 78e:	ff 93       	push	r31
	if (p_NTI[2]!=0) 
 790:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <p_NTI+0x4>
 794:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <p_NTI+0x5>
 798:	30 97       	sbiw	r30, 0x00	; 0
 79a:	09 f0       	breq	.+2      	; 0x79e <__vector_3+0x30>
	{
		p_NTI[2]();
 79c:	09 95       	icall
	}
	return;
 79e:	ff 91       	pop	r31
 7a0:	ef 91       	pop	r30
 7a2:	bf 91       	pop	r27
 7a4:	af 91       	pop	r26
 7a6:	9f 91       	pop	r25
 7a8:	8f 91       	pop	r24
 7aa:	7f 91       	pop	r23
 7ac:	6f 91       	pop	r22
 7ae:	5f 91       	pop	r21
 7b0:	4f 91       	pop	r20
 7b2:	3f 91       	pop	r19
 7b4:	2f 91       	pop	r18
 7b6:	0f 90       	pop	r0
 7b8:	0f be       	out	0x3f, r0	; 63
 7ba:	0f 90       	pop	r0
 7bc:	1f 90       	pop	r1
 7be:	18 95       	reti

000007c0 <Timer0_Init>:
	u32 t_total=ton+t_off;
	u8 duty =((u32)ton *100) /(u32)t_total;

	return duty;
	
}
 7c0:	81 30       	cpi	r24, 0x01	; 1
 7c2:	69 f0       	breq	.+26     	; 0x7de <Timer0_Init+0x1e>
 7c4:	28 f0       	brcs	.+10     	; 0x7d0 <Timer0_Init+0x10>
 7c6:	82 30       	cpi	r24, 0x02	; 2
 7c8:	89 f0       	breq	.+34     	; 0x7ec <Timer0_Init+0x2c>
 7ca:	83 30       	cpi	r24, 0x03	; 3
 7cc:	b1 f0       	breq	.+44     	; 0x7fa <Timer0_Init+0x3a>
 7ce:	1b c0       	rjmp	.+54     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7d0:	83 b7       	in	r24, 0x33	; 51
 7d2:	8f 7b       	andi	r24, 0xBF	; 191
 7d4:	83 bf       	out	0x33, r24	; 51
 7d6:	83 b7       	in	r24, 0x33	; 51
 7d8:	87 7f       	andi	r24, 0xF7	; 247
 7da:	83 bf       	out	0x33, r24	; 51
 7dc:	14 c0       	rjmp	.+40     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7de:	83 b7       	in	r24, 0x33	; 51
 7e0:	80 64       	ori	r24, 0x40	; 64
 7e2:	83 bf       	out	0x33, r24	; 51
 7e4:	83 b7       	in	r24, 0x33	; 51
 7e6:	87 7f       	andi	r24, 0xF7	; 247
 7e8:	83 bf       	out	0x33, r24	; 51
 7ea:	0d c0       	rjmp	.+26     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7ec:	83 b7       	in	r24, 0x33	; 51
 7ee:	8f 7b       	andi	r24, 0xBF	; 191
 7f0:	83 bf       	out	0x33, r24	; 51
 7f2:	83 b7       	in	r24, 0x33	; 51
 7f4:	88 60       	ori	r24, 0x08	; 8
 7f6:	83 bf       	out	0x33, r24	; 51
 7f8:	06 c0       	rjmp	.+12     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7fa:	83 b7       	in	r24, 0x33	; 51
 7fc:	80 64       	ori	r24, 0x40	; 64
 7fe:	83 bf       	out	0x33, r24	; 51
 800:	83 b7       	in	r24, 0x33	; 51
 802:	88 60       	ori	r24, 0x08	; 8
 804:	83 bf       	out	0x33, r24	; 51
 806:	41 30       	cpi	r20, 0x01	; 1
 808:	69 f0       	breq	.+26     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 80a:	28 f0       	brcs	.+10     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 80c:	42 30       	cpi	r20, 0x02	; 2
 80e:	89 f0       	breq	.+34     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 810:	43 30       	cpi	r20, 0x03	; 3
 812:	b1 f0       	breq	.+44     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 814:	1b c0       	rjmp	.+54     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 816:	83 b7       	in	r24, 0x33	; 51
 818:	8f 7e       	andi	r24, 0xEF	; 239
 81a:	83 bf       	out	0x33, r24	; 51
 81c:	83 b7       	in	r24, 0x33	; 51
 81e:	8f 7d       	andi	r24, 0xDF	; 223
 820:	83 bf       	out	0x33, r24	; 51
 822:	14 c0       	rjmp	.+40     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 824:	83 b7       	in	r24, 0x33	; 51
 826:	80 61       	ori	r24, 0x10	; 16
 828:	83 bf       	out	0x33, r24	; 51
 82a:	83 b7       	in	r24, 0x33	; 51
 82c:	8f 7d       	andi	r24, 0xDF	; 223
 82e:	83 bf       	out	0x33, r24	; 51
 830:	0d c0       	rjmp	.+26     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 832:	83 b7       	in	r24, 0x33	; 51
 834:	8f 7e       	andi	r24, 0xEF	; 239
 836:	83 bf       	out	0x33, r24	; 51
 838:	83 b7       	in	r24, 0x33	; 51
 83a:	80 62       	ori	r24, 0x20	; 32
 83c:	83 bf       	out	0x33, r24	; 51
 83e:	06 c0       	rjmp	.+12     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 840:	83 b7       	in	r24, 0x33	; 51
 842:	80 61       	ori	r24, 0x10	; 16
 844:	83 bf       	out	0x33, r24	; 51
 846:	83 b7       	in	r24, 0x33	; 51
 848:	80 62       	ori	r24, 0x20	; 32
 84a:	83 bf       	out	0x33, r24	; 51
 84c:	83 b7       	in	r24, 0x33	; 51
 84e:	88 7f       	andi	r24, 0xF8	; 248
 850:	83 bf       	out	0x33, r24	; 51
 852:	83 b7       	in	r24, 0x33	; 51
 854:	68 2b       	or	r22, r24
 856:	63 bf       	out	0x33, r22	; 51
 858:	08 95       	ret

0000085a <setFastPWM>:
 85a:	2f ef       	ldi	r18, 0xFF	; 255
 85c:	82 9f       	mul	r24, r18
 85e:	c0 01       	movw	r24, r0
 860:	11 24       	eor	r1, r1
 862:	64 e6       	ldi	r22, 0x64	; 100
 864:	70 e0       	ldi	r23, 0x00	; 0
 866:	0e 94 94 05 	call	0xb28	; 0xb28 <__divmodhi4>
 86a:	60 95       	com	r22
 86c:	6c bf       	out	0x3c, r22	; 60
 86e:	08 95       	ret

00000870 <__vector_11>:
 870:	1f 92       	push	r1
 872:	0f 92       	push	r0
 874:	0f b6       	in	r0, 0x3f	; 63
 876:	0f 92       	push	r0
 878:	11 24       	eor	r1, r1
 87a:	2f 93       	push	r18
 87c:	3f 93       	push	r19
 87e:	4f 93       	push	r20
 880:	5f 93       	push	r21
 882:	6f 93       	push	r22
 884:	7f 93       	push	r23
 886:	8f 93       	push	r24
 888:	9f 93       	push	r25
 88a:	af 93       	push	r26
 88c:	bf 93       	push	r27
 88e:	ef 93       	push	r30
 890:	ff 93       	push	r31
 892:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <OVF_ptr>
 896:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <OVF_ptr+0x1>
 89a:	30 97       	sbiw	r30, 0x00	; 0
 89c:	09 f0       	breq	.+2      	; 0x8a0 <__vector_11+0x30>
 89e:	09 95       	icall
 8a0:	ff 91       	pop	r31
 8a2:	ef 91       	pop	r30
 8a4:	bf 91       	pop	r27
 8a6:	af 91       	pop	r26
 8a8:	9f 91       	pop	r25
 8aa:	8f 91       	pop	r24
 8ac:	7f 91       	pop	r23
 8ae:	6f 91       	pop	r22
 8b0:	5f 91       	pop	r21
 8b2:	4f 91       	pop	r20
 8b4:	3f 91       	pop	r19
 8b6:	2f 91       	pop	r18
 8b8:	0f 90       	pop	r0
 8ba:	0f be       	out	0x3f, r0	; 63
 8bc:	0f 90       	pop	r0
 8be:	1f 90       	pop	r1
 8c0:	18 95       	reti

000008c2 <__vector_10>:
 8c2:	1f 92       	push	r1
 8c4:	0f 92       	push	r0
 8c6:	0f b6       	in	r0, 0x3f	; 63
 8c8:	0f 92       	push	r0
 8ca:	11 24       	eor	r1, r1
 8cc:	2f 93       	push	r18
 8ce:	3f 93       	push	r19
 8d0:	4f 93       	push	r20
 8d2:	5f 93       	push	r21
 8d4:	6f 93       	push	r22
 8d6:	7f 93       	push	r23
 8d8:	8f 93       	push	r24
 8da:	9f 93       	push	r25
 8dc:	af 93       	push	r26
 8de:	bf 93       	push	r27
 8e0:	ef 93       	push	r30
 8e2:	ff 93       	push	r31
 8e4:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <CM_ptr>
 8e8:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <CM_ptr+0x1>
 8ec:	30 97       	sbiw	r30, 0x00	; 0
 8ee:	09 f0       	breq	.+2      	; 0x8f2 <__vector_10+0x30>
 8f0:	09 95       	icall
 8f2:	ff 91       	pop	r31
 8f4:	ef 91       	pop	r30
 8f6:	bf 91       	pop	r27
 8f8:	af 91       	pop	r26
 8fa:	9f 91       	pop	r25
 8fc:	8f 91       	pop	r24
 8fe:	7f 91       	pop	r23
 900:	6f 91       	pop	r22
 902:	5f 91       	pop	r21
 904:	4f 91       	pop	r20
 906:	3f 91       	pop	r19
 908:	2f 91       	pop	r18
 90a:	0f 90       	pop	r0
 90c:	0f be       	out	0x3f, r0	; 63
 90e:	0f 90       	pop	r0
 910:	1f 90       	pop	r1
 912:	18 95       	reti

00000914 <__vector_9>:
{
	Timer1_ICU_Fptr=LocalFptr;
}

ISR(TIMER1_OVF_vect)
{
 914:	1f 92       	push	r1
 916:	0f 92       	push	r0
 918:	0f b6       	in	r0, 0x3f	; 63
 91a:	0f 92       	push	r0
 91c:	11 24       	eor	r1, r1
 91e:	2f 93       	push	r18
 920:	3f 93       	push	r19
 922:	4f 93       	push	r20
 924:	5f 93       	push	r21
 926:	6f 93       	push	r22
 928:	7f 93       	push	r23
 92a:	8f 93       	push	r24
 92c:	9f 93       	push	r25
 92e:	af 93       	push	r26
 930:	bf 93       	push	r27
 932:	ef 93       	push	r30
 934:	ff 93       	push	r31
	if(Timer1_OVF_Fptr!=0)
 936:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <Timer1_OVF_Fptr>
 93a:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <Timer1_OVF_Fptr+0x1>
 93e:	30 97       	sbiw	r30, 0x00	; 0
 940:	09 f0       	breq	.+2      	; 0x944 <__vector_9+0x30>
	{
		Timer1_OVF_Fptr();
 942:	09 95       	icall
	}
}
 944:	ff 91       	pop	r31
 946:	ef 91       	pop	r30
 948:	bf 91       	pop	r27
 94a:	af 91       	pop	r26
 94c:	9f 91       	pop	r25
 94e:	8f 91       	pop	r24
 950:	7f 91       	pop	r23
 952:	6f 91       	pop	r22
 954:	5f 91       	pop	r21
 956:	4f 91       	pop	r20
 958:	3f 91       	pop	r19
 95a:	2f 91       	pop	r18
 95c:	0f 90       	pop	r0
 95e:	0f be       	out	0x3f, r0	; 63
 960:	0f 90       	pop	r0
 962:	1f 90       	pop	r1
 964:	18 95       	reti

00000966 <__vector_7>:
ISR(TIMER1_OCA_vect)
{
 966:	1f 92       	push	r1
 968:	0f 92       	push	r0
 96a:	0f b6       	in	r0, 0x3f	; 63
 96c:	0f 92       	push	r0
 96e:	11 24       	eor	r1, r1
 970:	2f 93       	push	r18
 972:	3f 93       	push	r19
 974:	4f 93       	push	r20
 976:	5f 93       	push	r21
 978:	6f 93       	push	r22
 97a:	7f 93       	push	r23
 97c:	8f 93       	push	r24
 97e:	9f 93       	push	r25
 980:	af 93       	push	r26
 982:	bf 93       	push	r27
 984:	ef 93       	push	r30
 986:	ff 93       	push	r31
	if(Timer1_OCA_Fptr!=0)
 988:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <Timer1_OCA_Fptr>
 98c:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <Timer1_OCA_Fptr+0x1>
 990:	30 97       	sbiw	r30, 0x00	; 0
 992:	09 f0       	breq	.+2      	; 0x996 <__vector_7+0x30>
	{
		Timer1_OCA_Fptr();
 994:	09 95       	icall
	}
}
 996:	ff 91       	pop	r31
 998:	ef 91       	pop	r30
 99a:	bf 91       	pop	r27
 99c:	af 91       	pop	r26
 99e:	9f 91       	pop	r25
 9a0:	8f 91       	pop	r24
 9a2:	7f 91       	pop	r23
 9a4:	6f 91       	pop	r22
 9a6:	5f 91       	pop	r21
 9a8:	4f 91       	pop	r20
 9aa:	3f 91       	pop	r19
 9ac:	2f 91       	pop	r18
 9ae:	0f 90       	pop	r0
 9b0:	0f be       	out	0x3f, r0	; 63
 9b2:	0f 90       	pop	r0
 9b4:	1f 90       	pop	r1
 9b6:	18 95       	reti

000009b8 <__vector_8>:
ISR(TIMER1_OCB_vect)
{
 9b8:	1f 92       	push	r1
 9ba:	0f 92       	push	r0
 9bc:	0f b6       	in	r0, 0x3f	; 63
 9be:	0f 92       	push	r0
 9c0:	11 24       	eor	r1, r1
 9c2:	2f 93       	push	r18
 9c4:	3f 93       	push	r19
 9c6:	4f 93       	push	r20
 9c8:	5f 93       	push	r21
 9ca:	6f 93       	push	r22
 9cc:	7f 93       	push	r23
 9ce:	8f 93       	push	r24
 9d0:	9f 93       	push	r25
 9d2:	af 93       	push	r26
 9d4:	bf 93       	push	r27
 9d6:	ef 93       	push	r30
 9d8:	ff 93       	push	r31
	if(Timer1_OCB_Fptr!=0)
 9da:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <Timer1_OCB_Fptr>
 9de:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <Timer1_OCB_Fptr+0x1>
 9e2:	30 97       	sbiw	r30, 0x00	; 0
 9e4:	09 f0       	breq	.+2      	; 0x9e8 <__vector_8+0x30>
	{
		Timer1_OCB_Fptr();
 9e6:	09 95       	icall
	}
}
 9e8:	ff 91       	pop	r31
 9ea:	ef 91       	pop	r30
 9ec:	bf 91       	pop	r27
 9ee:	af 91       	pop	r26
 9f0:	9f 91       	pop	r25
 9f2:	8f 91       	pop	r24
 9f4:	7f 91       	pop	r23
 9f6:	6f 91       	pop	r22
 9f8:	5f 91       	pop	r21
 9fa:	4f 91       	pop	r20
 9fc:	3f 91       	pop	r19
 9fe:	2f 91       	pop	r18
 a00:	0f 90       	pop	r0
 a02:	0f be       	out	0x3f, r0	; 63
 a04:	0f 90       	pop	r0
 a06:	1f 90       	pop	r1
 a08:	18 95       	reti

00000a0a <__vector_6>:
ISR(TIMER1_ICU_vect)
{
 a0a:	1f 92       	push	r1
 a0c:	0f 92       	push	r0
 a0e:	0f b6       	in	r0, 0x3f	; 63
 a10:	0f 92       	push	r0
 a12:	11 24       	eor	r1, r1
 a14:	2f 93       	push	r18
 a16:	3f 93       	push	r19
 a18:	4f 93       	push	r20
 a1a:	5f 93       	push	r21
 a1c:	6f 93       	push	r22
 a1e:	7f 93       	push	r23
 a20:	8f 93       	push	r24
 a22:	9f 93       	push	r25
 a24:	af 93       	push	r26
 a26:	bf 93       	push	r27
 a28:	ef 93       	push	r30
 a2a:	ff 93       	push	r31
	if(Timer1_ICU_Fptr!=0)
 a2c:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <Timer1_ICU_Fptr>
 a30:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <Timer1_ICU_Fptr+0x1>
 a34:	30 97       	sbiw	r30, 0x00	; 0
 a36:	09 f0       	breq	.+2      	; 0xa3a <__vector_6+0x30>
	{
		Timer1_ICU_Fptr();
 a38:	09 95       	icall
	}
}
 a3a:	ff 91       	pop	r31
 a3c:	ef 91       	pop	r30
 a3e:	bf 91       	pop	r27
 a40:	af 91       	pop	r26
 a42:	9f 91       	pop	r25
 a44:	8f 91       	pop	r24
 a46:	7f 91       	pop	r23
 a48:	6f 91       	pop	r22
 a4a:	5f 91       	pop	r21
 a4c:	4f 91       	pop	r20
 a4e:	3f 91       	pop	r19
 a50:	2f 91       	pop	r18
 a52:	0f 90       	pop	r0
 a54:	0f be       	out	0x3f, r0	; 63
 a56:	0f 90       	pop	r0
 a58:	1f 90       	pop	r1
 a5a:	18 95       	reti

00000a5c <__vector_13>:
	{
		Uart_TX_Fptr=LocalFPtr;
	}
}
ISR(UART_RX_vect)
{
 a5c:	1f 92       	push	r1
 a5e:	0f 92       	push	r0
 a60:	0f b6       	in	r0, 0x3f	; 63
 a62:	0f 92       	push	r0
 a64:	11 24       	eor	r1, r1
 a66:	2f 93       	push	r18
 a68:	3f 93       	push	r19
 a6a:	4f 93       	push	r20
 a6c:	5f 93       	push	r21
 a6e:	6f 93       	push	r22
 a70:	7f 93       	push	r23
 a72:	8f 93       	push	r24
 a74:	9f 93       	push	r25
 a76:	af 93       	push	r26
 a78:	bf 93       	push	r27
 a7a:	ef 93       	push	r30
 a7c:	ff 93       	push	r31
	
	if (Uart_RX_Fptr!=0)
 a7e:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <Uart_RX_Fptr>
 a82:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <Uart_RX_Fptr+0x1>
 a86:	30 97       	sbiw	r30, 0x00	; 0
 a88:	09 f0       	breq	.+2      	; 0xa8c <__vector_13+0x30>
	{
		Uart_RX_Fptr();
 a8a:	09 95       	icall
	}
}
 a8c:	ff 91       	pop	r31
 a8e:	ef 91       	pop	r30
 a90:	bf 91       	pop	r27
 a92:	af 91       	pop	r26
 a94:	9f 91       	pop	r25
 a96:	8f 91       	pop	r24
 a98:	7f 91       	pop	r23
 a9a:	6f 91       	pop	r22
 a9c:	5f 91       	pop	r21
 a9e:	4f 91       	pop	r20
 aa0:	3f 91       	pop	r19
 aa2:	2f 91       	pop	r18
 aa4:	0f 90       	pop	r0
 aa6:	0f be       	out	0x3f, r0	; 63
 aa8:	0f 90       	pop	r0
 aaa:	1f 90       	pop	r1
 aac:	18 95       	reti

00000aae <__vector_15>:
ISR (UART_TX_vect)
{
 aae:	1f 92       	push	r1
 ab0:	0f 92       	push	r0
 ab2:	0f b6       	in	r0, 0x3f	; 63
 ab4:	0f 92       	push	r0
 ab6:	11 24       	eor	r1, r1
 ab8:	2f 93       	push	r18
 aba:	3f 93       	push	r19
 abc:	4f 93       	push	r20
 abe:	5f 93       	push	r21
 ac0:	6f 93       	push	r22
 ac2:	7f 93       	push	r23
 ac4:	8f 93       	push	r24
 ac6:	9f 93       	push	r25
 ac8:	af 93       	push	r26
 aca:	bf 93       	push	r27
 acc:	ef 93       	push	r30
 ace:	ff 93       	push	r31
	if (Uart_TX_Fptr!=0)
 ad0:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <Uart_TX_Fptr>
 ad4:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <Uart_TX_Fptr+0x1>
 ad8:	30 97       	sbiw	r30, 0x00	; 0
 ada:	09 f0       	breq	.+2      	; 0xade <__vector_15+0x30>
	{
		Uart_TX_Fptr();
 adc:	09 95       	icall
	}
	
 ade:	ff 91       	pop	r31
 ae0:	ef 91       	pop	r30
 ae2:	bf 91       	pop	r27
 ae4:	af 91       	pop	r26
 ae6:	9f 91       	pop	r25
 ae8:	8f 91       	pop	r24
 aea:	7f 91       	pop	r23
 aec:	6f 91       	pop	r22
 aee:	5f 91       	pop	r21
 af0:	4f 91       	pop	r20
 af2:	3f 91       	pop	r19
 af4:	2f 91       	pop	r18
 af6:	0f 90       	pop	r0
 af8:	0f be       	out	0x3f, r0	; 63
 afa:	0f 90       	pop	r0
 afc:	1f 90       	pop	r1
 afe:	18 95       	reti

00000b00 <__udivmodhi4>:
 b00:	aa 1b       	sub	r26, r26
 b02:	bb 1b       	sub	r27, r27
 b04:	51 e1       	ldi	r21, 0x11	; 17
 b06:	07 c0       	rjmp	.+14     	; 0xb16 <__udivmodhi4_ep>

00000b08 <__udivmodhi4_loop>:
 b08:	aa 1f       	adc	r26, r26
 b0a:	bb 1f       	adc	r27, r27
 b0c:	a6 17       	cp	r26, r22
 b0e:	b7 07       	cpc	r27, r23
 b10:	10 f0       	brcs	.+4      	; 0xb16 <__udivmodhi4_ep>
 b12:	a6 1b       	sub	r26, r22
 b14:	b7 0b       	sbc	r27, r23

00000b16 <__udivmodhi4_ep>:
 b16:	88 1f       	adc	r24, r24
 b18:	99 1f       	adc	r25, r25
 b1a:	5a 95       	dec	r21
 b1c:	a9 f7       	brne	.-22     	; 0xb08 <__udivmodhi4_loop>
 b1e:	80 95       	com	r24
 b20:	90 95       	com	r25
 b22:	bc 01       	movw	r22, r24
 b24:	cd 01       	movw	r24, r26
 b26:	08 95       	ret

00000b28 <__divmodhi4>:
 b28:	97 fb       	bst	r25, 7
 b2a:	07 2e       	mov	r0, r23
 b2c:	16 f4       	brtc	.+4      	; 0xb32 <__divmodhi4+0xa>
 b2e:	00 94       	com	r0
 b30:	07 d0       	rcall	.+14     	; 0xb40 <__divmodhi4_neg1>
 b32:	77 fd       	sbrc	r23, 7
 b34:	09 d0       	rcall	.+18     	; 0xb48 <__divmodhi4_neg2>
 b36:	0e 94 80 05 	call	0xb00	; 0xb00 <__udivmodhi4>
 b3a:	07 fc       	sbrc	r0, 7
 b3c:	05 d0       	rcall	.+10     	; 0xb48 <__divmodhi4_neg2>
 b3e:	3e f4       	brtc	.+14     	; 0xb4e <__divmodhi4_exit>

00000b40 <__divmodhi4_neg1>:
 b40:	90 95       	com	r25
 b42:	81 95       	neg	r24
 b44:	9f 4f       	sbci	r25, 0xFF	; 255
 b46:	08 95       	ret

00000b48 <__divmodhi4_neg2>:
 b48:	70 95       	com	r23
 b4a:	61 95       	neg	r22
 b4c:	7f 4f       	sbci	r23, 0xFF	; 255

00000b4e <__divmodhi4_exit>:
 b4e:	08 95       	ret

00000b50 <__udivmodsi4>:
 b50:	a1 e2       	ldi	r26, 0x21	; 33
 b52:	1a 2e       	mov	r1, r26
 b54:	aa 1b       	sub	r26, r26
 b56:	bb 1b       	sub	r27, r27
 b58:	fd 01       	movw	r30, r26
 b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__udivmodsi4_ep>

00000b5c <__udivmodsi4_loop>:
 b5c:	aa 1f       	adc	r26, r26
 b5e:	bb 1f       	adc	r27, r27
 b60:	ee 1f       	adc	r30, r30
 b62:	ff 1f       	adc	r31, r31
 b64:	a2 17       	cp	r26, r18
 b66:	b3 07       	cpc	r27, r19
 b68:	e4 07       	cpc	r30, r20
 b6a:	f5 07       	cpc	r31, r21
 b6c:	20 f0       	brcs	.+8      	; 0xb76 <__udivmodsi4_ep>
 b6e:	a2 1b       	sub	r26, r18
 b70:	b3 0b       	sbc	r27, r19
 b72:	e4 0b       	sbc	r30, r20
 b74:	f5 0b       	sbc	r31, r21

00000b76 <__udivmodsi4_ep>:
 b76:	66 1f       	adc	r22, r22
 b78:	77 1f       	adc	r23, r23
 b7a:	88 1f       	adc	r24, r24
 b7c:	99 1f       	adc	r25, r25
 b7e:	1a 94       	dec	r1
 b80:	69 f7       	brne	.-38     	; 0xb5c <__udivmodsi4_loop>
 b82:	60 95       	com	r22
 b84:	70 95       	com	r23
 b86:	80 95       	com	r24
 b88:	90 95       	com	r25
 b8a:	9b 01       	movw	r18, r22
 b8c:	ac 01       	movw	r20, r24
 b8e:	bd 01       	movw	r22, r26
 b90:	cf 01       	movw	r24, r30
 b92:	08 95       	ret

00000b94 <__divmodsi4>:
 b94:	05 2e       	mov	r0, r21
 b96:	97 fb       	bst	r25, 7
 b98:	1e f4       	brtc	.+6      	; 0xba0 <__divmodsi4+0xc>
 b9a:	00 94       	com	r0
 b9c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__negsi2>
 ba0:	57 fd       	sbrc	r21, 7
 ba2:	07 d0       	rcall	.+14     	; 0xbb2 <__divmodsi4_neg2>
 ba4:	0e 94 a8 05 	call	0xb50	; 0xb50 <__udivmodsi4>
 ba8:	07 fc       	sbrc	r0, 7
 baa:	03 d0       	rcall	.+6      	; 0xbb2 <__divmodsi4_neg2>
 bac:	4e f4       	brtc	.+18     	; 0xbc0 <__divmodsi4_exit>
 bae:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__negsi2>

00000bb2 <__divmodsi4_neg2>:
 bb2:	50 95       	com	r21
 bb4:	40 95       	com	r20
 bb6:	30 95       	com	r19
 bb8:	21 95       	neg	r18
 bba:	3f 4f       	sbci	r19, 0xFF	; 255
 bbc:	4f 4f       	sbci	r20, 0xFF	; 255
 bbe:	5f 4f       	sbci	r21, 0xFF	; 255

00000bc0 <__divmodsi4_exit>:
 bc0:	08 95       	ret

00000bc2 <__negsi2>:
 bc2:	90 95       	com	r25
 bc4:	80 95       	com	r24
 bc6:	70 95       	com	r23
 bc8:	61 95       	neg	r22
 bca:	7f 4f       	sbci	r23, 0xFF	; 255
 bcc:	8f 4f       	sbci	r24, 0xFF	; 255
 bce:	9f 4f       	sbci	r25, 0xFF	; 255
 bd0:	08 95       	ret

00000bd2 <__tablejump2__>:
 bd2:	ee 0f       	add	r30, r30
 bd4:	ff 1f       	adc	r31, r31
 bd6:	05 90       	lpm	r0, Z+
 bd8:	f4 91       	lpm	r31, Z
 bda:	e0 2d       	mov	r30, r0
 bdc:	09 94       	ijmp

00000bde <__umulhisi3>:
 bde:	a2 9f       	mul	r26, r18
 be0:	b0 01       	movw	r22, r0
 be2:	b3 9f       	mul	r27, r19
 be4:	c0 01       	movw	r24, r0
 be6:	a3 9f       	mul	r26, r19
 be8:	70 0d       	add	r23, r0
 bea:	81 1d       	adc	r24, r1
 bec:	11 24       	eor	r1, r1
 bee:	91 1d       	adc	r25, r1
 bf0:	b2 9f       	mul	r27, r18
 bf2:	70 0d       	add	r23, r0
 bf4:	81 1d       	adc	r24, r1
 bf6:	11 24       	eor	r1, r1
 bf8:	91 1d       	adc	r25, r1
 bfa:	08 95       	ret

00000bfc <_exit>:
 bfc:	f8 94       	cli

00000bfe <__stop_program>:
 bfe:	ff cf       	rjmp	.-2      	; 0xbfe <__stop_program>
