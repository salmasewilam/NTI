
NTI_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000956  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000956  000009ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800064  00800064  000009ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000418  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ad8  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014a8  00000000  00000000  0000594c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002444  00000000  00000000  00006df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cd0  00000000  00000000  00009238  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001614  00000000  00000000  00009f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026d5  00000000  00000000  0000b51c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  0000dbf1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__vector_1>
   8:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_2>
   c:	0c 94 20 03 	jmp	0x640	; 0x640 <__vector_3>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 16 04 	jmp	0x82c	; 0x82c <__vector_6>
  1c:	0c 94 c4 03 	jmp	0x788	; 0x788 <__vector_7>
  20:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__vector_8>
  24:	0c 94 9b 03 	jmp	0x736	; 0x736 <__vector_9>
  28:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__vector_10>
  2c:	0c 94 49 03 	jmp	0x692	; 0x692 <__vector_11>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__vector_13>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__vector_15>
  40:	0c 94 29 02 	jmp	0x452	; 0x452 <__vector_16>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	5e 02       	muls	r21, r30
  56:	64 02       	muls	r22, r20
  58:	6a 02       	muls	r22, r26
  5a:	70 02       	muls	r23, r16
  5c:	76 02       	muls	r23, r22
  5e:	7c 02       	muls	r23, r28
  60:	82 02       	muls	r24, r18
  62:	88 02       	muls	r24, r24
  64:	9c 02       	muls	r25, r28
  66:	a2 02       	muls	r26, r18
  68:	a8 02       	muls	r26, r24
  6a:	ae 02       	muls	r26, r30
  6c:	b4 02       	muls	r27, r20
  6e:	ba 02       	muls	r27, r26
  70:	c0 02       	muls	r28, r16
  72:	c6 02       	muls	r28, r22

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e6 e5       	ldi	r30, 0x56	; 86
  88:	f9 e0       	ldi	r31, 0x09	; 9
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a4 36       	cpi	r26, 0x64	; 100
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	a4 e6       	ldi	r26, 0x64	; 100
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	ac 37       	cpi	r26, 0x7C	; 124
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 01 02 	call	0x402	; 0x402 <main>
  aa:	0c 94 a9 04 	jmp	0x952	; 0x952 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <sevseg_init>:
#include <util/delay.h>
	
void sevseg_init(void)
{
	//set com as output for the four 7seg
	DIO_voidSetPinDirection(ptrA,2,1);
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	62 e0       	ldi	r22, 0x02	; 2
  b6:	89 e3       	ldi	r24, 0x39	; 57
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrA,3,1);
  be:	41 e0       	ldi	r20, 0x01	; 1
  c0:	63 e0       	ldi	r22, 0x03	; 3
  c2:	89 e3       	ldi	r24, 0x39	; 57
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,5,1);
  ca:	41 e0       	ldi	r20, 0x01	; 1
  cc:	65 e0       	ldi	r22, 0x05	; 5
  ce:	86 e3       	ldi	r24, 0x36	; 54
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,6,1);
  d6:	41 e0       	ldi	r20, 0x01	; 1
  d8:	66 e0       	ldi	r22, 0x06	; 6
  da:	86 e3       	ldi	r24, 0x36	; 54
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	
    //enable only one 7seg
	DIO_voidSetPinValue(ptrA,2,1);
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	62 e0       	ldi	r22, 0x02	; 2
  e6:	89 e3       	ldi	r24, 0x39	; 57
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 90 02 	call	0x520	; 0x520 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ptrA,3,0);
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	63 e0       	ldi	r22, 0x03	; 3
  f2:	89 e3       	ldi	r24, 0x39	; 57
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 90 02 	call	0x520	; 0x520 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ptrB,5,1);
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	65 e0       	ldi	r22, 0x05	; 5
  fe:	86 e3       	ldi	r24, 0x36	; 54
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 90 02 	call	0x520	; 0x520 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ptrB,6,1);
 106:	41 e0       	ldi	r20, 0x01	; 1
 108:	66 e0       	ldi	r22, 0x06	; 6
 10a:	86 e3       	ldi	r24, 0x36	; 54
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 90 02 	call	0x520	; 0x520 <DIO_voidSetPinValue>
	
	//set decoder pins as output
	DIO_voidSetPinDirection(ptrB,0,1);
 112:	41 e0       	ldi	r20, 0x01	; 1
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	86 e3       	ldi	r24, 0x36	; 54
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,1,1);
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	86 e3       	ldi	r24, 0x36	; 54
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,2,1);
 12a:	41 e0       	ldi	r20, 0x01	; 1
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	86 e3       	ldi	r24, 0x36	; 54
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,4,1);
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	64 e0       	ldi	r22, 0x04	; 4
 13a:	86 e3       	ldi	r24, 0x36	; 54
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
 142:	08 95       	ret

00000144 <fingerprint_init>:
#include "C:\Users\USER\Desktop\nti repo\NTI\NTI_AVR\NTI_AVR\NTI_AVR\MCAL\UART\uart_interface.h"
#include "C:\Users\USER\Desktop\nti repo\NTI\NTI_AVR\NTI_AVR\NTI_AVR\MCAL\DIO\Dio.h"

void fingerprint_init(void)
{
	Uart_Init();
 144:	0e 94 3f 04 	call	0x87e	; 0x87e <Uart_Init>
	DIO_voidSetPinDirection(ptrD,1,1);
 148:	41 e0       	ldi	r20, 0x01	; 1
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	80 e3       	ldi	r24, 0x30	; 48
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrD,0,0);
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	80 e3       	ldi	r24, 0x30	; 48
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
 160:	08 95       	ret

00000162 <FingerPS_handShake>:
}
FINGERP_ERROR_t FingerPS_handShake(void)
 {
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	1f 92       	push	r1
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
	 u8 ack;
	 FINGERP_ERROR_t status;
	 
	 Uart_SendData(0xEF);
 16c:	8f ee       	ldi	r24, 0xEF	; 239
 16e:	0e 94 47 04 	call	0x88e	; 0x88e <Uart_SendData>
	 Uart_SendData(0x01);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 47 04 	call	0x88e	; 0x88e <Uart_SendData>
	 Uart_SendData(0xFF);
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	0e 94 47 04 	call	0x88e	; 0x88e <Uart_SendData>
	 Uart_SendData(0xFF);
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	0e 94 47 04 	call	0x88e	; 0x88e <Uart_SendData>
	 Uart_SendData(0xFF);
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	0e 94 47 04 	call	0x88e	; 0x88e <Uart_SendData>
	 Uart_SendData(0xFF);
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	0e 94 47 04 	call	0x88e	; 0x88e <Uart_SendData>
	 Uart_SendData(0x01);
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 47 04 	call	0x88e	; 0x88e <Uart_SendData>
	 Uart_SendData(0x00);
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 47 04 	call	0x88e	; 0x88e <Uart_SendData>
	 Uart_SendData(0x03);
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	0e 94 47 04 	call	0x88e	; 0x88e <Uart_SendData>
	 Uart_SendData(0x40);
 1a2:	80 e4       	ldi	r24, 0x40	; 64
 1a4:	0e 94 47 04 	call	0x88e	; 0x88e <Uart_SendData>
	 Uart_SendData(0x00);
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	0e 94 47 04 	call	0x88e	; 0x88e <Uart_SendData>
	 Uart_SendData(0x44);
 1ae:	84 e4       	ldi	r24, 0x44	; 68
 1b0:	0e 94 47 04 	call	0x88e	; 0x88e <Uart_SendData>
	 Uart_RecieveData(&ack);
 1b4:	ce 01       	movw	r24, r28
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	0e 94 4b 04 	call	0x896	; 0x896 <Uart_RecieveData>
	 status =ack;
	 return status;
 }
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	0f 90       	pop	r0
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <keypad_init>:
{'M','N','O','S'}
};
void keypad_init (void)
{
	//set output pins rows
	DIO_voidSetPinDirection(PORT_OUT,FIRST_OUTPUT,OUTPUT);
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	64 e0       	ldi	r22, 0x04	; 4
 1ca:	86 e3       	ldi	r24, 0x36	; 54
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_OUT,SECOND_OUTPUT,OUTPUT);
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	65 e0       	ldi	r22, 0x05	; 5
 1d6:	86 e3       	ldi	r24, 0x36	; 54
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_OUT,THIRD_OUTPUT,OUTPUT);
 1de:	41 e0       	ldi	r20, 0x01	; 1
 1e0:	66 e0       	ldi	r22, 0x06	; 6
 1e2:	86 e3       	ldi	r24, 0x36	; 54
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_OUT,FORTH_OUTPUT,OUTPUT);
 1ea:	41 e0       	ldi	r20, 0x01	; 1
 1ec:	67 e0       	ldi	r22, 0x07	; 7
 1ee:	86 e3       	ldi	r24, 0x36	; 54
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	//set input pins cols
	DIO_voidSetPinDirection(PORT_IN,FIRST_INPUT,INPUT);
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	62 e0       	ldi	r22, 0x02	; 2
 1fa:	80 e3       	ldi	r24, 0x30	; 48
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_IN,SECOND_INPUT,INPUT);
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	63 e0       	ldi	r22, 0x03	; 3
 206:	80 e3       	ldi	r24, 0x30	; 48
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_IN,THIRD_INPUT,INPUT);
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	64 e0       	ldi	r22, 0x04	; 4
 212:	80 e3       	ldi	r24, 0x30	; 48
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_IN,FORTH_INPUT,INPUT);
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	65 e0       	ldi	r22, 0x05	; 5
 21e:	80 e3       	ldi	r24, 0x30	; 48
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	//set output as high
	DIO_voidSetPinValue(PORT_OUT,FIRST_OUTPUT,HIGH);
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	64 e0       	ldi	r22, 0x04	; 4
 22a:	86 e3       	ldi	r24, 0x36	; 54
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 90 02 	call	0x520	; 0x520 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_OUT,SECOND_OUTPUT,HIGH);
 232:	41 e0       	ldi	r20, 0x01	; 1
 234:	65 e0       	ldi	r22, 0x05	; 5
 236:	86 e3       	ldi	r24, 0x36	; 54
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 90 02 	call	0x520	; 0x520 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_OUT,SECOND_OUTPUT,HIGH);
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	65 e0       	ldi	r22, 0x05	; 5
 242:	86 e3       	ldi	r24, 0x36	; 54
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 90 02 	call	0x520	; 0x520 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_OUT,SECOND_OUTPUT,HIGH);
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	65 e0       	ldi	r22, 0x05	; 5
 24e:	86 e3       	ldi	r24, 0x36	; 54
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 90 02 	call	0x520	; 0x520 <DIO_voidSetPinValue>
 256:	08 95       	ret

00000258 <H_LCD_void_latchByte>:
	H_LCD_void_latchByte(copy_u8command);
	_delay_ms(1);
}

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
 258:	df 92       	push	r13
 25a:	ef 92       	push	r14
 25c:	ff 92       	push	r15
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	d8 2e       	mov	r13, r24
	int p=7;
	for (int i=0;i<2;i++)
 268:	e1 2c       	mov	r14, r1
 26a:	f1 2c       	mov	r15, r1
	_delay_ms(1);
}

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
	int p=7;
 26c:	07 e0       	ldi	r16, 0x07	; 7
 26e:	10 e0       	ldi	r17, 0x00	; 0
	for (int i=0;i<2;i++)
 270:	35 c0       	rjmp	.+106    	; 0x2dc <H_LCD_void_latchByte+0x84>
	{
		for (int j=0;j<4;j++)
		{
			DIO_voidSetPinValue(PINS_PORT,LCD_pins[j],READ_BIT(copy_u8Byte,p));
 272:	4d 2d       	mov	r20, r13
 274:	50 e0       	ldi	r21, 0x00	; 0
 276:	00 2e       	mov	r0, r16
 278:	02 c0       	rjmp	.+4      	; 0x27e <H_LCD_void_latchByte+0x26>
 27a:	55 95       	asr	r21
 27c:	47 95       	ror	r20
 27e:	0a 94       	dec	r0
 280:	e2 f7       	brpl	.-8      	; 0x27a <H_LCD_void_latchByte+0x22>
 282:	41 70       	andi	r20, 0x01	; 1
 284:	fe 01       	movw	r30, r28
 286:	e0 5a       	subi	r30, 0xA0	; 160
 288:	ff 4f       	sbci	r31, 0xFF	; 255
 28a:	60 81       	ld	r22, Z
 28c:	89 e3       	ldi	r24, 0x39	; 57
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 90 02 	call	0x520	; 0x520 <DIO_voidSetPinValue>
			p--;
 294:	01 50       	subi	r16, 0x01	; 1
 296:	11 09       	sbc	r17, r1
static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
	int p=7;
	for (int i=0;i<2;i++)
	{
		for (int j=0;j<4;j++)
 298:	21 96       	adiw	r28, 0x01	; 1
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <H_LCD_void_latchByte+0x48>
 29c:	c0 e0       	ldi	r28, 0x00	; 0
 29e:	d0 e0       	ldi	r29, 0x00	; 0
 2a0:	c4 30       	cpi	r28, 0x04	; 4
 2a2:	d1 05       	cpc	r29, r1
 2a4:	34 f3       	brlt	.-52     	; 0x272 <H_LCD_void_latchByte+0x1a>
		{
			DIO_voidSetPinValue(PINS_PORT,LCD_pins[j],READ_BIT(copy_u8Byte,p));
			p--;
		}
		DIO_voidSetPinValue(EN_PORT,EN,HIGH);
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	62 e0       	ldi	r22, 0x02	; 2
 2aa:	89 e3       	ldi	r24, 0x39	; 57
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 90 02 	call	0x520	; 0x520 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	8f e0       	ldi	r24, 0x0F	; 15
 2b4:	97 e2       	ldi	r25, 0x27	; 39
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <H_LCD_void_latchByte+0x5e>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <H_LCD_void_latchByte+0x64>
 2bc:	00 00       	nop
		_delay_ms(5);
		DIO_voidSetPinValue(EN_PORT,EN,LOW);
 2be:	40 e0       	ldi	r20, 0x00	; 0
 2c0:	62 e0       	ldi	r22, 0x02	; 2
 2c2:	89 e3       	ldi	r24, 0x39	; 57
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 90 02 	call	0x520	; 0x520 <DIO_voidSetPinValue>
 2ca:	8f e0       	ldi	r24, 0x0F	; 15
 2cc:	97 e2       	ldi	r25, 0x27	; 39
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <H_LCD_void_latchByte+0x76>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <H_LCD_void_latchByte+0x7c>
 2d4:	00 00       	nop
}

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
	int p=7;
	for (int i=0;i<2;i++)
 2d6:	9f ef       	ldi	r25, 0xFF	; 255
 2d8:	e9 1a       	sub	r14, r25
 2da:	f9 0a       	sbc	r15, r25
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	e8 16       	cp	r14, r24
 2e0:	f1 04       	cpc	r15, r1
 2e2:	e4 f2       	brlt	.-72     	; 0x29c <H_LCD_void_latchByte+0x44>
		DIO_voidSetPinValue(EN_PORT,EN,HIGH);
		_delay_ms(5);
		DIO_voidSetPinValue(EN_PORT,EN,LOW);
		_delay_ms(5);
	}
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	ff 90       	pop	r15
 2ee:	ef 90       	pop	r14
 2f0:	df 90       	pop	r13
 2f2:	08 95       	ret

000002f4 <H_LCD_void_sendData>:
	H_LCD_void_sendCommand(0x06);
	
	
}
void H_LCD_void_sendData(u8 copy_u8data )
{
 2f4:	cf 93       	push	r28
 2f6:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue(RS_PORT,RS,HIGH);
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	61 e0       	ldi	r22, 0x01	; 1
 2fc:	89 e3       	ldi	r24, 0x39	; 57
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 90 02 	call	0x520	; 0x520 <DIO_voidSetPinValue>
	H_LCD_void_latchByte(copy_u8data);
 304:	8c 2f       	mov	r24, r28
 306:	0e 94 2c 01 	call	0x258	; 0x258 <H_LCD_void_latchByte>
 30a:	8f ec       	ldi	r24, 0xCF	; 207
 30c:	97 e0       	ldi	r25, 0x07	; 7
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <H_LCD_void_sendData+0x1a>
 312:	00 c0       	rjmp	.+0      	; 0x314 <H_LCD_void_sendData+0x20>
 314:	00 00       	nop
	_delay_ms(1);
}
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8command)
{
 31a:	cf 93       	push	r28
 31c:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue(RS_PORT,RS,LOW);
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	89 e3       	ldi	r24, 0x39	; 57
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 90 02 	call	0x520	; 0x520 <DIO_voidSetPinValue>
	H_LCD_void_latchByte(copy_u8command);
 32a:	8c 2f       	mov	r24, r28
 32c:	0e 94 2c 01 	call	0x258	; 0x258 <H_LCD_void_latchByte>
 330:	8f ec       	ldi	r24, 0xCF	; 207
 332:	97 e0       	ldi	r25, 0x07	; 7
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <H_LCD_void_sendCommand+0x1a>
 338:	00 c0       	rjmp	.+0      	; 0x33a <H_LCD_void_sendCommand+0x20>
 33a:	00 00       	nop
	_delay_ms(1);
}
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <H_LCD_void_Init>:

u8 LCD_pins[4]={D7,D6,D5,D4};
	
void H_LCD_void_Init(void)
{
	DIO_voidSetPinDirection(RS_PORT,RS,OUTPUT);
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	89 e3       	ldi	r24, 0x39	; 57
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(EN_PORT,EN,OUTPUT);
 34c:	41 e0       	ldi	r20, 0x01	; 1
 34e:	62 e0       	ldi	r22, 0x02	; 2
 350:	89 e3       	ldi	r24, 0x39	; 57
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PINS_PORT,D4,OUTPUT);
 358:	41 e0       	ldi	r20, 0x01	; 1
 35a:	63 e0       	ldi	r22, 0x03	; 3
 35c:	89 e3       	ldi	r24, 0x39	; 57
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PINS_PORT,D5,OUTPUT);
 364:	41 e0       	ldi	r20, 0x01	; 1
 366:	64 e0       	ldi	r22, 0x04	; 4
 368:	89 e3       	ldi	r24, 0x39	; 57
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PINS_PORT,D6,OUTPUT);
 370:	41 e0       	ldi	r20, 0x01	; 1
 372:	65 e0       	ldi	r22, 0x05	; 5
 374:	89 e3       	ldi	r24, 0x39	; 57
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PINS_PORT,D7,OUTPUT);
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	66 e0       	ldi	r22, 0x06	; 6
 380:	89 e3       	ldi	r24, 0x39	; 57
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_voidSetPinDirection>
 388:	2f e7       	ldi	r18, 0x7F	; 127
 38a:	88 e3       	ldi	r24, 0x38	; 56
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	80 40       	sbci	r24, 0x00	; 0
 392:	90 40       	sbci	r25, 0x00	; 0
 394:	e1 f7       	brne	.-8      	; 0x38e <H_LCD_void_Init+0x4e>
 396:	00 c0       	rjmp	.+0      	; 0x398 <H_LCD_void_Init+0x58>
 398:	00 00       	nop
	
	_delay_ms(50);
   DIO_voidSetPinValue(RS_PORT,RS,LOW);
 39a:	40 e0       	ldi	r20, 0x00	; 0
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	89 e3       	ldi	r24, 0x39	; 57
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 90 02 	call	0x520	; 0x520 <DIO_voidSetPinValue>
	H_LCD_void_sendCommand(0x02);
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	0e 94 8d 01 	call	0x31a	; 0x31a <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x02);
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	0e 94 8d 01 	call	0x31a	; 0x31a <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x08);
 3b2:	88 e0       	ldi	r24, 0x08	; 8
 3b4:	0e 94 8d 01 	call	0x31a	; 0x31a <H_LCD_void_sendCommand>
 3b8:	8f ec       	ldi	r24, 0xCF	; 207
 3ba:	97 e0       	ldi	r25, 0x07	; 7
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <H_LCD_void_Init+0x7c>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <H_LCD_void_Init+0x82>
 3c2:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(0x00);
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 8d 01 	call	0x31a	; 0x31a <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x0C);//display on off 0E
 3ca:	8c e0       	ldi	r24, 0x0C	; 12
 3cc:	0e 94 8d 01 	call	0x31a	; 0x31a <H_LCD_void_sendCommand>
 3d0:	8f ec       	ldi	r24, 0xCF	; 207
 3d2:	97 e0       	ldi	r25, 0x07	; 7
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <H_LCD_void_Init+0x94>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <H_LCD_void_Init+0x9a>
 3da:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(0x00);
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 8d 01 	call	0x31a	; 0x31a <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x01);
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 8d 01 	call	0x31a	; 0x31a <H_LCD_void_sendCommand>
 3e8:	8f e6       	ldi	r24, 0x6F	; 111
 3ea:	97 e1       	ldi	r25, 0x17	; 23
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <H_LCD_void_Init+0xac>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <H_LCD_void_Init+0xb2>
 3f2:	00 00       	nop
	_delay_ms(3);
	H_LCD_void_sendCommand(0x00);
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	0e 94 8d 01 	call	0x31a	; 0x31a <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x06);
 3fa:	86 e0       	ldi	r24, 0x06	; 6
 3fc:	0e 94 8d 01 	call	0x31a	; 0x31a <H_LCD_void_sendCommand>
 400:	08 95       	ret

00000402 <main>:

}

int main(void)
{
	H_LCD_void_Init();
 402:	0e 94 a0 01 	call	0x340	; 0x340 <H_LCD_void_Init>
	sevseg_init();
 406:	0e 94 59 00 	call	0xb2	; 0xb2 <sevseg_init>
	keypad_init();
 40a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <keypad_init>
	ADC_Init();
 40e:	0e 94 17 02 	call	0x42e	; 0x42e <ADC_Init>
     //Uart_Init();
	 // SPI_init(&init);
	 //I2C_init(I2C_prescaler_4,SCL_100);
	// EEPROM_Init();
	//coolingsystem_init();
 fingerprint_init();
 412:	0e 94 a2 00 	call	0x144	; 0x144 <fingerprint_init>
	//Timer0_EnableInt(Timer0_Compare_Match);
	//Timer1_ICU_InterruptEnable();
	//Timer1_OVF_InterruptEnable();
	//sei();

	FINGERP_ERROR_t e=	FingerPS_handShake();
 416:	0e 94 b1 00 	call	0x162	; 0x162 <FingerPS_handShake>
	if (e==0) H_LCD_void_sendData('S');
 41a:	81 11       	cpse	r24, r1
 41c:	04 c0       	rjmp	.+8      	; 0x426 <main+0x24>
 41e:	83 e5       	ldi	r24, 0x53	; 83
 420:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <H_LCD_void_sendData>
 424:	03 c0       	rjmp	.+6      	; 0x42c <main+0x2a>
	else H_LCD_void_sendData('F');
 426:	86 e4       	ldi	r24, 0x46	; 70
 428:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <H_LCD_void_sendData>
 42c:	ff cf       	rjmp	.-2      	; 0x42c <main+0x2a>

0000042e <ADC_Init>:
	//set call back pointer
	if (p!= 0) EXT_INT_ptr=p;
	//enable interrupt
	SET_BIT(ADCSRA,ADIE);
	//start conversion
	SET_BIT(ADCSRA,ADSC);
 42e:	86 b1       	in	r24, 0x06	; 6
 430:	88 7f       	andi	r24, 0xF8	; 248
 432:	86 b9       	out	0x06, r24	; 6
 434:	86 b1       	in	r24, 0x06	; 6
 436:	83 60       	ori	r24, 0x03	; 3
 438:	86 b9       	out	0x06, r24	; 6
 43a:	87 b1       	in	r24, 0x07	; 7
 43c:	8f 73       	andi	r24, 0x3F	; 63
 43e:	87 b9       	out	0x07, r24	; 7
 440:	87 b1       	in	r24, 0x07	; 7
 442:	87 b9       	out	0x07, r24	; 7
 444:	87 b1       	in	r24, 0x07	; 7
 446:	8f 7d       	andi	r24, 0xDF	; 223
 448:	87 b9       	out	0x07, r24	; 7
 44a:	86 b1       	in	r24, 0x06	; 6
 44c:	80 68       	ori	r24, 0x80	; 128
 44e:	86 b9       	out	0x06, r24	; 6
 450:	08 95       	ret

00000452 <__vector_16>:
	
}

ISR(ADC_vect)
{
 452:	1f 92       	push	r1
 454:	0f 92       	push	r0
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	0f 92       	push	r0
 45a:	11 24       	eor	r1, r1
 45c:	2f 93       	push	r18
 45e:	3f 93       	push	r19
 460:	4f 93       	push	r20
 462:	5f 93       	push	r21
 464:	6f 93       	push	r22
 466:	7f 93       	push	r23
 468:	8f 93       	push	r24
 46a:	9f 93       	push	r25
 46c:	af 93       	push	r26
 46e:	bf 93       	push	r27
 470:	ef 93       	push	r30
 472:	ff 93       	push	r31

	if (EXT_INT_ptr!=0)
 474:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__data_end>
 478:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <__data_end+0x1>
 47c:	30 97       	sbiw	r30, 0x00	; 0
 47e:	09 f0       	breq	.+2      	; 0x482 <__vector_16+0x30>
	{
		EXT_INT_ptr();
 480:	09 95       	icall
	}
}
 482:	ff 91       	pop	r31
 484:	ef 91       	pop	r30
 486:	bf 91       	pop	r27
 488:	af 91       	pop	r26
 48a:	9f 91       	pop	r25
 48c:	8f 91       	pop	r24
 48e:	7f 91       	pop	r23
 490:	6f 91       	pop	r22
 492:	5f 91       	pop	r21
 494:	4f 91       	pop	r20
 496:	3f 91       	pop	r19
 498:	2f 91       	pop	r18
 49a:	0f 90       	pop	r0
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	0f 90       	pop	r0
 4a0:	1f 90       	pop	r1
 4a2:	18 95       	reti

000004a4 <DIO_voidSetPinDirection>:

#include "C:\Users\USER\Desktop\nti repo\NTI\NTI_AVR\NTI_AVR\NTI_AVR\MCAL\DIO\Dio.h"
#include "C:\Users\USER\Desktop\nti repo\NTI\NTI_AVR\NTI_AVR\NTI_AVR\MCAL\DIO\Dio_Private.h"
#include "C:\Users\USER\Desktop\nti repo\NTI\NTI_AVR\NTI_AVR\NTI_AVR\stdtypes.h"
void DIO_voidSetPinDirection(ports_t *ptr,unsigned char p,Direction dir )
{
 4a4:	0f 93       	push	r16
 4a6:	1f 93       	push	r17
	switch(p)
 4a8:	06 2f       	mov	r16, r22
 4aa:	10 e0       	ldi	r17, 0x00	; 0
 4ac:	08 30       	cpi	r16, 0x08	; 8
 4ae:	11 05       	cpc	r17, r1
 4b0:	a0 f5       	brcc	.+104    	; 0x51a <DIO_voidSetPinDirection+0x76>
 4b2:	f8 01       	movw	r30, r16
 4b4:	e6 5d       	subi	r30, 0xD6	; 214
 4b6:	ff 4f       	sbci	r31, 0xFF	; 255
 4b8:	0c 94 a3 04 	jmp	0x946	; 0x946 <__tablejump2__>
	{
		case 0: ptr->DDR.PIN0=dir; break;
 4bc:	fc 01       	movw	r30, r24
 4be:	21 81       	ldd	r18, Z+1	; 0x01
 4c0:	40 fb       	bst	r20, 0
 4c2:	20 f9       	bld	r18, 0
 4c4:	21 83       	std	Z+1, r18	; 0x01
 4c6:	29 c0       	rjmp	.+82     	; 0x51a <DIO_voidSetPinDirection+0x76>
		case 1: ptr->DDR.PIN1=dir; break;
 4c8:	fc 01       	movw	r30, r24
 4ca:	21 81       	ldd	r18, Z+1	; 0x01
 4cc:	40 fb       	bst	r20, 0
 4ce:	21 f9       	bld	r18, 1
 4d0:	21 83       	std	Z+1, r18	; 0x01
 4d2:	23 c0       	rjmp	.+70     	; 0x51a <DIO_voidSetPinDirection+0x76>
		case 2: ptr->DDR.PIN2=dir; break;
 4d4:	fc 01       	movw	r30, r24
 4d6:	21 81       	ldd	r18, Z+1	; 0x01
 4d8:	40 fb       	bst	r20, 0
 4da:	22 f9       	bld	r18, 2
 4dc:	21 83       	std	Z+1, r18	; 0x01
 4de:	1d c0       	rjmp	.+58     	; 0x51a <DIO_voidSetPinDirection+0x76>
		case 3: ptr->DDR.PIN3=dir; break;
 4e0:	fc 01       	movw	r30, r24
 4e2:	21 81       	ldd	r18, Z+1	; 0x01
 4e4:	40 fb       	bst	r20, 0
 4e6:	23 f9       	bld	r18, 3
 4e8:	21 83       	std	Z+1, r18	; 0x01
 4ea:	17 c0       	rjmp	.+46     	; 0x51a <DIO_voidSetPinDirection+0x76>
		case 4: ptr->DDR.PIN4=dir; break;
 4ec:	fc 01       	movw	r30, r24
 4ee:	21 81       	ldd	r18, Z+1	; 0x01
 4f0:	40 fb       	bst	r20, 0
 4f2:	24 f9       	bld	r18, 4
 4f4:	21 83       	std	Z+1, r18	; 0x01
 4f6:	11 c0       	rjmp	.+34     	; 0x51a <DIO_voidSetPinDirection+0x76>
		case 5: ptr->DDR.PIN5=dir; break;
 4f8:	fc 01       	movw	r30, r24
 4fa:	21 81       	ldd	r18, Z+1	; 0x01
 4fc:	40 fb       	bst	r20, 0
 4fe:	25 f9       	bld	r18, 5
 500:	21 83       	std	Z+1, r18	; 0x01
 502:	0b c0       	rjmp	.+22     	; 0x51a <DIO_voidSetPinDirection+0x76>
		case 6: ptr->DDR.PIN6=dir; break;
 504:	fc 01       	movw	r30, r24
 506:	21 81       	ldd	r18, Z+1	; 0x01
 508:	40 fb       	bst	r20, 0
 50a:	26 f9       	bld	r18, 6
 50c:	21 83       	std	Z+1, r18	; 0x01
 50e:	05 c0       	rjmp	.+10     	; 0x51a <DIO_voidSetPinDirection+0x76>
		case 7: ptr->DDR.PIN7=dir; break;
 510:	fc 01       	movw	r30, r24
 512:	21 81       	ldd	r18, Z+1	; 0x01
 514:	40 fb       	bst	r20, 0
 516:	27 f9       	bld	r18, 7
 518:	21 83       	std	Z+1, r18	; 0x01
	}
}
 51a:	1f 91       	pop	r17
 51c:	0f 91       	pop	r16
 51e:	08 95       	ret

00000520 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(ports_t *ptr,unsigned char p,Value val)
{
 520:	0f 93       	push	r16
 522:	1f 93       	push	r17
	switch(p)
 524:	06 2f       	mov	r16, r22
 526:	10 e0       	ldi	r17, 0x00	; 0
 528:	08 30       	cpi	r16, 0x08	; 8
 52a:	11 05       	cpc	r17, r1
 52c:	a0 f5       	brcc	.+104    	; 0x596 <DIO_voidSetPinValue+0x76>
 52e:	f8 01       	movw	r30, r16
 530:	ee 5c       	subi	r30, 0xCE	; 206
 532:	ff 4f       	sbci	r31, 0xFF	; 255
 534:	0c 94 a3 04 	jmp	0x946	; 0x946 <__tablejump2__>
	{
		case 0: ptr->port.PIN0=val; break;
 538:	fc 01       	movw	r30, r24
 53a:	22 81       	ldd	r18, Z+2	; 0x02
 53c:	40 fb       	bst	r20, 0
 53e:	20 f9       	bld	r18, 0
 540:	22 83       	std	Z+2, r18	; 0x02
 542:	29 c0       	rjmp	.+82     	; 0x596 <DIO_voidSetPinValue+0x76>
		case 1: ptr->port.PIN1=val; break;
 544:	fc 01       	movw	r30, r24
 546:	22 81       	ldd	r18, Z+2	; 0x02
 548:	40 fb       	bst	r20, 0
 54a:	21 f9       	bld	r18, 1
 54c:	22 83       	std	Z+2, r18	; 0x02
 54e:	23 c0       	rjmp	.+70     	; 0x596 <DIO_voidSetPinValue+0x76>
		case 2: ptr->port.PIN2=val; break;
 550:	fc 01       	movw	r30, r24
 552:	22 81       	ldd	r18, Z+2	; 0x02
 554:	40 fb       	bst	r20, 0
 556:	22 f9       	bld	r18, 2
 558:	22 83       	std	Z+2, r18	; 0x02
 55a:	1d c0       	rjmp	.+58     	; 0x596 <DIO_voidSetPinValue+0x76>
		case 3: ptr->port.PIN3=val; break;
 55c:	fc 01       	movw	r30, r24
 55e:	22 81       	ldd	r18, Z+2	; 0x02
 560:	40 fb       	bst	r20, 0
 562:	23 f9       	bld	r18, 3
 564:	22 83       	std	Z+2, r18	; 0x02
 566:	17 c0       	rjmp	.+46     	; 0x596 <DIO_voidSetPinValue+0x76>
		case 4: ptr->port.PIN4=val; break;
 568:	fc 01       	movw	r30, r24
 56a:	22 81       	ldd	r18, Z+2	; 0x02
 56c:	40 fb       	bst	r20, 0
 56e:	24 f9       	bld	r18, 4
 570:	22 83       	std	Z+2, r18	; 0x02
 572:	11 c0       	rjmp	.+34     	; 0x596 <DIO_voidSetPinValue+0x76>
		case 5: ptr->port.PIN5=val; break;
 574:	fc 01       	movw	r30, r24
 576:	22 81       	ldd	r18, Z+2	; 0x02
 578:	40 fb       	bst	r20, 0
 57a:	25 f9       	bld	r18, 5
 57c:	22 83       	std	Z+2, r18	; 0x02
 57e:	0b c0       	rjmp	.+22     	; 0x596 <DIO_voidSetPinValue+0x76>
		case 6: ptr->port.PIN6=val; break;
 580:	fc 01       	movw	r30, r24
 582:	22 81       	ldd	r18, Z+2	; 0x02
 584:	40 fb       	bst	r20, 0
 586:	26 f9       	bld	r18, 6
 588:	22 83       	std	Z+2, r18	; 0x02
 58a:	05 c0       	rjmp	.+10     	; 0x596 <DIO_voidSetPinValue+0x76>
		case 7: ptr->port.PIN7=val; break;
 58c:	fc 01       	movw	r30, r24
 58e:	22 81       	ldd	r18, Z+2	; 0x02
 590:	40 fb       	bst	r20, 0
 592:	27 f9       	bld	r18, 7
 594:	22 83       	std	Z+2, r18	; 0x02
	}
}
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	08 95       	ret

0000059c <__vector_1>:
	}
	
}

ISR(INT0_vect)
{
 59c:	1f 92       	push	r1
 59e:	0f 92       	push	r0
 5a0:	0f b6       	in	r0, 0x3f	; 63
 5a2:	0f 92       	push	r0
 5a4:	11 24       	eor	r1, r1
 5a6:	2f 93       	push	r18
 5a8:	3f 93       	push	r19
 5aa:	4f 93       	push	r20
 5ac:	5f 93       	push	r21
 5ae:	6f 93       	push	r22
 5b0:	7f 93       	push	r23
 5b2:	8f 93       	push	r24
 5b4:	9f 93       	push	r25
 5b6:	af 93       	push	r26
 5b8:	bf 93       	push	r27
 5ba:	ef 93       	push	r30
 5bc:	ff 93       	push	r31
	if (p_NTI[0]!=0)
 5be:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <p_NTI>
 5c2:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <p_NTI+0x1>
 5c6:	30 97       	sbiw	r30, 0x00	; 0
 5c8:	09 f0       	breq	.+2      	; 0x5cc <__vector_1+0x30>
	{
		p_NTI[0]();
 5ca:	09 95       	icall
	}
	return;
}
 5cc:	ff 91       	pop	r31
 5ce:	ef 91       	pop	r30
 5d0:	bf 91       	pop	r27
 5d2:	af 91       	pop	r26
 5d4:	9f 91       	pop	r25
 5d6:	8f 91       	pop	r24
 5d8:	7f 91       	pop	r23
 5da:	6f 91       	pop	r22
 5dc:	5f 91       	pop	r21
 5de:	4f 91       	pop	r20
 5e0:	3f 91       	pop	r19
 5e2:	2f 91       	pop	r18
 5e4:	0f 90       	pop	r0
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	0f 90       	pop	r0
 5ea:	1f 90       	pop	r1
 5ec:	18 95       	reti

000005ee <__vector_2>:

ISR(INT1_vect)
{
 5ee:	1f 92       	push	r1
 5f0:	0f 92       	push	r0
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	0f 92       	push	r0
 5f6:	11 24       	eor	r1, r1
 5f8:	2f 93       	push	r18
 5fa:	3f 93       	push	r19
 5fc:	4f 93       	push	r20
 5fe:	5f 93       	push	r21
 600:	6f 93       	push	r22
 602:	7f 93       	push	r23
 604:	8f 93       	push	r24
 606:	9f 93       	push	r25
 608:	af 93       	push	r26
 60a:	bf 93       	push	r27
 60c:	ef 93       	push	r30
 60e:	ff 93       	push	r31
	if (p_NTI[1]!=0)
 610:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <p_NTI+0x2>
 614:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <p_NTI+0x3>
 618:	30 97       	sbiw	r30, 0x00	; 0
 61a:	09 f0       	breq	.+2      	; 0x61e <__vector_2+0x30>
	{
		p_NTI[1]();
 61c:	09 95       	icall
	}
	return;
}
 61e:	ff 91       	pop	r31
 620:	ef 91       	pop	r30
 622:	bf 91       	pop	r27
 624:	af 91       	pop	r26
 626:	9f 91       	pop	r25
 628:	8f 91       	pop	r24
 62a:	7f 91       	pop	r23
 62c:	6f 91       	pop	r22
 62e:	5f 91       	pop	r21
 630:	4f 91       	pop	r20
 632:	3f 91       	pop	r19
 634:	2f 91       	pop	r18
 636:	0f 90       	pop	r0
 638:	0f be       	out	0x3f, r0	; 63
 63a:	0f 90       	pop	r0
 63c:	1f 90       	pop	r1
 63e:	18 95       	reti

00000640 <__vector_3>:

ISR(INT2_vect)
{
 640:	1f 92       	push	r1
 642:	0f 92       	push	r0
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	0f 92       	push	r0
 648:	11 24       	eor	r1, r1
 64a:	2f 93       	push	r18
 64c:	3f 93       	push	r19
 64e:	4f 93       	push	r20
 650:	5f 93       	push	r21
 652:	6f 93       	push	r22
 654:	7f 93       	push	r23
 656:	8f 93       	push	r24
 658:	9f 93       	push	r25
 65a:	af 93       	push	r26
 65c:	bf 93       	push	r27
 65e:	ef 93       	push	r30
 660:	ff 93       	push	r31
	if (p_NTI[2]!=0) 
 662:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <p_NTI+0x4>
 666:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <p_NTI+0x5>
 66a:	30 97       	sbiw	r30, 0x00	; 0
 66c:	09 f0       	breq	.+2      	; 0x670 <__vector_3+0x30>
	{
		p_NTI[2]();
 66e:	09 95       	icall
	}
	return;
 670:	ff 91       	pop	r31
 672:	ef 91       	pop	r30
 674:	bf 91       	pop	r27
 676:	af 91       	pop	r26
 678:	9f 91       	pop	r25
 67a:	8f 91       	pop	r24
 67c:	7f 91       	pop	r23
 67e:	6f 91       	pop	r22
 680:	5f 91       	pop	r21
 682:	4f 91       	pop	r20
 684:	3f 91       	pop	r19
 686:	2f 91       	pop	r18
 688:	0f 90       	pop	r0
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	0f 90       	pop	r0
 68e:	1f 90       	pop	r1
 690:	18 95       	reti

00000692 <__vector_11>:
	u32 t_total=ton+t_off;
	u8 duty =((u32)ton *100) /(u32)t_total;

	return duty;
	
}
 692:	1f 92       	push	r1
 694:	0f 92       	push	r0
 696:	0f b6       	in	r0, 0x3f	; 63
 698:	0f 92       	push	r0
 69a:	11 24       	eor	r1, r1
 69c:	2f 93       	push	r18
 69e:	3f 93       	push	r19
 6a0:	4f 93       	push	r20
 6a2:	5f 93       	push	r21
 6a4:	6f 93       	push	r22
 6a6:	7f 93       	push	r23
 6a8:	8f 93       	push	r24
 6aa:	9f 93       	push	r25
 6ac:	af 93       	push	r26
 6ae:	bf 93       	push	r27
 6b0:	ef 93       	push	r30
 6b2:	ff 93       	push	r31
 6b4:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <OVF_ptr>
 6b8:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <OVF_ptr+0x1>
 6bc:	30 97       	sbiw	r30, 0x00	; 0
 6be:	09 f0       	breq	.+2      	; 0x6c2 <__vector_11+0x30>
 6c0:	09 95       	icall
 6c2:	ff 91       	pop	r31
 6c4:	ef 91       	pop	r30
 6c6:	bf 91       	pop	r27
 6c8:	af 91       	pop	r26
 6ca:	9f 91       	pop	r25
 6cc:	8f 91       	pop	r24
 6ce:	7f 91       	pop	r23
 6d0:	6f 91       	pop	r22
 6d2:	5f 91       	pop	r21
 6d4:	4f 91       	pop	r20
 6d6:	3f 91       	pop	r19
 6d8:	2f 91       	pop	r18
 6da:	0f 90       	pop	r0
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	0f 90       	pop	r0
 6e0:	1f 90       	pop	r1
 6e2:	18 95       	reti

000006e4 <__vector_10>:
 6e4:	1f 92       	push	r1
 6e6:	0f 92       	push	r0
 6e8:	0f b6       	in	r0, 0x3f	; 63
 6ea:	0f 92       	push	r0
 6ec:	11 24       	eor	r1, r1
 6ee:	2f 93       	push	r18
 6f0:	3f 93       	push	r19
 6f2:	4f 93       	push	r20
 6f4:	5f 93       	push	r21
 6f6:	6f 93       	push	r22
 6f8:	7f 93       	push	r23
 6fa:	8f 93       	push	r24
 6fc:	9f 93       	push	r25
 6fe:	af 93       	push	r26
 700:	bf 93       	push	r27
 702:	ef 93       	push	r30
 704:	ff 93       	push	r31
 706:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <CM_ptr>
 70a:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <CM_ptr+0x1>
 70e:	30 97       	sbiw	r30, 0x00	; 0
 710:	09 f0       	breq	.+2      	; 0x714 <__vector_10+0x30>
 712:	09 95       	icall
 714:	ff 91       	pop	r31
 716:	ef 91       	pop	r30
 718:	bf 91       	pop	r27
 71a:	af 91       	pop	r26
 71c:	9f 91       	pop	r25
 71e:	8f 91       	pop	r24
 720:	7f 91       	pop	r23
 722:	6f 91       	pop	r22
 724:	5f 91       	pop	r21
 726:	4f 91       	pop	r20
 728:	3f 91       	pop	r19
 72a:	2f 91       	pop	r18
 72c:	0f 90       	pop	r0
 72e:	0f be       	out	0x3f, r0	; 63
 730:	0f 90       	pop	r0
 732:	1f 90       	pop	r1
 734:	18 95       	reti

00000736 <__vector_9>:
{
	Timer1_ICU_Fptr=LocalFptr;
}

ISR(TIMER1_OVF_vect)
{
 736:	1f 92       	push	r1
 738:	0f 92       	push	r0
 73a:	0f b6       	in	r0, 0x3f	; 63
 73c:	0f 92       	push	r0
 73e:	11 24       	eor	r1, r1
 740:	2f 93       	push	r18
 742:	3f 93       	push	r19
 744:	4f 93       	push	r20
 746:	5f 93       	push	r21
 748:	6f 93       	push	r22
 74a:	7f 93       	push	r23
 74c:	8f 93       	push	r24
 74e:	9f 93       	push	r25
 750:	af 93       	push	r26
 752:	bf 93       	push	r27
 754:	ef 93       	push	r30
 756:	ff 93       	push	r31
	if(Timer1_OVF_Fptr!=0)
 758:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <Timer1_OVF_Fptr>
 75c:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <Timer1_OVF_Fptr+0x1>
 760:	30 97       	sbiw	r30, 0x00	; 0
 762:	09 f0       	breq	.+2      	; 0x766 <__vector_9+0x30>
	{
		Timer1_OVF_Fptr();
 764:	09 95       	icall
	}
}
 766:	ff 91       	pop	r31
 768:	ef 91       	pop	r30
 76a:	bf 91       	pop	r27
 76c:	af 91       	pop	r26
 76e:	9f 91       	pop	r25
 770:	8f 91       	pop	r24
 772:	7f 91       	pop	r23
 774:	6f 91       	pop	r22
 776:	5f 91       	pop	r21
 778:	4f 91       	pop	r20
 77a:	3f 91       	pop	r19
 77c:	2f 91       	pop	r18
 77e:	0f 90       	pop	r0
 780:	0f be       	out	0x3f, r0	; 63
 782:	0f 90       	pop	r0
 784:	1f 90       	pop	r1
 786:	18 95       	reti

00000788 <__vector_7>:
ISR(TIMER1_OCA_vect)
{
 788:	1f 92       	push	r1
 78a:	0f 92       	push	r0
 78c:	0f b6       	in	r0, 0x3f	; 63
 78e:	0f 92       	push	r0
 790:	11 24       	eor	r1, r1
 792:	2f 93       	push	r18
 794:	3f 93       	push	r19
 796:	4f 93       	push	r20
 798:	5f 93       	push	r21
 79a:	6f 93       	push	r22
 79c:	7f 93       	push	r23
 79e:	8f 93       	push	r24
 7a0:	9f 93       	push	r25
 7a2:	af 93       	push	r26
 7a4:	bf 93       	push	r27
 7a6:	ef 93       	push	r30
 7a8:	ff 93       	push	r31
	if(Timer1_OCA_Fptr!=0)
 7aa:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <Timer1_OCA_Fptr>
 7ae:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <Timer1_OCA_Fptr+0x1>
 7b2:	30 97       	sbiw	r30, 0x00	; 0
 7b4:	09 f0       	breq	.+2      	; 0x7b8 <__vector_7+0x30>
	{
		Timer1_OCA_Fptr();
 7b6:	09 95       	icall
	}
}
 7b8:	ff 91       	pop	r31
 7ba:	ef 91       	pop	r30
 7bc:	bf 91       	pop	r27
 7be:	af 91       	pop	r26
 7c0:	9f 91       	pop	r25
 7c2:	8f 91       	pop	r24
 7c4:	7f 91       	pop	r23
 7c6:	6f 91       	pop	r22
 7c8:	5f 91       	pop	r21
 7ca:	4f 91       	pop	r20
 7cc:	3f 91       	pop	r19
 7ce:	2f 91       	pop	r18
 7d0:	0f 90       	pop	r0
 7d2:	0f be       	out	0x3f, r0	; 63
 7d4:	0f 90       	pop	r0
 7d6:	1f 90       	pop	r1
 7d8:	18 95       	reti

000007da <__vector_8>:
ISR(TIMER1_OCB_vect)
{
 7da:	1f 92       	push	r1
 7dc:	0f 92       	push	r0
 7de:	0f b6       	in	r0, 0x3f	; 63
 7e0:	0f 92       	push	r0
 7e2:	11 24       	eor	r1, r1
 7e4:	2f 93       	push	r18
 7e6:	3f 93       	push	r19
 7e8:	4f 93       	push	r20
 7ea:	5f 93       	push	r21
 7ec:	6f 93       	push	r22
 7ee:	7f 93       	push	r23
 7f0:	8f 93       	push	r24
 7f2:	9f 93       	push	r25
 7f4:	af 93       	push	r26
 7f6:	bf 93       	push	r27
 7f8:	ef 93       	push	r30
 7fa:	ff 93       	push	r31
	if(Timer1_OCB_Fptr!=0)
 7fc:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <Timer1_OCB_Fptr>
 800:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <Timer1_OCB_Fptr+0x1>
 804:	30 97       	sbiw	r30, 0x00	; 0
 806:	09 f0       	breq	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	{
		Timer1_OCB_Fptr();
 808:	09 95       	icall
	}
}
 80a:	ff 91       	pop	r31
 80c:	ef 91       	pop	r30
 80e:	bf 91       	pop	r27
 810:	af 91       	pop	r26
 812:	9f 91       	pop	r25
 814:	8f 91       	pop	r24
 816:	7f 91       	pop	r23
 818:	6f 91       	pop	r22
 81a:	5f 91       	pop	r21
 81c:	4f 91       	pop	r20
 81e:	3f 91       	pop	r19
 820:	2f 91       	pop	r18
 822:	0f 90       	pop	r0
 824:	0f be       	out	0x3f, r0	; 63
 826:	0f 90       	pop	r0
 828:	1f 90       	pop	r1
 82a:	18 95       	reti

0000082c <__vector_6>:
ISR(TIMER1_ICU_vect)
{
 82c:	1f 92       	push	r1
 82e:	0f 92       	push	r0
 830:	0f b6       	in	r0, 0x3f	; 63
 832:	0f 92       	push	r0
 834:	11 24       	eor	r1, r1
 836:	2f 93       	push	r18
 838:	3f 93       	push	r19
 83a:	4f 93       	push	r20
 83c:	5f 93       	push	r21
 83e:	6f 93       	push	r22
 840:	7f 93       	push	r23
 842:	8f 93       	push	r24
 844:	9f 93       	push	r25
 846:	af 93       	push	r26
 848:	bf 93       	push	r27
 84a:	ef 93       	push	r30
 84c:	ff 93       	push	r31
	if(Timer1_ICU_Fptr!=0)
 84e:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <Timer1_ICU_Fptr>
 852:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <Timer1_ICU_Fptr+0x1>
 856:	30 97       	sbiw	r30, 0x00	; 0
 858:	09 f0       	breq	.+2      	; 0x85c <__vector_6+0x30>
	{
		Timer1_ICU_Fptr();
 85a:	09 95       	icall
	}
}
 85c:	ff 91       	pop	r31
 85e:	ef 91       	pop	r30
 860:	bf 91       	pop	r27
 862:	af 91       	pop	r26
 864:	9f 91       	pop	r25
 866:	8f 91       	pop	r24
 868:	7f 91       	pop	r23
 86a:	6f 91       	pop	r22
 86c:	5f 91       	pop	r21
 86e:	4f 91       	pop	r20
 870:	3f 91       	pop	r19
 872:	2f 91       	pop	r18
 874:	0f 90       	pop	r0
 876:	0f be       	out	0x3f, r0	; 63
 878:	0f 90       	pop	r0
 87a:	1f 90       	pop	r1
 87c:	18 95       	reti

0000087e <Uart_Init>:
}
void Uart_TX_SetCallBack(void (*LocalFPtr)(void))
{
	if (LocalFPtr!=0)
	{
		Uart_TX_Fptr=LocalFPtr;
 87e:	10 bc       	out	0x20, r1	; 32
 880:	80 e1       	ldi	r24, 0x10	; 16
 882:	89 b9       	out	0x09, r24	; 9
 884:	88 e1       	ldi	r24, 0x18	; 24
 886:	8a b9       	out	0x0a, r24	; 10
 888:	8e ee       	ldi	r24, 0xEE	; 238
 88a:	80 bd       	out	0x20, r24	; 32
 88c:	08 95       	ret

0000088e <Uart_SendData>:
 88e:	5d 9b       	sbis	0x0b, 5	; 11
 890:	fe cf       	rjmp	.-4      	; 0x88e <Uart_SendData>
 892:	8c b9       	out	0x0c, r24	; 12
 894:	08 95       	ret

00000896 <Uart_RecieveData>:
 896:	5f 9b       	sbis	0x0b, 7	; 11
 898:	fe cf       	rjmp	.-4      	; 0x896 <Uart_RecieveData>
 89a:	2c b1       	in	r18, 0x0c	; 12
 89c:	fc 01       	movw	r30, r24
 89e:	20 83       	st	Z, r18
 8a0:	08 95       	ret

000008a2 <__vector_13>:
	}
}
ISR(UART_RX_vect)
{
 8a2:	1f 92       	push	r1
 8a4:	0f 92       	push	r0
 8a6:	0f b6       	in	r0, 0x3f	; 63
 8a8:	0f 92       	push	r0
 8aa:	11 24       	eor	r1, r1
 8ac:	2f 93       	push	r18
 8ae:	3f 93       	push	r19
 8b0:	4f 93       	push	r20
 8b2:	5f 93       	push	r21
 8b4:	6f 93       	push	r22
 8b6:	7f 93       	push	r23
 8b8:	8f 93       	push	r24
 8ba:	9f 93       	push	r25
 8bc:	af 93       	push	r26
 8be:	bf 93       	push	r27
 8c0:	ef 93       	push	r30
 8c2:	ff 93       	push	r31
	
	if (Uart_RX_Fptr!=0)
 8c4:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <Uart_RX_Fptr>
 8c8:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <Uart_RX_Fptr+0x1>
 8cc:	30 97       	sbiw	r30, 0x00	; 0
 8ce:	09 f0       	breq	.+2      	; 0x8d2 <__vector_13+0x30>
	{
		Uart_RX_Fptr();
 8d0:	09 95       	icall
	}
}
 8d2:	ff 91       	pop	r31
 8d4:	ef 91       	pop	r30
 8d6:	bf 91       	pop	r27
 8d8:	af 91       	pop	r26
 8da:	9f 91       	pop	r25
 8dc:	8f 91       	pop	r24
 8de:	7f 91       	pop	r23
 8e0:	6f 91       	pop	r22
 8e2:	5f 91       	pop	r21
 8e4:	4f 91       	pop	r20
 8e6:	3f 91       	pop	r19
 8e8:	2f 91       	pop	r18
 8ea:	0f 90       	pop	r0
 8ec:	0f be       	out	0x3f, r0	; 63
 8ee:	0f 90       	pop	r0
 8f0:	1f 90       	pop	r1
 8f2:	18 95       	reti

000008f4 <__vector_15>:
ISR (UART_TX_vect)
{
 8f4:	1f 92       	push	r1
 8f6:	0f 92       	push	r0
 8f8:	0f b6       	in	r0, 0x3f	; 63
 8fa:	0f 92       	push	r0
 8fc:	11 24       	eor	r1, r1
 8fe:	2f 93       	push	r18
 900:	3f 93       	push	r19
 902:	4f 93       	push	r20
 904:	5f 93       	push	r21
 906:	6f 93       	push	r22
 908:	7f 93       	push	r23
 90a:	8f 93       	push	r24
 90c:	9f 93       	push	r25
 90e:	af 93       	push	r26
 910:	bf 93       	push	r27
 912:	ef 93       	push	r30
 914:	ff 93       	push	r31
	if (Uart_TX_Fptr!=0)
 916:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <Uart_TX_Fptr>
 91a:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <Uart_TX_Fptr+0x1>
 91e:	30 97       	sbiw	r30, 0x00	; 0
 920:	09 f0       	breq	.+2      	; 0x924 <__vector_15+0x30>
	{
		Uart_TX_Fptr();
 922:	09 95       	icall
	}
	
 924:	ff 91       	pop	r31
 926:	ef 91       	pop	r30
 928:	bf 91       	pop	r27
 92a:	af 91       	pop	r26
 92c:	9f 91       	pop	r25
 92e:	8f 91       	pop	r24
 930:	7f 91       	pop	r23
 932:	6f 91       	pop	r22
 934:	5f 91       	pop	r21
 936:	4f 91       	pop	r20
 938:	3f 91       	pop	r19
 93a:	2f 91       	pop	r18
 93c:	0f 90       	pop	r0
 93e:	0f be       	out	0x3f, r0	; 63
 940:	0f 90       	pop	r0
 942:	1f 90       	pop	r1
 944:	18 95       	reti

00000946 <__tablejump2__>:
 946:	ee 0f       	add	r30, r30
 948:	ff 1f       	adc	r31, r31
 94a:	05 90       	lpm	r0, Z+
 94c:	f4 91       	lpm	r31, Z
 94e:	e0 2d       	mov	r30, r0
 950:	09 94       	ijmp

00000952 <_exit>:
 952:	f8 94       	cli

00000954 <__stop_program>:
 954:	ff cf       	rjmp	.-2      	; 0x954 <__stop_program>
