
NTI_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000093e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000093e  000009d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007f  00800064  00800064  000009d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000392c  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000136b  00000000  00000000  00004728  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ac6  00000000  00000000  00005a93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000af4  00000000  00000000  0000755c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010c5  00000000  00000000  00008050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f12  00000000  00000000  00009115  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  0000b027  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__vector_1>
   8:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__vector_2>
   c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__vector_3>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 c9 03 	jmp	0x792	; 0x792 <__vector_6>
  1c:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__vector_7>
  20:	0c 94 a0 03 	jmp	0x740	; 0x740 <__vector_8>
  24:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__vector_9>
  28:	0c 94 25 03 	jmp	0x64a	; 0x64a <__vector_10>
  2c:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__vector_11>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 45 04 	jmp	0x88a	; 0x88a <__vector_13>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__vector_15>
  40:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__vector_16>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	0d 02       	muls	r16, r29
  56:	13 02       	muls	r17, r19
  58:	19 02       	muls	r17, r25
  5a:	1f 02       	muls	r17, r31
  5c:	25 02       	muls	r18, r21
  5e:	2b 02       	muls	r18, r27
  60:	31 02       	muls	r19, r17
  62:	37 02       	muls	r19, r23
  64:	4b 02       	muls	r20, r27
  66:	51 02       	muls	r21, r17
  68:	57 02       	muls	r21, r23
  6a:	5d 02       	muls	r21, r29
  6c:	63 02       	muls	r22, r19
  6e:	69 02       	muls	r22, r25
  70:	6f 02       	muls	r22, r31
  72:	75 02       	muls	r23, r21

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	ee e3       	ldi	r30, 0x3E	; 62
  88:	f9 e0       	ldi	r31, 0x09	; 9
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a4 36       	cpi	r26, 0x64	; 100
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	a4 e6       	ldi	r26, 0x64	; 100
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a3 3e       	cpi	r26, 0xE3	; 227
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 ad 01 	call	0x35a	; 0x35a <main>
  aa:	0c 94 9d 04 	jmp	0x93a	; 0x93a <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <keypad_init>:
{'M','N','O','S'}
};
void keypad_init (void)
{
	//set output pins rows
	DIO_voidSetPinDirection(PORT_OUT,FIRST_OUTPUT,OUTPUT);
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	64 e0       	ldi	r22, 0x04	; 4
  b6:	86 e3       	ldi	r24, 0x36	; 54
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_OUT,SECOND_OUTPUT,OUTPUT);
  be:	41 e0       	ldi	r20, 0x01	; 1
  c0:	65 e0       	ldi	r22, 0x05	; 5
  c2:	86 e3       	ldi	r24, 0x36	; 54
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_OUT,THIRD_OUTPUT,OUTPUT);
  ca:	41 e0       	ldi	r20, 0x01	; 1
  cc:	66 e0       	ldi	r22, 0x06	; 6
  ce:	86 e3       	ldi	r24, 0x36	; 54
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_OUT,FORTH_OUTPUT,OUTPUT);
  d6:	41 e0       	ldi	r20, 0x01	; 1
  d8:	67 e0       	ldi	r22, 0x07	; 7
  da:	86 e3       	ldi	r24, 0x36	; 54
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	//set input pins cols
	DIO_voidSetPinDirection(PORT_IN,FIRST_INPUT,INPUT);
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	62 e0       	ldi	r22, 0x02	; 2
  e6:	80 e3       	ldi	r24, 0x30	; 48
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_IN,SECOND_INPUT,INPUT);
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	63 e0       	ldi	r22, 0x03	; 3
  f2:	80 e3       	ldi	r24, 0x30	; 48
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_IN,THIRD_INPUT,INPUT);
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	64 e0       	ldi	r22, 0x04	; 4
  fe:	80 e3       	ldi	r24, 0x30	; 48
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_IN,FORTH_INPUT,INPUT);
 106:	40 e0       	ldi	r20, 0x00	; 0
 108:	65 e0       	ldi	r22, 0x05	; 5
 10a:	80 e3       	ldi	r24, 0x30	; 48
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	//set output as high
	DIO_voidSetPinValue(PORT_OUT,FIRST_OUTPUT,HIGH);
 112:	41 e0       	ldi	r20, 0x01	; 1
 114:	64 e0       	ldi	r22, 0x04	; 4
 116:	86 e3       	ldi	r24, 0x36	; 54
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_OUT,SECOND_OUTPUT,HIGH);
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	65 e0       	ldi	r22, 0x05	; 5
 122:	86 e3       	ldi	r24, 0x36	; 54
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_OUT,SECOND_OUTPUT,HIGH);
 12a:	41 e0       	ldi	r20, 0x01	; 1
 12c:	65 e0       	ldi	r22, 0x05	; 5
 12e:	86 e3       	ldi	r24, 0x36	; 54
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_OUT,SECOND_OUTPUT,HIGH);
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	65 e0       	ldi	r22, 0x05	; 5
 13a:	86 e3       	ldi	r24, 0x36	; 54
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_voidSetPinValue>
 142:	08 95       	ret

00000144 <H_LCD_void_latchByte>:
void H_LCD_void_sendData(u8 copy_u8data )
{
	DIO_voidSetPinValue(RS_PORT,RS,HIGH);
	H_LCD_void_latchByte(copy_u8data);
	_delay_ms(1);
}
 144:	df 92       	push	r13
 146:	ef 92       	push	r14
 148:	ff 92       	push	r15
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	d8 2e       	mov	r13, r24
 154:	e1 2c       	mov	r14, r1
 156:	f1 2c       	mov	r15, r1
 158:	07 e0       	ldi	r16, 0x07	; 7
 15a:	10 e0       	ldi	r17, 0x00	; 0
 15c:	35 c0       	rjmp	.+106    	; 0x1c8 <H_LCD_void_latchByte+0x84>
 15e:	4d 2d       	mov	r20, r13
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	00 2e       	mov	r0, r16
 164:	02 c0       	rjmp	.+4      	; 0x16a <H_LCD_void_latchByte+0x26>
 166:	55 95       	asr	r21
 168:	47 95       	ror	r20
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <H_LCD_void_latchByte+0x22>
 16e:	41 70       	andi	r20, 0x01	; 1
 170:	fe 01       	movw	r30, r28
 172:	e0 5a       	subi	r30, 0xA0	; 160
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	60 81       	ld	r22, Z
 178:	86 e3       	ldi	r24, 0x36	; 54
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_voidSetPinValue>
 180:	01 50       	subi	r16, 0x01	; 1
 182:	11 09       	sbc	r17, r1
 184:	21 96       	adiw	r28, 0x01	; 1
 186:	02 c0       	rjmp	.+4      	; 0x18c <H_LCD_void_latchByte+0x48>
 188:	c0 e0       	ldi	r28, 0x00	; 0
 18a:	d0 e0       	ldi	r29, 0x00	; 0
 18c:	c4 30       	cpi	r28, 0x04	; 4
 18e:	d1 05       	cpc	r29, r1
 190:	34 f3       	brlt	.-52     	; 0x15e <H_LCD_void_latchByte+0x1a>
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	62 e0       	ldi	r22, 0x02	; 2
 196:	89 e3       	ldi	r24, 0x39	; 57
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_voidSetPinValue>
 19e:	8f e0       	ldi	r24, 0x0F	; 15
 1a0:	97 e2       	ldi	r25, 0x27	; 39
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <H_LCD_void_latchByte+0x5e>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <H_LCD_void_latchByte+0x64>
 1a8:	00 00       	nop
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	62 e0       	ldi	r22, 0x02	; 2
 1ae:	89 e3       	ldi	r24, 0x39	; 57
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_voidSetPinValue>
 1b6:	8f e0       	ldi	r24, 0x0F	; 15
 1b8:	97 e2       	ldi	r25, 0x27	; 39
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <H_LCD_void_latchByte+0x76>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <H_LCD_void_latchByte+0x7c>
 1c0:	00 00       	nop
 1c2:	9f ef       	ldi	r25, 0xFF	; 255
 1c4:	e9 1a       	sub	r14, r25
 1c6:	f9 0a       	sbc	r15, r25
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	e8 16       	cp	r14, r24
 1cc:	f1 04       	cpc	r15, r1
 1ce:	e4 f2       	brlt	.-72     	; 0x188 <H_LCD_void_latchByte+0x44>
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	ff 90       	pop	r15
 1da:	ef 90       	pop	r14
 1dc:	df 90       	pop	r13
 1de:	08 95       	ret

000001e0 <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8command)
{
 1e0:	cf 93       	push	r28
 1e2:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue(RS_PORT,RS,LOW);
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	63 e0       	ldi	r22, 0x03	; 3
 1e8:	89 e3       	ldi	r24, 0x39	; 57
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_voidSetPinValue>
	H_LCD_void_latchByte(copy_u8command);
 1f0:	8c 2f       	mov	r24, r28
 1f2:	0e 94 a2 00 	call	0x144	; 0x144 <H_LCD_void_latchByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	8f ec       	ldi	r24, 0xCF	; 207
 1f8:	97 e0       	ldi	r25, 0x07	; 7
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <H_LCD_void_sendCommand+0x1a>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <H_LCD_void_sendCommand+0x20>
 200:	00 00       	nop
	_delay_ms(1);
}
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <H_LCD_void_Init>:

u8 LCD_pins[4]={D7,D6,D5,D4};
	
void H_LCD_void_Init(void)
{
	DIO_voidSetPinDirection(RS_PORT,RS,OUTPUT);
 206:	41 e0       	ldi	r20, 0x01	; 1
 208:	63 e0       	ldi	r22, 0x03	; 3
 20a:	89 e3       	ldi	r24, 0x39	; 57
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(EN_PORT,EN,OUTPUT);
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	62 e0       	ldi	r22, 0x02	; 2
 216:	89 e3       	ldi	r24, 0x39	; 57
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PINS_PORT,D4,OUTPUT);
 21e:	41 e0       	ldi	r20, 0x01	; 1
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	86 e3       	ldi	r24, 0x36	; 54
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PINS_PORT,D5,OUTPUT);
 22a:	41 e0       	ldi	r20, 0x01	; 1
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	86 e3       	ldi	r24, 0x36	; 54
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PINS_PORT,D6,OUTPUT);
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	62 e0       	ldi	r22, 0x02	; 2
 23a:	86 e3       	ldi	r24, 0x36	; 54
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PINS_PORT,D7,OUTPUT);
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	64 e0       	ldi	r22, 0x04	; 4
 246:	86 e3       	ldi	r24, 0x36	; 54
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
 24e:	2f e7       	ldi	r18, 0x7F	; 127
 250:	88 e3       	ldi	r24, 0x38	; 56
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <H_LCD_void_Init+0x4e>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <H_LCD_void_Init+0x58>
 25e:	00 00       	nop
	
	_delay_ms(50);
   DIO_voidSetPinValue(RS_PORT,RS,LOW);
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	63 e0       	ldi	r22, 0x03	; 3
 264:	89 e3       	ldi	r24, 0x39	; 57
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_voidSetPinValue>
	H_LCD_void_sendCommand(0x02);
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x02);
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x08);
 278:	88 e0       	ldi	r24, 0x08	; 8
 27a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <H_LCD_void_sendCommand>
 27e:	8f ec       	ldi	r24, 0xCF	; 207
 280:	97 e0       	ldi	r25, 0x07	; 7
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <H_LCD_void_Init+0x7c>
 286:	00 c0       	rjmp	.+0      	; 0x288 <H_LCD_void_Init+0x82>
 288:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(0x00);
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x0C);//display on off 0E
 290:	8c e0       	ldi	r24, 0x0C	; 12
 292:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <H_LCD_void_sendCommand>
 296:	8f ec       	ldi	r24, 0xCF	; 207
 298:	97 e0       	ldi	r25, 0x07	; 7
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <H_LCD_void_Init+0x94>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <H_LCD_void_Init+0x9a>
 2a0:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(0x00);
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x01);
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <H_LCD_void_sendCommand>
 2ae:	8f e6       	ldi	r24, 0x6F	; 111
 2b0:	97 e1       	ldi	r25, 0x17	; 23
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <H_LCD_void_Init+0xac>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <H_LCD_void_Init+0xb2>
 2b8:	00 00       	nop
	_delay_ms(3);
	H_LCD_void_sendCommand(0x00);
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x06);
 2c0:	86 e0       	ldi	r24, 0x06	; 6
 2c2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <H_LCD_void_sendCommand>
 2c6:	08 95       	ret

000002c8 <sevseg_init>:
#include <util/delay.h>
	
void sevseg_init(void)
{
	//set com as output for the four 7seg
	DIO_voidSetPinDirection(ptrA,2,1);
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	89 e3       	ldi	r24, 0x39	; 57
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrA,3,1);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	63 e0       	ldi	r22, 0x03	; 3
 2d8:	89 e3       	ldi	r24, 0x39	; 57
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,5,1);
 2e0:	41 e0       	ldi	r20, 0x01	; 1
 2e2:	65 e0       	ldi	r22, 0x05	; 5
 2e4:	86 e3       	ldi	r24, 0x36	; 54
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,6,1);
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	66 e0       	ldi	r22, 0x06	; 6
 2f0:	86 e3       	ldi	r24, 0x36	; 54
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	
    //enable only one 7seg
	DIO_voidSetPinValue(ptrA,2,1);
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	62 e0       	ldi	r22, 0x02	; 2
 2fc:	89 e3       	ldi	r24, 0x39	; 57
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ptrA,3,0);
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	63 e0       	ldi	r22, 0x03	; 3
 308:	89 e3       	ldi	r24, 0x39	; 57
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ptrB,5,1);
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	65 e0       	ldi	r22, 0x05	; 5
 314:	86 e3       	ldi	r24, 0x36	; 54
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ptrB,6,1);
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	66 e0       	ldi	r22, 0x06	; 6
 320:	86 e3       	ldi	r24, 0x36	; 54
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_voidSetPinValue>
	
	//set decoder pins as output
	DIO_voidSetPinDirection(ptrB,0,1);
 328:	41 e0       	ldi	r20, 0x01	; 1
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	86 e3       	ldi	r24, 0x36	; 54
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,1,1);
 334:	41 e0       	ldi	r20, 0x01	; 1
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	86 e3       	ldi	r24, 0x36	; 54
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,2,1);
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	86 e3       	ldi	r24, 0x36	; 54
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,4,1);
 34c:	41 e0       	ldi	r20, 0x01	; 1
 34e:	64 e0       	ldi	r22, 0x04	; 4
 350:	86 e3       	ldi	r24, 0x36	; 54
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
 358:	08 95       	ret

0000035a <main>:
	SET_BIT(ADCSRA,ADSC);
	
}

int main(void)
{
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
 362:	2a 97       	sbiw	r28, 0x0a	; 10
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	f8 94       	cli
 368:	de bf       	out	0x3e, r29	; 62
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	cd bf       	out	0x3d, r28	; 61
	H_LCD_void_Init();
 36e:	0e 94 03 01 	call	0x206	; 0x206 <H_LCD_void_Init>
	sevseg_init();
 372:	0e 94 64 01 	call	0x2c8	; 0x2c8 <sevseg_init>
	keypad_init();
 376:	0e 94 59 00 	call	0xb2	; 0xb2 <keypad_init>
//	ADC_Init();
//	Timer0_Init(Fast_PWM_Mode,Timer0_Scaler_1024,Set_on_compare);
//	Timer1_Init(Timer1_Normal_Mode,Timer1_Scaler_1024,Timer1_Disconnected,Timer1_Disconnected);
SPI_init_bits init={F_4,SAMPLE,LOW_IDLE,MASTER,MSB,ENABLED,POLLING};
     Uart_Init();
 37a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <Uart_Init>
	 //SPI_init(&init);

	DIO_voidSetPinDirection(ptrA,6,1);
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	66 e0       	ldi	r22, 0x06	; 6
 382:	89 e3       	ldi	r24, 0x39	; 57
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrD,0,0);
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	80 e3       	ldi	r24, 0x30	; 48
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 01 02 	call	0x402	; 0x402 <DIO_voidSetPinDirection>
		0b00011,
		0b10010,
		0b11110
	};
	
	Uart_RX_SetCallBack(ReciveDataNoBlock_callback);
 396:	8e ef       	ldi	r24, 0xFE	; 254
 398:	93 e0       	ldi	r25, 0x03	; 3
 39a:	0e 94 3e 04 	call	0x87c	; 0x87c <Uart_RX_SetCallBack>

Uart_RX_InterruptEnable();
 39e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Uart_RX_InterruptEnable>

	enable();
 3a2:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <enable>
	//sei();
		  u8 data2;
	u8 data[10];
		
while (1) {
	data2=ReciveString_10char(data);
 3a6:	ce 01       	movw	r24, r28
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	0e 94 20 04 	call	0x840	; 0x840 <ReciveString_10char>
 3ae:	fb cf       	rjmp	.-10     	; 0x3a6 <main+0x4c>

000003b0 <__vector_16>:
	
	}

}
ISR(ADC_vect)
{
 3b0:	1f 92       	push	r1
 3b2:	0f 92       	push	r0
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	0f 92       	push	r0
 3b8:	11 24       	eor	r1, r1
 3ba:	2f 93       	push	r18
 3bc:	3f 93       	push	r19
 3be:	4f 93       	push	r20
 3c0:	5f 93       	push	r21
 3c2:	6f 93       	push	r22
 3c4:	7f 93       	push	r23
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	af 93       	push	r26
 3cc:	bf 93       	push	r27
 3ce:	ef 93       	push	r30
 3d0:	ff 93       	push	r31
	if (EXT_INT_ptr!=0)
 3d2:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__data_end>
 3d6:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <__data_end+0x1>
 3da:	30 97       	sbiw	r30, 0x00	; 0
 3dc:	09 f0       	breq	.+2      	; 0x3e0 <__vector_16+0x30>
	{
		EXT_INT_ptr();
 3de:	09 95       	icall
	}
	return;
}
 3e0:	ff 91       	pop	r31
 3e2:	ef 91       	pop	r30
 3e4:	bf 91       	pop	r27
 3e6:	af 91       	pop	r26
 3e8:	9f 91       	pop	r25
 3ea:	8f 91       	pop	r24
 3ec:	7f 91       	pop	r23
 3ee:	6f 91       	pop	r22
 3f0:	5f 91       	pop	r21
 3f2:	4f 91       	pop	r20
 3f4:	3f 91       	pop	r19
 3f6:	2f 91       	pop	r18
 3f8:	0f 90       	pop	r0
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	0f 90       	pop	r0
 3fe:	1f 90       	pop	r1
 400:	18 95       	reti

00000402 <DIO_voidSetPinDirection>:
 */ 

#include "C:\Users\USER\Documents\NTI_AVR\NTI_AVR\MCAL\Dio.h"
#include "C:\Users\USER\Documents\NTI_AVR\NTI_AVR\stdtypes.h"
void DIO_voidSetPinDirection(ports_t *ptr,unsigned char p,Direction dir )
{
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
	switch(p)
 406:	06 2f       	mov	r16, r22
 408:	10 e0       	ldi	r17, 0x00	; 0
 40a:	08 30       	cpi	r16, 0x08	; 8
 40c:	11 05       	cpc	r17, r1
 40e:	a0 f5       	brcc	.+104    	; 0x478 <DIO_voidSetPinDirection+0x76>
 410:	f8 01       	movw	r30, r16
 412:	e6 5d       	subi	r30, 0xD6	; 214
 414:	ff 4f       	sbci	r31, 0xFF	; 255
 416:	0c 94 97 04 	jmp	0x92e	; 0x92e <__tablejump2__>
	{
		case 0: ptr->DDR.PIN0=dir; break;
 41a:	fc 01       	movw	r30, r24
 41c:	21 81       	ldd	r18, Z+1	; 0x01
 41e:	40 fb       	bst	r20, 0
 420:	20 f9       	bld	r18, 0
 422:	21 83       	std	Z+1, r18	; 0x01
 424:	29 c0       	rjmp	.+82     	; 0x478 <DIO_voidSetPinDirection+0x76>
		case 1: ptr->DDR.PIN1=dir; break;
 426:	fc 01       	movw	r30, r24
 428:	21 81       	ldd	r18, Z+1	; 0x01
 42a:	40 fb       	bst	r20, 0
 42c:	21 f9       	bld	r18, 1
 42e:	21 83       	std	Z+1, r18	; 0x01
 430:	23 c0       	rjmp	.+70     	; 0x478 <DIO_voidSetPinDirection+0x76>
		case 2: ptr->DDR.PIN2=dir; break;
 432:	fc 01       	movw	r30, r24
 434:	21 81       	ldd	r18, Z+1	; 0x01
 436:	40 fb       	bst	r20, 0
 438:	22 f9       	bld	r18, 2
 43a:	21 83       	std	Z+1, r18	; 0x01
 43c:	1d c0       	rjmp	.+58     	; 0x478 <DIO_voidSetPinDirection+0x76>
		case 3: ptr->DDR.PIN3=dir; break;
 43e:	fc 01       	movw	r30, r24
 440:	21 81       	ldd	r18, Z+1	; 0x01
 442:	40 fb       	bst	r20, 0
 444:	23 f9       	bld	r18, 3
 446:	21 83       	std	Z+1, r18	; 0x01
 448:	17 c0       	rjmp	.+46     	; 0x478 <DIO_voidSetPinDirection+0x76>
		case 4: ptr->DDR.PIN4=dir; break;
 44a:	fc 01       	movw	r30, r24
 44c:	21 81       	ldd	r18, Z+1	; 0x01
 44e:	40 fb       	bst	r20, 0
 450:	24 f9       	bld	r18, 4
 452:	21 83       	std	Z+1, r18	; 0x01
 454:	11 c0       	rjmp	.+34     	; 0x478 <DIO_voidSetPinDirection+0x76>
		case 5: ptr->DDR.PIN5=dir; break;
 456:	fc 01       	movw	r30, r24
 458:	21 81       	ldd	r18, Z+1	; 0x01
 45a:	40 fb       	bst	r20, 0
 45c:	25 f9       	bld	r18, 5
 45e:	21 83       	std	Z+1, r18	; 0x01
 460:	0b c0       	rjmp	.+22     	; 0x478 <DIO_voidSetPinDirection+0x76>
		case 6: ptr->DDR.PIN6=dir; break;
 462:	fc 01       	movw	r30, r24
 464:	21 81       	ldd	r18, Z+1	; 0x01
 466:	40 fb       	bst	r20, 0
 468:	26 f9       	bld	r18, 6
 46a:	21 83       	std	Z+1, r18	; 0x01
 46c:	05 c0       	rjmp	.+10     	; 0x478 <DIO_voidSetPinDirection+0x76>
		case 7: ptr->DDR.PIN7=dir; break;
 46e:	fc 01       	movw	r30, r24
 470:	21 81       	ldd	r18, Z+1	; 0x01
 472:	40 fb       	bst	r20, 0
 474:	27 f9       	bld	r18, 7
 476:	21 83       	std	Z+1, r18	; 0x01
	}
}
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	08 95       	ret

0000047e <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(ports_t *ptr,unsigned char p,Value val)
{
 47e:	0f 93       	push	r16
 480:	1f 93       	push	r17
	switch(p)
 482:	06 2f       	mov	r16, r22
 484:	10 e0       	ldi	r17, 0x00	; 0
 486:	08 30       	cpi	r16, 0x08	; 8
 488:	11 05       	cpc	r17, r1
 48a:	a0 f5       	brcc	.+104    	; 0x4f4 <DIO_voidSetPinValue+0x76>
 48c:	f8 01       	movw	r30, r16
 48e:	ee 5c       	subi	r30, 0xCE	; 206
 490:	ff 4f       	sbci	r31, 0xFF	; 255
 492:	0c 94 97 04 	jmp	0x92e	; 0x92e <__tablejump2__>
	{
		case 0: ptr->port.PIN0=val; break;
 496:	fc 01       	movw	r30, r24
 498:	22 81       	ldd	r18, Z+2	; 0x02
 49a:	40 fb       	bst	r20, 0
 49c:	20 f9       	bld	r18, 0
 49e:	22 83       	std	Z+2, r18	; 0x02
 4a0:	29 c0       	rjmp	.+82     	; 0x4f4 <DIO_voidSetPinValue+0x76>
		case 1: ptr->port.PIN1=val; break;
 4a2:	fc 01       	movw	r30, r24
 4a4:	22 81       	ldd	r18, Z+2	; 0x02
 4a6:	40 fb       	bst	r20, 0
 4a8:	21 f9       	bld	r18, 1
 4aa:	22 83       	std	Z+2, r18	; 0x02
 4ac:	23 c0       	rjmp	.+70     	; 0x4f4 <DIO_voidSetPinValue+0x76>
		case 2: ptr->port.PIN2=val; break;
 4ae:	fc 01       	movw	r30, r24
 4b0:	22 81       	ldd	r18, Z+2	; 0x02
 4b2:	40 fb       	bst	r20, 0
 4b4:	22 f9       	bld	r18, 2
 4b6:	22 83       	std	Z+2, r18	; 0x02
 4b8:	1d c0       	rjmp	.+58     	; 0x4f4 <DIO_voidSetPinValue+0x76>
		case 3: ptr->port.PIN3=val; break;
 4ba:	fc 01       	movw	r30, r24
 4bc:	22 81       	ldd	r18, Z+2	; 0x02
 4be:	40 fb       	bst	r20, 0
 4c0:	23 f9       	bld	r18, 3
 4c2:	22 83       	std	Z+2, r18	; 0x02
 4c4:	17 c0       	rjmp	.+46     	; 0x4f4 <DIO_voidSetPinValue+0x76>
		case 4: ptr->port.PIN4=val; break;
 4c6:	fc 01       	movw	r30, r24
 4c8:	22 81       	ldd	r18, Z+2	; 0x02
 4ca:	40 fb       	bst	r20, 0
 4cc:	24 f9       	bld	r18, 4
 4ce:	22 83       	std	Z+2, r18	; 0x02
 4d0:	11 c0       	rjmp	.+34     	; 0x4f4 <DIO_voidSetPinValue+0x76>
		case 5: ptr->port.PIN5=val; break;
 4d2:	fc 01       	movw	r30, r24
 4d4:	22 81       	ldd	r18, Z+2	; 0x02
 4d6:	40 fb       	bst	r20, 0
 4d8:	25 f9       	bld	r18, 5
 4da:	22 83       	std	Z+2, r18	; 0x02
 4dc:	0b c0       	rjmp	.+22     	; 0x4f4 <DIO_voidSetPinValue+0x76>
		case 6: ptr->port.PIN6=val; break;
 4de:	fc 01       	movw	r30, r24
 4e0:	22 81       	ldd	r18, Z+2	; 0x02
 4e2:	40 fb       	bst	r20, 0
 4e4:	26 f9       	bld	r18, 6
 4e6:	22 83       	std	Z+2, r18	; 0x02
 4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <DIO_voidSetPinValue+0x76>
		case 7: ptr->port.PIN7=val; break;
 4ea:	fc 01       	movw	r30, r24
 4ec:	22 81       	ldd	r18, Z+2	; 0x02
 4ee:	40 fb       	bst	r20, 0
 4f0:	27 f9       	bld	r18, 7
 4f2:	22 83       	std	Z+2, r18	; 0x02
	}
}
 4f4:	1f 91       	pop	r17
 4f6:	0f 91       	pop	r16
 4f8:	08 95       	ret

000004fa <__vector_1>:
	}
	
}

ISR(INT0_vect)
{
 4fa:	1f 92       	push	r1
 4fc:	0f 92       	push	r0
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	0f 92       	push	r0
 502:	11 24       	eor	r1, r1
 504:	2f 93       	push	r18
 506:	3f 93       	push	r19
 508:	4f 93       	push	r20
 50a:	5f 93       	push	r21
 50c:	6f 93       	push	r22
 50e:	7f 93       	push	r23
 510:	8f 93       	push	r24
 512:	9f 93       	push	r25
 514:	af 93       	push	r26
 516:	bf 93       	push	r27
 518:	ef 93       	push	r30
 51a:	ff 93       	push	r31
	if (p_NTI[0]!=0)
 51c:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <p_NTI>
 520:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <p_NTI+0x1>
 524:	30 97       	sbiw	r30, 0x00	; 0
 526:	09 f0       	breq	.+2      	; 0x52a <__vector_1+0x30>
	{
		p_NTI[0]();
 528:	09 95       	icall
	}
	return;
}
 52a:	ff 91       	pop	r31
 52c:	ef 91       	pop	r30
 52e:	bf 91       	pop	r27
 530:	af 91       	pop	r26
 532:	9f 91       	pop	r25
 534:	8f 91       	pop	r24
 536:	7f 91       	pop	r23
 538:	6f 91       	pop	r22
 53a:	5f 91       	pop	r21
 53c:	4f 91       	pop	r20
 53e:	3f 91       	pop	r19
 540:	2f 91       	pop	r18
 542:	0f 90       	pop	r0
 544:	0f be       	out	0x3f, r0	; 63
 546:	0f 90       	pop	r0
 548:	1f 90       	pop	r1
 54a:	18 95       	reti

0000054c <__vector_2>:

ISR(INT1_vect)
{
 54c:	1f 92       	push	r1
 54e:	0f 92       	push	r0
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	0f 92       	push	r0
 554:	11 24       	eor	r1, r1
 556:	2f 93       	push	r18
 558:	3f 93       	push	r19
 55a:	4f 93       	push	r20
 55c:	5f 93       	push	r21
 55e:	6f 93       	push	r22
 560:	7f 93       	push	r23
 562:	8f 93       	push	r24
 564:	9f 93       	push	r25
 566:	af 93       	push	r26
 568:	bf 93       	push	r27
 56a:	ef 93       	push	r30
 56c:	ff 93       	push	r31
	if (p_NTI[1]!=0)
 56e:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <p_NTI+0x2>
 572:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <p_NTI+0x3>
 576:	30 97       	sbiw	r30, 0x00	; 0
 578:	09 f0       	breq	.+2      	; 0x57c <__vector_2+0x30>
	{
		p_NTI[1]();
 57a:	09 95       	icall
	}
	return;
}
 57c:	ff 91       	pop	r31
 57e:	ef 91       	pop	r30
 580:	bf 91       	pop	r27
 582:	af 91       	pop	r26
 584:	9f 91       	pop	r25
 586:	8f 91       	pop	r24
 588:	7f 91       	pop	r23
 58a:	6f 91       	pop	r22
 58c:	5f 91       	pop	r21
 58e:	4f 91       	pop	r20
 590:	3f 91       	pop	r19
 592:	2f 91       	pop	r18
 594:	0f 90       	pop	r0
 596:	0f be       	out	0x3f, r0	; 63
 598:	0f 90       	pop	r0
 59a:	1f 90       	pop	r1
 59c:	18 95       	reti

0000059e <__vector_3>:

ISR(INT2_vect)
{
 59e:	1f 92       	push	r1
 5a0:	0f 92       	push	r0
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	0f 92       	push	r0
 5a6:	11 24       	eor	r1, r1
 5a8:	2f 93       	push	r18
 5aa:	3f 93       	push	r19
 5ac:	4f 93       	push	r20
 5ae:	5f 93       	push	r21
 5b0:	6f 93       	push	r22
 5b2:	7f 93       	push	r23
 5b4:	8f 93       	push	r24
 5b6:	9f 93       	push	r25
 5b8:	af 93       	push	r26
 5ba:	bf 93       	push	r27
 5bc:	ef 93       	push	r30
 5be:	ff 93       	push	r31
	if (p_NTI[2]!=0) 
 5c0:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <p_NTI+0x4>
 5c4:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <p_NTI+0x5>
 5c8:	30 97       	sbiw	r30, 0x00	; 0
 5ca:	09 f0       	breq	.+2      	; 0x5ce <__vector_3+0x30>
	{
		p_NTI[2]();
 5cc:	09 95       	icall
	}
	return;
 5ce:	ff 91       	pop	r31
 5d0:	ef 91       	pop	r30
 5d2:	bf 91       	pop	r27
 5d4:	af 91       	pop	r26
 5d6:	9f 91       	pop	r25
 5d8:	8f 91       	pop	r24
 5da:	7f 91       	pop	r23
 5dc:	6f 91       	pop	r22
 5de:	5f 91       	pop	r21
 5e0:	4f 91       	pop	r20
 5e2:	3f 91       	pop	r19
 5e4:	2f 91       	pop	r18
 5e6:	0f 90       	pop	r0
 5e8:	0f be       	out	0x3f, r0	; 63
 5ea:	0f 90       	pop	r0
 5ec:	1f 90       	pop	r1
 5ee:	18 95       	reti

000005f0 <enable>:
 */ 
#include "C:\Users\USER\Documents\NTI_AVR\NTI_AVR\MCAL\GIE.h"
#include "C:\Users\USER\Documents\NTI_AVR\NTI_AVR\utils.h"
void enable()
{
	SET_BIT(SREG,GI);
 5f0:	8f b7       	in	r24, 0x3f	; 63
 5f2:	80 68       	ori	r24, 0x80	; 128
 5f4:	8f bf       	out	0x3f, r24	; 63
 5f6:	08 95       	ret

000005f8 <__vector_11>:
	H_LCD_void_sendIntNum(t_total);
	_delay_ms(1000);*/
	u8 duty =(u32)ton *100 /(u32)t_total;
	return duty;
	
}
 5f8:	1f 92       	push	r1
 5fa:	0f 92       	push	r0
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	0f 92       	push	r0
 600:	11 24       	eor	r1, r1
 602:	2f 93       	push	r18
 604:	3f 93       	push	r19
 606:	4f 93       	push	r20
 608:	5f 93       	push	r21
 60a:	6f 93       	push	r22
 60c:	7f 93       	push	r23
 60e:	8f 93       	push	r24
 610:	9f 93       	push	r25
 612:	af 93       	push	r26
 614:	bf 93       	push	r27
 616:	ef 93       	push	r30
 618:	ff 93       	push	r31
 61a:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <OVF_ptr>
 61e:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <OVF_ptr+0x1>
 622:	30 97       	sbiw	r30, 0x00	; 0
 624:	09 f0       	breq	.+2      	; 0x628 <__vector_11+0x30>
 626:	09 95       	icall
 628:	ff 91       	pop	r31
 62a:	ef 91       	pop	r30
 62c:	bf 91       	pop	r27
 62e:	af 91       	pop	r26
 630:	9f 91       	pop	r25
 632:	8f 91       	pop	r24
 634:	7f 91       	pop	r23
 636:	6f 91       	pop	r22
 638:	5f 91       	pop	r21
 63a:	4f 91       	pop	r20
 63c:	3f 91       	pop	r19
 63e:	2f 91       	pop	r18
 640:	0f 90       	pop	r0
 642:	0f be       	out	0x3f, r0	; 63
 644:	0f 90       	pop	r0
 646:	1f 90       	pop	r1
 648:	18 95       	reti

0000064a <__vector_10>:
 64a:	1f 92       	push	r1
 64c:	0f 92       	push	r0
 64e:	0f b6       	in	r0, 0x3f	; 63
 650:	0f 92       	push	r0
 652:	11 24       	eor	r1, r1
 654:	2f 93       	push	r18
 656:	3f 93       	push	r19
 658:	4f 93       	push	r20
 65a:	5f 93       	push	r21
 65c:	6f 93       	push	r22
 65e:	7f 93       	push	r23
 660:	8f 93       	push	r24
 662:	9f 93       	push	r25
 664:	af 93       	push	r26
 666:	bf 93       	push	r27
 668:	ef 93       	push	r30
 66a:	ff 93       	push	r31
 66c:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <CM_ptr>
 670:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <CM_ptr+0x1>
 674:	30 97       	sbiw	r30, 0x00	; 0
 676:	09 f0       	breq	.+2      	; 0x67a <__vector_10+0x30>
 678:	09 95       	icall
 67a:	ff 91       	pop	r31
 67c:	ef 91       	pop	r30
 67e:	bf 91       	pop	r27
 680:	af 91       	pop	r26
 682:	9f 91       	pop	r25
 684:	8f 91       	pop	r24
 686:	7f 91       	pop	r23
 688:	6f 91       	pop	r22
 68a:	5f 91       	pop	r21
 68c:	4f 91       	pop	r20
 68e:	3f 91       	pop	r19
 690:	2f 91       	pop	r18
 692:	0f 90       	pop	r0
 694:	0f be       	out	0x3f, r0	; 63
 696:	0f 90       	pop	r0
 698:	1f 90       	pop	r1
 69a:	18 95       	reti

0000069c <__vector_9>:
{
	Timer1_ICU_Fptr=LocalFptr;
}

ISR(TIMER1_OVF_vect)
{
 69c:	1f 92       	push	r1
 69e:	0f 92       	push	r0
 6a0:	0f b6       	in	r0, 0x3f	; 63
 6a2:	0f 92       	push	r0
 6a4:	11 24       	eor	r1, r1
 6a6:	2f 93       	push	r18
 6a8:	3f 93       	push	r19
 6aa:	4f 93       	push	r20
 6ac:	5f 93       	push	r21
 6ae:	6f 93       	push	r22
 6b0:	7f 93       	push	r23
 6b2:	8f 93       	push	r24
 6b4:	9f 93       	push	r25
 6b6:	af 93       	push	r26
 6b8:	bf 93       	push	r27
 6ba:	ef 93       	push	r30
 6bc:	ff 93       	push	r31
	if(Timer1_OVF_Fptr!=0)
 6be:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <Timer1_OVF_Fptr>
 6c2:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <Timer1_OVF_Fptr+0x1>
 6c6:	30 97       	sbiw	r30, 0x00	; 0
 6c8:	09 f0       	breq	.+2      	; 0x6cc <__vector_9+0x30>
	{
		Timer1_OVF_Fptr();
 6ca:	09 95       	icall
	}
}
 6cc:	ff 91       	pop	r31
 6ce:	ef 91       	pop	r30
 6d0:	bf 91       	pop	r27
 6d2:	af 91       	pop	r26
 6d4:	9f 91       	pop	r25
 6d6:	8f 91       	pop	r24
 6d8:	7f 91       	pop	r23
 6da:	6f 91       	pop	r22
 6dc:	5f 91       	pop	r21
 6de:	4f 91       	pop	r20
 6e0:	3f 91       	pop	r19
 6e2:	2f 91       	pop	r18
 6e4:	0f 90       	pop	r0
 6e6:	0f be       	out	0x3f, r0	; 63
 6e8:	0f 90       	pop	r0
 6ea:	1f 90       	pop	r1
 6ec:	18 95       	reti

000006ee <__vector_7>:
ISR(TIMER1_OCA_vect)
{
 6ee:	1f 92       	push	r1
 6f0:	0f 92       	push	r0
 6f2:	0f b6       	in	r0, 0x3f	; 63
 6f4:	0f 92       	push	r0
 6f6:	11 24       	eor	r1, r1
 6f8:	2f 93       	push	r18
 6fa:	3f 93       	push	r19
 6fc:	4f 93       	push	r20
 6fe:	5f 93       	push	r21
 700:	6f 93       	push	r22
 702:	7f 93       	push	r23
 704:	8f 93       	push	r24
 706:	9f 93       	push	r25
 708:	af 93       	push	r26
 70a:	bf 93       	push	r27
 70c:	ef 93       	push	r30
 70e:	ff 93       	push	r31
	if(Timer1_OCA_Fptr!=0)
 710:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <Timer1_OCA_Fptr>
 714:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <Timer1_OCA_Fptr+0x1>
 718:	30 97       	sbiw	r30, 0x00	; 0
 71a:	09 f0       	breq	.+2      	; 0x71e <__vector_7+0x30>
	{
		Timer1_OCA_Fptr();
 71c:	09 95       	icall
	}
}
 71e:	ff 91       	pop	r31
 720:	ef 91       	pop	r30
 722:	bf 91       	pop	r27
 724:	af 91       	pop	r26
 726:	9f 91       	pop	r25
 728:	8f 91       	pop	r24
 72a:	7f 91       	pop	r23
 72c:	6f 91       	pop	r22
 72e:	5f 91       	pop	r21
 730:	4f 91       	pop	r20
 732:	3f 91       	pop	r19
 734:	2f 91       	pop	r18
 736:	0f 90       	pop	r0
 738:	0f be       	out	0x3f, r0	; 63
 73a:	0f 90       	pop	r0
 73c:	1f 90       	pop	r1
 73e:	18 95       	reti

00000740 <__vector_8>:
ISR(TIMER1_OCB_vect)
{
 740:	1f 92       	push	r1
 742:	0f 92       	push	r0
 744:	0f b6       	in	r0, 0x3f	; 63
 746:	0f 92       	push	r0
 748:	11 24       	eor	r1, r1
 74a:	2f 93       	push	r18
 74c:	3f 93       	push	r19
 74e:	4f 93       	push	r20
 750:	5f 93       	push	r21
 752:	6f 93       	push	r22
 754:	7f 93       	push	r23
 756:	8f 93       	push	r24
 758:	9f 93       	push	r25
 75a:	af 93       	push	r26
 75c:	bf 93       	push	r27
 75e:	ef 93       	push	r30
 760:	ff 93       	push	r31
	if(Timer1_OCB_Fptr!=0)
 762:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <Timer1_OCB_Fptr>
 766:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <Timer1_OCB_Fptr+0x1>
 76a:	30 97       	sbiw	r30, 0x00	; 0
 76c:	09 f0       	breq	.+2      	; 0x770 <__vector_8+0x30>
	{
		Timer1_OCB_Fptr();
 76e:	09 95       	icall
	}
}
 770:	ff 91       	pop	r31
 772:	ef 91       	pop	r30
 774:	bf 91       	pop	r27
 776:	af 91       	pop	r26
 778:	9f 91       	pop	r25
 77a:	8f 91       	pop	r24
 77c:	7f 91       	pop	r23
 77e:	6f 91       	pop	r22
 780:	5f 91       	pop	r21
 782:	4f 91       	pop	r20
 784:	3f 91       	pop	r19
 786:	2f 91       	pop	r18
 788:	0f 90       	pop	r0
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	0f 90       	pop	r0
 78e:	1f 90       	pop	r1
 790:	18 95       	reti

00000792 <__vector_6>:
ISR(TIMER1_ICU_vect)
{
 792:	1f 92       	push	r1
 794:	0f 92       	push	r0
 796:	0f b6       	in	r0, 0x3f	; 63
 798:	0f 92       	push	r0
 79a:	11 24       	eor	r1, r1
 79c:	2f 93       	push	r18
 79e:	3f 93       	push	r19
 7a0:	4f 93       	push	r20
 7a2:	5f 93       	push	r21
 7a4:	6f 93       	push	r22
 7a6:	7f 93       	push	r23
 7a8:	8f 93       	push	r24
 7aa:	9f 93       	push	r25
 7ac:	af 93       	push	r26
 7ae:	bf 93       	push	r27
 7b0:	ef 93       	push	r30
 7b2:	ff 93       	push	r31
	if(Timer1_ICU_Fptr!=0)
 7b4:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <Timer1_ICU_Fptr>
 7b8:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <Timer1_ICU_Fptr+0x1>
 7bc:	30 97       	sbiw	r30, 0x00	; 0
 7be:	09 f0       	breq	.+2      	; 0x7c2 <__vector_6+0x30>
	{
		Timer1_ICU_Fptr();
 7c0:	09 95       	icall
	}
}
 7c2:	ff 91       	pop	r31
 7c4:	ef 91       	pop	r30
 7c6:	bf 91       	pop	r27
 7c8:	af 91       	pop	r26
 7ca:	9f 91       	pop	r25
 7cc:	8f 91       	pop	r24
 7ce:	7f 91       	pop	r23
 7d0:	6f 91       	pop	r22
 7d2:	5f 91       	pop	r21
 7d4:	4f 91       	pop	r20
 7d6:	3f 91       	pop	r19
 7d8:	2f 91       	pop	r18
 7da:	0f 90       	pop	r0
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	0f 90       	pop	r0
 7e0:	1f 90       	pop	r1
 7e2:	18 95       	reti

000007e4 <Uart_Init>:
}
void Uart_TX_SetCallBack(void (*LocalFPtr)(void))
{
	if (LocalFPtr!=0)
	{
		Uart_TX_Fptr=LocalFPtr;
 7e4:	10 bc       	out	0x20, r1	; 32
 7e6:	83 e3       	ldi	r24, 0x33	; 51
 7e8:	89 b9       	out	0x09, r24	; 9
 7ea:	88 e1       	ldi	r24, 0x18	; 24
 7ec:	8a b9       	out	0x0a, r24	; 10
 7ee:	86 e8       	ldi	r24, 0x86	; 134
 7f0:	80 bd       	out	0x20, r24	; 32
 7f2:	08 95       	ret

000007f4 <Uart_RX_InterruptEnable>:
 7f4:	8a b1       	in	r24, 0x0a	; 10
 7f6:	80 68       	ori	r24, 0x80	; 128
 7f8:	8a b9       	out	0x0a, r24	; 10
 7fa:	08 95       	ret

000007fc <ReciveDataNoBlock_callback>:
 7fc:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <i.1861>
 800:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <i.1861+0x1>
 804:	8c b1       	in	r24, 0x0c	; 12
 806:	e5 58       	subi	r30, 0x85	; 133
 808:	ff 4f       	sbci	r31, 0xFF	; 255
 80a:	80 83       	st	Z, r24
 80c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <i.1861>
 810:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <i.1861+0x1>
 814:	01 96       	adiw	r24, 0x01	; 1
 816:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <i.1861+0x1>
 81a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <i.1861>
 81e:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <i.1861>
 822:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <i.1861+0x1>
 826:	e5 58       	subi	r30, 0x85	; 133
 828:	ff 4f       	sbci	r31, 0xFF	; 255
 82a:	80 81       	ld	r24, Z
 82c:	83 32       	cpi	r24, 0x23	; 35
 82e:	39 f4       	brne	.+14     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <uart_flag>
 836:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <i.1861+0x1>
 83a:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <i.1861>
 83e:	08 95       	ret

00000840 <ReciveString_10char>:
 840:	fc 01       	movw	r30, r24
 842:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <uart_flag>
 846:	81 30       	cpi	r24, 0x01	; 1
 848:	49 f0       	breq	.+18     	; 0x85c <ReciveString_10char+0x1c>
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	08 95       	ret
 84e:	df 01       	movw	r26, r30
 850:	a2 0f       	add	r26, r18
 852:	b3 1f       	adc	r27, r19
 854:	9c 93       	st	X, r25
 856:	2f 5f       	subi	r18, 0xFF	; 255
 858:	3f 4f       	sbci	r19, 0xFF	; 255
 85a:	02 c0       	rjmp	.+4      	; 0x860 <__stack+0x1>
 85c:	20 e0       	ldi	r18, 0x00	; 0
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	d9 01       	movw	r26, r18
 862:	a5 58       	subi	r26, 0x85	; 133
 864:	bf 4f       	sbci	r27, 0xFF	; 255
 866:	9c 91       	ld	r25, X
 868:	91 11       	cpse	r25, r1
 86a:	f1 cf       	rjmp	.-30     	; 0x84e <ReciveString_10char+0xe>
 86c:	21 50       	subi	r18, 0x01	; 1
 86e:	31 09       	sbc	r19, r1
 870:	e2 0f       	add	r30, r18
 872:	f3 1f       	adc	r31, r19
 874:	10 82       	st	Z, r1
 876:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <uart_flag>
 87a:	08 95       	ret

0000087c <Uart_RX_SetCallBack>:
 87c:	00 97       	sbiw	r24, 0x00	; 0
 87e:	21 f0       	breq	.+8      	; 0x888 <Uart_RX_SetCallBack+0xc>
 880:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <Uart_RX_Fptr+0x1>
 884:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <Uart_RX_Fptr>
 888:	08 95       	ret

0000088a <__vector_13>:
	}
}
ISR(UART_RX_vect)
{
 88a:	1f 92       	push	r1
 88c:	0f 92       	push	r0
 88e:	0f b6       	in	r0, 0x3f	; 63
 890:	0f 92       	push	r0
 892:	11 24       	eor	r1, r1
 894:	2f 93       	push	r18
 896:	3f 93       	push	r19
 898:	4f 93       	push	r20
 89a:	5f 93       	push	r21
 89c:	6f 93       	push	r22
 89e:	7f 93       	push	r23
 8a0:	8f 93       	push	r24
 8a2:	9f 93       	push	r25
 8a4:	af 93       	push	r26
 8a6:	bf 93       	push	r27
 8a8:	ef 93       	push	r30
 8aa:	ff 93       	push	r31
	
	if (Uart_RX_Fptr!=0)
 8ac:	e0 91 e1 00 	lds	r30, 0x00E1	; 0x8000e1 <Uart_RX_Fptr>
 8b0:	f0 91 e2 00 	lds	r31, 0x00E2	; 0x8000e2 <Uart_RX_Fptr+0x1>
 8b4:	30 97       	sbiw	r30, 0x00	; 0
 8b6:	09 f0       	breq	.+2      	; 0x8ba <__vector_13+0x30>
	{
		Uart_RX_Fptr();
 8b8:	09 95       	icall
	}
}
 8ba:	ff 91       	pop	r31
 8bc:	ef 91       	pop	r30
 8be:	bf 91       	pop	r27
 8c0:	af 91       	pop	r26
 8c2:	9f 91       	pop	r25
 8c4:	8f 91       	pop	r24
 8c6:	7f 91       	pop	r23
 8c8:	6f 91       	pop	r22
 8ca:	5f 91       	pop	r21
 8cc:	4f 91       	pop	r20
 8ce:	3f 91       	pop	r19
 8d0:	2f 91       	pop	r18
 8d2:	0f 90       	pop	r0
 8d4:	0f be       	out	0x3f, r0	; 63
 8d6:	0f 90       	pop	r0
 8d8:	1f 90       	pop	r1
 8da:	18 95       	reti

000008dc <__vector_15>:
ISR (UART_TX_vect)
{
 8dc:	1f 92       	push	r1
 8de:	0f 92       	push	r0
 8e0:	0f b6       	in	r0, 0x3f	; 63
 8e2:	0f 92       	push	r0
 8e4:	11 24       	eor	r1, r1
 8e6:	2f 93       	push	r18
 8e8:	3f 93       	push	r19
 8ea:	4f 93       	push	r20
 8ec:	5f 93       	push	r21
 8ee:	6f 93       	push	r22
 8f0:	7f 93       	push	r23
 8f2:	8f 93       	push	r24
 8f4:	9f 93       	push	r25
 8f6:	af 93       	push	r26
 8f8:	bf 93       	push	r27
 8fa:	ef 93       	push	r30
 8fc:	ff 93       	push	r31
	if (Uart_TX_Fptr!=0)
 8fe:	e0 91 df 00 	lds	r30, 0x00DF	; 0x8000df <Uart_TX_Fptr>
 902:	f0 91 e0 00 	lds	r31, 0x00E0	; 0x8000e0 <Uart_TX_Fptr+0x1>
 906:	30 97       	sbiw	r30, 0x00	; 0
 908:	09 f0       	breq	.+2      	; 0x90c <__vector_15+0x30>
	{
		Uart_TX_Fptr();
 90a:	09 95       	icall
	}
	
 90c:	ff 91       	pop	r31
 90e:	ef 91       	pop	r30
 910:	bf 91       	pop	r27
 912:	af 91       	pop	r26
 914:	9f 91       	pop	r25
 916:	8f 91       	pop	r24
 918:	7f 91       	pop	r23
 91a:	6f 91       	pop	r22
 91c:	5f 91       	pop	r21
 91e:	4f 91       	pop	r20
 920:	3f 91       	pop	r19
 922:	2f 91       	pop	r18
 924:	0f 90       	pop	r0
 926:	0f be       	out	0x3f, r0	; 63
 928:	0f 90       	pop	r0
 92a:	1f 90       	pop	r1
 92c:	18 95       	reti

0000092e <__tablejump2__>:
 92e:	ee 0f       	add	r30, r30
 930:	ff 1f       	adc	r31, r31
 932:	05 90       	lpm	r0, Z+
 934:	f4 91       	lpm	r31, Z
 936:	e0 2d       	mov	r30, r0
 938:	09 94       	ijmp

0000093a <_exit>:
 93a:	f8 94       	cli

0000093c <__stop_program>:
 93c:	ff cf       	rjmp	.-2      	; 0x93c <__stop_program>
