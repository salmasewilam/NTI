
NTI_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000094c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  0000094c  000009e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000ee  008000ee  00000a6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000aa0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ccb  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000103f  00000000  00000000  000039af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000142e  00000000  00000000  000049ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000059c  00000000  00000000  00005e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c0  00000000  00000000  000063b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000150e  00000000  00000000  00006b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00008086  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
   4:	0c 94 23 04 	jmp	0x846	; 0x846 <__vector_1>
   8:	0c 94 4c 04 	jmp	0x898	; 0x898 <__vector_2>
   c:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__vector_3>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 47 03 	jmp	0x68e	; 0x68e <__vector_16>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  54:	7c 03       	fmul	r23, r20
  56:	82 03       	fmuls	r16, r18
  58:	88 03       	fmulsu	r16, r16
  5a:	8e 03       	fmulsu	r16, r22
  5c:	94 03       	fmuls	r17, r20
  5e:	9a 03       	fmulsu	r17, r18
  60:	a0 03       	fmuls	r18, r16
  62:	a6 03       	fmuls	r18, r22
  64:	ba 03       	fmulsu	r19, r18
  66:	c0 03       	fmuls	r20, r16
  68:	c6 03       	fmuls	r20, r22
  6a:	cc 03       	fmulsu	r20, r20
  6c:	d2 03       	fmuls	r21, r18
  6e:	d8 03       	fmulsu	r21, r16
  70:	de 03       	fmulsu	r21, r22
  72:	e4 03       	fmuls	r22, r20
  74:	f6 03       	fmuls	r23, r22
  76:	fa 03       	fmulsu	r23, r18
  78:	ff 03       	fmulsu	r23, r23
  7a:	05 04       	cpc	r0, r5
  7c:	0b 04       	cpc	r0, r11
  7e:	10 04       	cpc	r1, r0
  80:	16 04       	cpc	r1, r6
  82:	1c 04       	cpc	r1, r12

00000084 <__ctors_end>:
  84:	11 24       	eor	r1, r1
  86:	1f be       	out	0x3f, r1	; 63
  88:	cf e5       	ldi	r28, 0x5F	; 95
  8a:	d8 e0       	ldi	r29, 0x08	; 8
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_copy_data>:
  90:	10 e0       	ldi	r17, 0x00	; 0
  92:	a0 e6       	ldi	r26, 0x60	; 96
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	ec e4       	ldi	r30, 0x4C	; 76
  98:	f9 e0       	ldi	r31, 0x09	; 9
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <__do_copy_data+0x10>
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0
  a0:	ae 3e       	cpi	r26, 0xEE	; 238
  a2:	b1 07       	cpc	r27, r17
  a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0xc>

000000a6 <__do_clear_bss>:
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	ae ee       	ldi	r26, 0xEE	; 238
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
  ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
  b0:	a6 3f       	cpi	r26, 0xF6	; 246
  b2:	b2 07       	cpc	r27, r18
  b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
  b6:	0e 94 1e 03 	call	0x63c	; 0x63c <main>
  ba:	0c 94 a4 04 	jmp	0x948	; 0x948 <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <get_id>:


data_t data_base[2]={{"AHMED ALI",1234,5060},{"SARA OMAR",5678,1020}};
u8 index=-1;
u32 get_id(void)
{
  c2:	cf 92       	push	r12
  c4:	df 92       	push	r13
  c6:	ef 92       	push	r14
  c8:	ff 92       	push	r15
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
	u32 id=0;
	u8 key;
	int i=0;
	H_LCD_void_sendString("enter id: ");
  d2:	85 eb       	ldi	r24, 0xB5	; 181
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 b5 02 	call	0x56a	; 0x56a <H_LCD_void_sendString>
u8 index=-1;
u32 get_id(void)
{
	u32 id=0;
	u8 key;
	int i=0;
  da:	00 e0       	ldi	r16, 0x00	; 0
  dc:	10 e0       	ldi	r17, 0x00	; 0

data_t data_base[2]={{"AHMED ALI",1234,5060},{"SARA OMAR",5678,1020}};
u8 index=-1;
u32 get_id(void)
{
	u32 id=0;
  de:	c1 2c       	mov	r12, r1
  e0:	d1 2c       	mov	r13, r1
  e2:	76 01       	movw	r14, r12
	u8 key;
	int i=0;
	H_LCD_void_sendString("enter id: ");
	for (;i<4;)
  e4:	27 c0       	rjmp	.+78     	; 0x134 <get_id+0x72>
	{
		key=keypad_getkey();
  e6:	0e 94 95 01 	call	0x32a	; 0x32a <keypad_getkey>
  ea:	c8 2f       	mov	r28, r24
		if (key !='T')
  ec:	84 35       	cpi	r24, 0x54	; 84
  ee:	11 f1       	breq	.+68     	; 0x134 <get_id+0x72>
		{
			H_LCD_void_sendData(key);
  f0:	0e 94 2e 02 	call	0x45c	; 0x45c <H_LCD_void_sendData>
			id=(id*10)+(key-48);
  f4:	cc 0c       	add	r12, r12
  f6:	dd 1c       	adc	r13, r13
  f8:	ee 1c       	adc	r14, r14
  fa:	ff 1c       	adc	r15, r15
  fc:	d7 01       	movw	r26, r14
  fe:	c6 01       	movw	r24, r12
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	aa 1f       	adc	r26, r26
 106:	bb 1f       	adc	r27, r27
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	aa 1f       	adc	r26, r26
 10e:	bb 1f       	adc	r27, r27
 110:	c8 0e       	add	r12, r24
 112:	d9 1e       	adc	r13, r25
 114:	ea 1e       	adc	r14, r26
 116:	fb 1e       	adc	r15, r27
 118:	8c 2f       	mov	r24, r28
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	ec 01       	movw	r28, r24
 11e:	e0 97       	sbiw	r28, 0x30	; 48
 120:	ce 01       	movw	r24, r28
 122:	dd 0f       	add	r29, r29
 124:	aa 0b       	sbc	r26, r26
 126:	bb 0b       	sbc	r27, r27
 128:	c8 0e       	add	r12, r24
 12a:	d9 1e       	adc	r13, r25
 12c:	ea 1e       	adc	r14, r26
 12e:	fb 1e       	adc	r15, r27
			i++;
 130:	0f 5f       	subi	r16, 0xFF	; 255
 132:	1f 4f       	sbci	r17, 0xFF	; 255
{
	u32 id=0;
	u8 key;
	int i=0;
	H_LCD_void_sendString("enter id: ");
	for (;i<4;)
 134:	04 30       	cpi	r16, 0x04	; 4
 136:	11 05       	cpc	r17, r1
 138:	b4 f2       	brlt	.-84     	; 0xe6 <get_id+0x24>
			id=(id*10)+(key-48);
			i++;
		}
	}
	return id;
}
 13a:	c7 01       	movw	r24, r14
 13c:	b6 01       	movw	r22, r12
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
 146:	ff 90       	pop	r15
 148:	ef 90       	pop	r14
 14a:	df 90       	pop	r13
 14c:	cf 90       	pop	r12
 14e:	08 95       	ret

00000150 <get_pass>:
u32 get_pass(void)
{
 150:	cf 92       	push	r12
 152:	df 92       	push	r13
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
	
	u32 pass=0;
	u8 key;
	int i=0;
		H_LCD_void_clear();
 160:	0e 94 cb 02 	call	0x596	; 0x596 <H_LCD_void_clear>
		H_LCD_void_sendString("enter pass: ");
 164:	80 ec       	ldi	r24, 0xC0	; 192
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 b5 02 	call	0x56a	; 0x56a <H_LCD_void_sendString>
u32 get_pass(void)
{
	
	u32 pass=0;
	u8 key;
	int i=0;
 16c:	00 e0       	ldi	r16, 0x00	; 0
 16e:	10 e0       	ldi	r17, 0x00	; 0
	return id;
}
u32 get_pass(void)
{
	
	u32 pass=0;
 170:	c1 2c       	mov	r12, r1
 172:	d1 2c       	mov	r13, r1
 174:	76 01       	movw	r14, r12
	u8 key;
	int i=0;
		H_LCD_void_clear();
		H_LCD_void_sendString("enter pass: ");
	for (;i<4;)
 176:	28 c0       	rjmp	.+80     	; 0x1c8 <get_pass+0x78>
	{
		key=keypad_getkey();
 178:	0e 94 95 01 	call	0x32a	; 0x32a <keypad_getkey>
 17c:	c8 2f       	mov	r28, r24
		if (key !='T')
 17e:	84 35       	cpi	r24, 0x54	; 84
 180:	19 f1       	breq	.+70     	; 0x1c8 <get_pass+0x78>
		{
			H_LCD_void_sendData('*');
 182:	8a e2       	ldi	r24, 0x2A	; 42
 184:	0e 94 2e 02 	call	0x45c	; 0x45c <H_LCD_void_sendData>
			pass=(pass*10)+(key-48);
 188:	cc 0c       	add	r12, r12
 18a:	dd 1c       	adc	r13, r13
 18c:	ee 1c       	adc	r14, r14
 18e:	ff 1c       	adc	r15, r15
 190:	d7 01       	movw	r26, r14
 192:	c6 01       	movw	r24, r12
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	aa 1f       	adc	r26, r26
 19a:	bb 1f       	adc	r27, r27
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	aa 1f       	adc	r26, r26
 1a2:	bb 1f       	adc	r27, r27
 1a4:	c8 0e       	add	r12, r24
 1a6:	d9 1e       	adc	r13, r25
 1a8:	ea 1e       	adc	r14, r26
 1aa:	fb 1e       	adc	r15, r27
 1ac:	8c 2f       	mov	r24, r28
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	ec 01       	movw	r28, r24
 1b2:	e0 97       	sbiw	r28, 0x30	; 48
 1b4:	ce 01       	movw	r24, r28
 1b6:	dd 0f       	add	r29, r29
 1b8:	aa 0b       	sbc	r26, r26
 1ba:	bb 0b       	sbc	r27, r27
 1bc:	c8 0e       	add	r12, r24
 1be:	d9 1e       	adc	r13, r25
 1c0:	ea 1e       	adc	r14, r26
 1c2:	fb 1e       	adc	r15, r27
			i++;
 1c4:	0f 5f       	subi	r16, 0xFF	; 255
 1c6:	1f 4f       	sbci	r17, 0xFF	; 255
	u32 pass=0;
	u8 key;
	int i=0;
		H_LCD_void_clear();
		H_LCD_void_sendString("enter pass: ");
	for (;i<4;)
 1c8:	04 30       	cpi	r16, 0x04	; 4
 1ca:	11 05       	cpc	r17, r1
 1cc:	ac f2       	brlt	.-86     	; 0x178 <get_pass+0x28>
			pass=(pass*10)+(key-48);
			i++;
		}
	}
	return pass;
}
 1ce:	c7 01       	movw	r24, r14
 1d0:	b6 01       	movw	r22, r12
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	ff 90       	pop	r15
 1dc:	ef 90       	pop	r14
 1de:	df 90       	pop	r13
 1e0:	cf 90       	pop	r12
 1e2:	08 95       	ret

000001e4 <confirm_id_pass>:
state_t confirm_id_pass(void)
{
 1e4:	0f 93       	push	r16
 1e6:	1f 93       	push	r17
	u32 id=get_id();
 1e8:	0e 94 61 00 	call	0xc2	; 0xc2 <get_id>
	for (u8 i=0;i<DATA_SIZE;i++)
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	13 c0       	rjmp	.+38     	; 0x216 <confirm_id_pass+0x32>
	{
		if (id ==data_base[i].id)
 1f0:	2c e1       	ldi	r18, 0x1C	; 28
 1f2:	42 9f       	mul	r20, r18
 1f4:	f0 01       	movw	r30, r0
 1f6:	11 24       	eor	r1, r1
 1f8:	ef 59       	subi	r30, 0x9F	; 159
 1fa:	ff 4f       	sbci	r31, 0xFF	; 255
 1fc:	04 89       	ldd	r16, Z+20	; 0x14
 1fe:	15 89       	ldd	r17, Z+21	; 0x15
 200:	26 89       	ldd	r18, Z+22	; 0x16
 202:	37 89       	ldd	r19, Z+23	; 0x17
 204:	60 17       	cp	r22, r16
 206:	71 07       	cpc	r23, r17
 208:	82 07       	cpc	r24, r18
 20a:	93 07       	cpc	r25, r19
 20c:	19 f4       	brne	.+6      	; 0x214 <confirm_id_pass+0x30>
		{
			index=i;
 20e:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 212:	03 c0       	rjmp	.+6      	; 0x21a <confirm_id_pass+0x36>
	return pass;
}
state_t confirm_id_pass(void)
{
	u32 id=get_id();
	for (u8 i=0;i<DATA_SIZE;i++)
 214:	4f 5f       	subi	r20, 0xFF	; 255
 216:	42 30       	cpi	r20, 0x02	; 2
 218:	58 f3       	brcs	.-42     	; 0x1f0 <confirm_id_pass+0xc>
			index=i;
			break;
		}
	}
	if (index==-1) return USER_NOT_FOUND;
	u32 pass=get_pass();
 21a:	0e 94 a8 00 	call	0x150	; 0x150 <get_pass>
	if (pass == data_base[index].pass)
 21e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 222:	2c e1       	ldi	r18, 0x1C	; 28
 224:	e2 9f       	mul	r30, r18
 226:	f0 01       	movw	r30, r0
 228:	11 24       	eor	r1, r1
 22a:	ef 59       	subi	r30, 0x9F	; 159
 22c:	ff 4f       	sbci	r31, 0xFF	; 255
 22e:	00 8d       	ldd	r16, Z+24	; 0x18
 230:	11 8d       	ldd	r17, Z+25	; 0x19
 232:	22 8d       	ldd	r18, Z+26	; 0x1a
 234:	33 8d       	ldd	r19, Z+27	; 0x1b
 236:	60 17       	cp	r22, r16
 238:	71 07       	cpc	r23, r17
 23a:	82 07       	cpc	r24, r18
 23c:	93 07       	cpc	r25, r19
 23e:	11 f4       	brne	.+4      	; 0x244 <confirm_id_pass+0x60>
	{
		return SUCCESS;
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	01 c0       	rjmp	.+2      	; 0x246 <confirm_id_pass+0x62>
	}
	return WRONG_PASS;
 244:	81 e0       	ldi	r24, 0x01	; 1
}
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	08 95       	ret

0000024c <app>:

void app(void)
{
 24c:	cf 93       	push	r28
	state_t state;
	state=confirm_id_pass();
 24e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <confirm_id_pass>
 252:	c8 2f       	mov	r28, r24
	H_LCD_void_clear();
 254:	0e 94 cb 02 	call	0x596	; 0x596 <H_LCD_void_clear>
	switch(state)
 258:	c1 30       	cpi	r28, 0x01	; 1
 25a:	49 f0       	breq	.+18     	; 0x26e <app+0x22>
 25c:	18 f0       	brcs	.+6      	; 0x264 <app+0x18>
 25e:	c2 30       	cpi	r28, 0x02	; 2
 260:	59 f0       	breq	.+22     	; 0x278 <app+0x2c>
 262:	18 c0       	rjmp	.+48     	; 0x294 <app+0x48>
	{
		case USER_NOT_FOUND: H_LCD_void_sendString("wrong ID"); break;
 264:	8d ec       	ldi	r24, 0xCD	; 205
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 b5 02 	call	0x56a	; 0x56a <H_LCD_void_sendString>
 26c:	13 c0       	rjmp	.+38     	; 0x294 <app+0x48>
		case WRONG_PASS: H_LCD_void_sendString("wrong password"); break;
 26e:	86 ed       	ldi	r24, 0xD6	; 214
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 b5 02 	call	0x56a	; 0x56a <H_LCD_void_sendString>
 276:	0e c0       	rjmp	.+28     	; 0x294 <app+0x48>
		case SUCCESS: H_LCD_void_sendString("Welcome");
 278:	85 ee       	ldi	r24, 0xE5	; 229
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 b5 02 	call	0x56a	; 0x56a <H_LCD_void_sendString>
		              H_LCD_void_sendString(data_base[index].name);
 280:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 284:	2c e1       	ldi	r18, 0x1C	; 28
 286:	82 9f       	mul	r24, r18
 288:	c0 01       	movw	r24, r0
 28a:	11 24       	eor	r1, r1
 28c:	8f 59       	subi	r24, 0x9F	; 159
 28e:	9f 4f       	sbci	r25, 0xFF	; 255
 290:	0e 94 b5 02 	call	0x56a	; 0x56a <H_LCD_void_sendString>
					   break;
	}
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <keypad_init>:
{'M','N','O','S'}
};
void keypad_init (void)
{
	//set output pins rows
	DIO_voidSetPinDirection(PORT_OUT,FIRST_OUTPUT,OUTPUT);
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	64 e0       	ldi	r22, 0x04	; 4
 29c:	86 e3       	ldi	r24, 0x36	; 54
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_OUT,SECOND_OUTPUT,OUTPUT);
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	65 e0       	ldi	r22, 0x05	; 5
 2a8:	86 e3       	ldi	r24, 0x36	; 54
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_OUT,THIRD_OUTPUT,OUTPUT);
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	66 e0       	ldi	r22, 0x06	; 6
 2b4:	86 e3       	ldi	r24, 0x36	; 54
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_OUT,FORTH_OUTPUT,OUTPUT);
 2bc:	41 e0       	ldi	r20, 0x01	; 1
 2be:	67 e0       	ldi	r22, 0x07	; 7
 2c0:	86 e3       	ldi	r24, 0x36	; 54
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
	//set input pins cols
	DIO_voidSetPinDirection(PORT_IN,FIRST_INPUT,INPUT);
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	80 e3       	ldi	r24, 0x30	; 48
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_IN,SECOND_INPUT,INPUT);
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	63 e0       	ldi	r22, 0x03	; 3
 2d8:	80 e3       	ldi	r24, 0x30	; 48
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_IN,THIRD_INPUT,INPUT);
 2e0:	40 e0       	ldi	r20, 0x00	; 0
 2e2:	64 e0       	ldi	r22, 0x04	; 4
 2e4:	80 e3       	ldi	r24, 0x30	; 48
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_IN,FORTH_INPUT,INPUT);
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	65 e0       	ldi	r22, 0x05	; 5
 2f0:	80 e3       	ldi	r24, 0x30	; 48
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
	//set output as high
	DIO_voidSetPinValue(PORT_OUT,FIRST_OUTPUT,HIGH);
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	64 e0       	ldi	r22, 0x04	; 4
 2fc:	86 e3       	ldi	r24, 0x36	; 54
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_OUT,SECOND_OUTPUT,HIGH);
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	65 e0       	ldi	r22, 0x05	; 5
 308:	86 e3       	ldi	r24, 0x36	; 54
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_OUT,SECOND_OUTPUT,HIGH);
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	65 e0       	ldi	r22, 0x05	; 5
 314:	86 e3       	ldi	r24, 0x36	; 54
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_OUT,SECOND_OUTPUT,HIGH);
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	65 e0       	ldi	r22, 0x05	; 5
 320:	86 e3       	ldi	r24, 0x36	; 54
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_voidSetPinValue>
 328:	08 95       	ret

0000032a <keypad_getkey>:
	//DIO_voidSetPinValue(ptrD,7,HIGH);
	
}

u8 keypad_getkey(void)
{
 32a:	0f 93       	push	r16
 32c:	1f 93       	push	r17
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
	int r,c;
	u8 key='T';
	for (r=0;r<ROWS;r++)
 332:	00 e0       	ldi	r16, 0x00	; 0
 334:	10 e0       	ldi	r17, 0x00	; 0
 336:	3b c0       	rjmp	.+118    	; 0x3ae <keypad_getkey+0x84>
	{
		DIO_voidSetPinValue(PORT_OUT,output[r],LOW);
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	f8 01       	movw	r30, r16
 33c:	e7 55       	subi	r30, 0x57	; 87
 33e:	ff 4f       	sbci	r31, 0xFF	; 255
 340:	60 81       	ld	r22, Z
 342:	86 e3       	ldi	r24, 0x36	; 54
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_voidSetPinValue>
		for (c=0;c<COLS;c++)
 34a:	c0 e0       	ldi	r28, 0x00	; 0
 34c:	d0 e0       	ldi	r29, 0x00	; 0
 34e:	21 c0       	rjmp	.+66     	; 0x392 <keypad_getkey+0x68>
		{
			if (DIO_GetPinValue(PORT_IN,input[c])==LOW)
 350:	fe 01       	movw	r30, r28
 352:	e3 55       	subi	r30, 0x53	; 83
 354:	ff 4f       	sbci	r31, 0xFF	; 255
 356:	60 81       	ld	r22, Z
 358:	80 e3       	ldi	r24, 0x30	; 48
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_GetPinValue>
 360:	81 11       	cpse	r24, r1
 362:	16 c0       	rjmp	.+44     	; 0x390 <keypad_getkey+0x66>
			{
				key=keys[r][c];
 364:	f8 01       	movw	r30, r16
 366:	ee 0f       	add	r30, r30
 368:	ff 1f       	adc	r31, r31
 36a:	ee 0f       	add	r30, r30
 36c:	ff 1f       	adc	r31, r31
 36e:	e7 56       	subi	r30, 0x67	; 103
 370:	ff 4f       	sbci	r31, 0xFF	; 255
 372:	ec 0f       	add	r30, r28
 374:	fd 1f       	adc	r31, r29
 376:	10 81       	ld	r17, Z
				while(DIO_GetPinValue(PORT_IN,input[c])==LOW);
 378:	fe 01       	movw	r30, r28
 37a:	e3 55       	subi	r30, 0x53	; 83
 37c:	ff 4f       	sbci	r31, 0xFF	; 255
 37e:	60 81       	ld	r22, Z
 380:	80 e3       	ldi	r24, 0x30	; 48
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DIO_GetPinValue>
 388:	88 23       	and	r24, r24
 38a:	b1 f3       	breq	.-20     	; 0x378 <keypad_getkey+0x4e>
				return key;
 38c:	81 2f       	mov	r24, r17
 38e:	13 c0       	rjmp	.+38     	; 0x3b6 <keypad_getkey+0x8c>
	int r,c;
	u8 key='T';
	for (r=0;r<ROWS;r++)
	{
		DIO_voidSetPinValue(PORT_OUT,output[r],LOW);
		for (c=0;c<COLS;c++)
 390:	21 96       	adiw	r28, 0x01	; 1
 392:	c4 30       	cpi	r28, 0x04	; 4
 394:	d1 05       	cpc	r29, r1
 396:	e4 f2       	brlt	.-72     	; 0x350 <keypad_getkey+0x26>
				while(DIO_GetPinValue(PORT_IN,input[c])==LOW);
				return key;
			}
			
		}
		DIO_voidSetPinValue(PORT_OUT,output[r],HIGH);
 398:	f8 01       	movw	r30, r16
 39a:	e7 55       	subi	r30, 0x57	; 87
 39c:	ff 4f       	sbci	r31, 0xFF	; 255
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	60 81       	ld	r22, Z
 3a2:	86 e3       	ldi	r24, 0x36	; 54
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_voidSetPinValue>

u8 keypad_getkey(void)
{
	int r,c;
	u8 key='T';
	for (r=0;r<ROWS;r++)
 3aa:	0f 5f       	subi	r16, 0xFF	; 255
 3ac:	1f 4f       	sbci	r17, 0xFF	; 255
 3ae:	04 30       	cpi	r16, 0x04	; 4
 3b0:	11 05       	cpc	r17, r1
 3b2:	14 f2       	brlt	.-124    	; 0x338 <keypad_getkey+0xe>
			}
			
		}
		DIO_voidSetPinValue(PORT_OUT,output[r],HIGH);
	}
	return key;
 3b4:	84 e5       	ldi	r24, 0x54	; 84
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	1f 91       	pop	r17
 3bc:	0f 91       	pop	r16
 3be:	08 95       	ret

000003c0 <H_LCD_void_latchByte>:
	{
		H_LCD_void_sendCommand(0x80|copy_u8Col);
	}
	else if (copy_u8Row ==1)
	{
		H_LCD_void_sendCommand(0x80+0x40+copy_u8Col);
 3c0:	df 92       	push	r13
 3c2:	ef 92       	push	r14
 3c4:	ff 92       	push	r15
 3c6:	0f 93       	push	r16
 3c8:	1f 93       	push	r17
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	d8 2e       	mov	r13, r24
 3d0:	e1 2c       	mov	r14, r1
 3d2:	f1 2c       	mov	r15, r1
 3d4:	07 e0       	ldi	r16, 0x07	; 7
 3d6:	10 e0       	ldi	r17, 0x00	; 0
 3d8:	35 c0       	rjmp	.+106    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 3da:	4d 2d       	mov	r20, r13
 3dc:	50 e0       	ldi	r21, 0x00	; 0
 3de:	00 2e       	mov	r0, r16
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <H_LCD_void_latchByte+0x26>
 3e2:	55 95       	asr	r21
 3e4:	47 95       	ror	r20
 3e6:	0a 94       	dec	r0
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <H_LCD_void_latchByte+0x22>
 3ea:	41 70       	andi	r20, 0x01	; 1
 3ec:	fe 01       	movw	r30, r28
 3ee:	ef 54       	subi	r30, 0x4F	; 79
 3f0:	ff 4f       	sbci	r31, 0xFF	; 255
 3f2:	60 81       	ld	r22, Z
 3f4:	89 e3       	ldi	r24, 0x39	; 57
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_voidSetPinValue>
 3fc:	01 50       	subi	r16, 0x01	; 1
 3fe:	11 09       	sbc	r17, r1
 400:	21 96       	adiw	r28, 0x01	; 1
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	c0 e0       	ldi	r28, 0x00	; 0
 406:	d0 e0       	ldi	r29, 0x00	; 0
 408:	c4 30       	cpi	r28, 0x04	; 4
 40a:	d1 05       	cpc	r29, r1
 40c:	34 f3       	brlt	.-52     	; 0x3da <H_LCD_void_latchByte+0x1a>
 40e:	41 e0       	ldi	r20, 0x01	; 1
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	89 e3       	ldi	r24, 0x39	; 57
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_voidSetPinValue>
 41a:	8f e0       	ldi	r24, 0x0F	; 15
 41c:	97 e2       	ldi	r25, 0x27	; 39
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 424:	00 00       	nop
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	62 e0       	ldi	r22, 0x02	; 2
 42a:	89 e3       	ldi	r24, 0x39	; 57
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_voidSetPinValue>
 432:	8f e0       	ldi	r24, 0x0F	; 15
 434:	97 e2       	ldi	r25, 0x27	; 39
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 43c:	00 00       	nop
 43e:	9f ef       	ldi	r25, 0xFF	; 255
 440:	e9 1a       	sub	r14, r25
 442:	f9 0a       	sbc	r15, r25
 444:	82 e0       	ldi	r24, 0x02	; 2
 446:	e8 16       	cp	r14, r24
 448:	f1 04       	cpc	r15, r1
 44a:	e4 f2       	brlt	.-72     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	0f 91       	pop	r16
 454:	ff 90       	pop	r15
 456:	ef 90       	pop	r14
 458:	df 90       	pop	r13
 45a:	08 95       	ret

0000045c <H_LCD_void_sendData>:
 45c:	cf 93       	push	r28
 45e:	c8 2f       	mov	r28, r24
 460:	41 e0       	ldi	r20, 0x01	; 1
 462:	61 e0       	ldi	r22, 0x01	; 1
 464:	89 e3       	ldi	r24, 0x39	; 57
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_voidSetPinValue>
 46c:	8c 2f       	mov	r24, r28
 46e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <H_LCD_void_latchByte>
 472:	8f ec       	ldi	r24, 0xCF	; 207
 474:	97 e0       	ldi	r25, 0x07	; 7
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	f1 f7       	brne	.-4      	; 0x476 <H_LCD_void_sendData+0x1a>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <H_LCD_void_sendData+0x20>
 47c:	00 00       	nop
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <H_LCD_void_sendCommand>:
 482:	cf 93       	push	r28
 484:	c8 2f       	mov	r28, r24
 486:	40 e0       	ldi	r20, 0x00	; 0
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	89 e3       	ldi	r24, 0x39	; 57
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_voidSetPinValue>
 492:	8c 2f       	mov	r24, r28
 494:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <H_LCD_void_latchByte>
 498:	8f ec       	ldi	r24, 0xCF	; 207
 49a:	97 e0       	ldi	r25, 0x07	; 7
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <H_LCD_void_sendCommand+0x1a>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <H_LCD_void_sendCommand+0x20>
 4a2:	00 00       	nop
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <H_LCD_void_Init>:
 4a8:	41 e0       	ldi	r20, 0x01	; 1
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	89 e3       	ldi	r24, 0x39	; 57
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
 4b4:	41 e0       	ldi	r20, 0x01	; 1
 4b6:	62 e0       	ldi	r22, 0x02	; 2
 4b8:	89 e3       	ldi	r24, 0x39	; 57
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
 4c0:	41 e0       	ldi	r20, 0x01	; 1
 4c2:	63 e0       	ldi	r22, 0x03	; 3
 4c4:	89 e3       	ldi	r24, 0x39	; 57
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
 4cc:	41 e0       	ldi	r20, 0x01	; 1
 4ce:	64 e0       	ldi	r22, 0x04	; 4
 4d0:	89 e3       	ldi	r24, 0x39	; 57
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
 4d8:	41 e0       	ldi	r20, 0x01	; 1
 4da:	65 e0       	ldi	r22, 0x05	; 5
 4dc:	89 e3       	ldi	r24, 0x39	; 57
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
 4e4:	41 e0       	ldi	r20, 0x01	; 1
 4e6:	66 e0       	ldi	r22, 0x06	; 6
 4e8:	89 e3       	ldi	r24, 0x39	; 57
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
 4f0:	2f e7       	ldi	r18, 0x7F	; 127
 4f2:	88 e3       	ldi	r24, 0x38	; 56
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	21 50       	subi	r18, 0x01	; 1
 4f8:	80 40       	sbci	r24, 0x00	; 0
 4fa:	90 40       	sbci	r25, 0x00	; 0
 4fc:	e1 f7       	brne	.-8      	; 0x4f6 <H_LCD_void_Init+0x4e>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <H_LCD_void_Init+0x58>
 500:	00 00       	nop
 502:	40 e0       	ldi	r20, 0x00	; 0
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	89 e3       	ldi	r24, 0x39	; 57
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_voidSetPinValue>
 50e:	82 e0       	ldi	r24, 0x02	; 2
 510:	0e 94 41 02 	call	0x482	; 0x482 <H_LCD_void_sendCommand>
 514:	82 e0       	ldi	r24, 0x02	; 2
 516:	0e 94 41 02 	call	0x482	; 0x482 <H_LCD_void_sendCommand>
 51a:	88 e0       	ldi	r24, 0x08	; 8
 51c:	0e 94 41 02 	call	0x482	; 0x482 <H_LCD_void_sendCommand>
 520:	8f ec       	ldi	r24, 0xCF	; 207
 522:	97 e0       	ldi	r25, 0x07	; 7
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	f1 f7       	brne	.-4      	; 0x524 <H_LCD_void_Init+0x7c>
 528:	00 c0       	rjmp	.+0      	; 0x52a <H_LCD_void_Init+0x82>
 52a:	00 00       	nop
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	0e 94 41 02 	call	0x482	; 0x482 <H_LCD_void_sendCommand>
 532:	8c e0       	ldi	r24, 0x0C	; 12
 534:	0e 94 41 02 	call	0x482	; 0x482 <H_LCD_void_sendCommand>
 538:	8f ec       	ldi	r24, 0xCF	; 207
 53a:	97 e0       	ldi	r25, 0x07	; 7
 53c:	01 97       	sbiw	r24, 0x01	; 1
 53e:	f1 f7       	brne	.-4      	; 0x53c <H_LCD_void_Init+0x94>
 540:	00 c0       	rjmp	.+0      	; 0x542 <H_LCD_void_Init+0x9a>
 542:	00 00       	nop
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	0e 94 41 02 	call	0x482	; 0x482 <H_LCD_void_sendCommand>
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	0e 94 41 02 	call	0x482	; 0x482 <H_LCD_void_sendCommand>
 550:	8f e6       	ldi	r24, 0x6F	; 111
 552:	97 e1       	ldi	r25, 0x17	; 23
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	f1 f7       	brne	.-4      	; 0x554 <H_LCD_void_Init+0xac>
 558:	00 c0       	rjmp	.+0      	; 0x55a <H_LCD_void_Init+0xb2>
 55a:	00 00       	nop
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	0e 94 41 02 	call	0x482	; 0x482 <H_LCD_void_sendCommand>
 562:	86 e0       	ldi	r24, 0x06	; 6
 564:	0e 94 41 02 	call	0x482	; 0x482 <H_LCD_void_sendCommand>
 568:	08 95       	ret

0000056a <H_LCD_void_sendString>:
 56a:	0f 93       	push	r16
 56c:	1f 93       	push	r17
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	8c 01       	movw	r16, r24
 574:	c0 e0       	ldi	r28, 0x00	; 0
 576:	d0 e0       	ldi	r29, 0x00	; 0
 578:	03 c0       	rjmp	.+6      	; 0x580 <H_LCD_void_sendString+0x16>
 57a:	0e 94 2e 02 	call	0x45c	; 0x45c <H_LCD_void_sendData>
 57e:	21 96       	adiw	r28, 0x01	; 1
 580:	f8 01       	movw	r30, r16
 582:	ec 0f       	add	r30, r28
 584:	fd 1f       	adc	r31, r29
 586:	80 81       	ld	r24, Z
 588:	81 11       	cpse	r24, r1
 58a:	f7 cf       	rjmp	.-18     	; 0x57a <H_LCD_void_sendString+0x10>
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	1f 91       	pop	r17
 592:	0f 91       	pop	r16
 594:	08 95       	ret

00000596 <H_LCD_void_clear>:
	}
}

void H_LCD_void_clear(void)
{
	H_LCD_void_sendCommand(0x01);
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	0e 94 41 02 	call	0x482	; 0x482 <H_LCD_void_sendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 59c:	8f ec       	ldi	r24, 0xCF	; 207
 59e:	97 e0       	ldi	r25, 0x07	; 7
 5a0:	01 97       	sbiw	r24, 0x01	; 1
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <H_LCD_void_clear+0xa>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <H_LCD_void_clear+0x10>
 5a6:	00 00       	nop
 5a8:	08 95       	ret

000005aa <sevseg_init>:
#include <util/delay.h>
	
void sevseg_init(void)
{
	//set com as output for the four 7seg
	DIO_voidSetPinDirection(ptrA,2,1);
 5aa:	41 e0       	ldi	r20, 0x01	; 1
 5ac:	62 e0       	ldi	r22, 0x02	; 2
 5ae:	89 e3       	ldi	r24, 0x39	; 57
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrA,3,1);
 5b6:	41 e0       	ldi	r20, 0x01	; 1
 5b8:	63 e0       	ldi	r22, 0x03	; 3
 5ba:	89 e3       	ldi	r24, 0x39	; 57
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,5,1);
 5c2:	41 e0       	ldi	r20, 0x01	; 1
 5c4:	65 e0       	ldi	r22, 0x05	; 5
 5c6:	86 e3       	ldi	r24, 0x36	; 54
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,6,1);
 5ce:	41 e0       	ldi	r20, 0x01	; 1
 5d0:	66 e0       	ldi	r22, 0x06	; 6
 5d2:	86 e3       	ldi	r24, 0x36	; 54
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
	
    //enable only one 7seg
	DIO_voidSetPinValue(ptrA,2,1);
 5da:	41 e0       	ldi	r20, 0x01	; 1
 5dc:	62 e0       	ldi	r22, 0x02	; 2
 5de:	89 e3       	ldi	r24, 0x39	; 57
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ptrA,3,0);
 5e6:	40 e0       	ldi	r20, 0x00	; 0
 5e8:	63 e0       	ldi	r22, 0x03	; 3
 5ea:	89 e3       	ldi	r24, 0x39	; 57
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ptrB,5,1);
 5f2:	41 e0       	ldi	r20, 0x01	; 1
 5f4:	65 e0       	ldi	r22, 0x05	; 5
 5f6:	86 e3       	ldi	r24, 0x36	; 54
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ptrB,6,1);
 5fe:	41 e0       	ldi	r20, 0x01	; 1
 600:	66 e0       	ldi	r22, 0x06	; 6
 602:	86 e3       	ldi	r24, 0x36	; 54
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_voidSetPinValue>
	
	//set decoder pins as output
	DIO_voidSetPinDirection(ptrB,0,1);
 60a:	41 e0       	ldi	r20, 0x01	; 1
 60c:	60 e0       	ldi	r22, 0x00	; 0
 60e:	86 e3       	ldi	r24, 0x36	; 54
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,1,1);
 616:	41 e0       	ldi	r20, 0x01	; 1
 618:	61 e0       	ldi	r22, 0x01	; 1
 61a:	86 e3       	ldi	r24, 0x36	; 54
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,2,1);
 622:	41 e0       	ldi	r20, 0x01	; 1
 624:	62 e0       	ldi	r22, 0x02	; 2
 626:	86 e3       	ldi	r24, 0x36	; 54
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,4,1);
 62e:	41 e0       	ldi	r20, 0x01	; 1
 630:	64 e0       	ldi	r22, 0x04	; 4
 632:	86 e3       	ldi	r24, 0x36	; 54
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	0e 94 70 03 	call	0x6e0	; 0x6e0 <DIO_voidSetPinDirection>
 63a:	08 95       	ret

0000063c <main>:
	SET_BIT(ADCSRA,ADSC);
	
}
int main(void)
{
	H_LCD_void_Init();
 63c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <H_LCD_void_Init>
	sevseg_init();
 640:	0e 94 d5 02 	call	0x5aa	; 0x5aa <sevseg_init>
	keypad_init();
 644:	0e 94 4c 01 	call	0x298	; 0x298 <keypad_init>
	ADC_Init();
 648:	0e 94 34 03 	call	0x668	; 0x668 <ADC_Init>

	//H_LCD_void_gotoXY(0,6);


	    while (1) {
				H_LCD_void_clear();
 64c:	0e 94 cb 02 	call	0x596	; 0x596 <H_LCD_void_clear>
				app();
 650:	0e 94 26 01 	call	0x24c	; 0x24c <app>
 654:	2f ef       	ldi	r18, 0xFF	; 255
 656:	8d e3       	ldi	r24, 0x3D	; 61
 658:	99 e4       	ldi	r25, 0x49	; 73
 65a:	21 50       	subi	r18, 0x01	; 1
 65c:	80 40       	sbci	r24, 0x00	; 0
 65e:	90 40       	sbci	r25, 0x00	; 0
 660:	e1 f7       	brne	.-8      	; 0x65a <main+0x1e>
 662:	00 c0       	rjmp	.+0      	; 0x664 <main+0x28>
 664:	00 00       	nop
 666:	f2 cf       	rjmp	.-28     	; 0x64c <main+0x10>

00000668 <ADC_Init>:
{
	if (p!=0)
	{
		EXT_INT_ptr=p;
		//enable();
	SET_BIT(ADCSRA,ADSC);
 668:	86 b1       	in	r24, 0x06	; 6
 66a:	88 7f       	andi	r24, 0xF8	; 248
 66c:	86 b9       	out	0x06, r24	; 6
 66e:	86 b1       	in	r24, 0x06	; 6
 670:	87 60       	ori	r24, 0x07	; 7
 672:	86 b9       	out	0x06, r24	; 6
 674:	87 b1       	in	r24, 0x07	; 7
 676:	8f 73       	andi	r24, 0x3F	; 63
 678:	87 b9       	out	0x07, r24	; 7
 67a:	87 b1       	in	r24, 0x07	; 7
 67c:	80 6c       	ori	r24, 0xC0	; 192
 67e:	87 b9       	out	0x07, r24	; 7
 680:	87 b1       	in	r24, 0x07	; 7
 682:	8f 7d       	andi	r24, 0xDF	; 223
 684:	87 b9       	out	0x07, r24	; 7
 686:	86 b1       	in	r24, 0x06	; 6
 688:	80 68       	ori	r24, 0x80	; 128
 68a:	86 b9       	out	0x06, r24	; 6
 68c:	08 95       	ret

0000068e <__vector_16>:
	
	}

}
ISR(ADC_vect)
{
 68e:	1f 92       	push	r1
 690:	0f 92       	push	r0
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	0f 92       	push	r0
 696:	11 24       	eor	r1, r1
 698:	2f 93       	push	r18
 69a:	3f 93       	push	r19
 69c:	4f 93       	push	r20
 69e:	5f 93       	push	r21
 6a0:	6f 93       	push	r22
 6a2:	7f 93       	push	r23
 6a4:	8f 93       	push	r24
 6a6:	9f 93       	push	r25
 6a8:	af 93       	push	r26
 6aa:	bf 93       	push	r27
 6ac:	ef 93       	push	r30
 6ae:	ff 93       	push	r31
	if (EXT_INT_ptr!=0)
 6b0:	e0 91 ee 00 	lds	r30, 0x00EE	; 0x8000ee <__data_end>
 6b4:	f0 91 ef 00 	lds	r31, 0x00EF	; 0x8000ef <__data_end+0x1>
 6b8:	30 97       	sbiw	r30, 0x00	; 0
 6ba:	09 f0       	breq	.+2      	; 0x6be <__vector_16+0x30>
	{
		EXT_INT_ptr();
 6bc:	09 95       	icall
	}
	return;
}
 6be:	ff 91       	pop	r31
 6c0:	ef 91       	pop	r30
 6c2:	bf 91       	pop	r27
 6c4:	af 91       	pop	r26
 6c6:	9f 91       	pop	r25
 6c8:	8f 91       	pop	r24
 6ca:	7f 91       	pop	r23
 6cc:	6f 91       	pop	r22
 6ce:	5f 91       	pop	r21
 6d0:	4f 91       	pop	r20
 6d2:	3f 91       	pop	r19
 6d4:	2f 91       	pop	r18
 6d6:	0f 90       	pop	r0
 6d8:	0f be       	out	0x3f, r0	; 63
 6da:	0f 90       	pop	r0
 6dc:	1f 90       	pop	r1
 6de:	18 95       	reti

000006e0 <DIO_voidSetPinDirection>:
 */ 

#include "C:\Users\USER\Documents\NTI_AVR\NTI_AVR\MCAL\Dio.h"

void DIO_voidSetPinDirection(ports_t *ptr,unsigned char p,Direction dir )
{
 6e0:	0f 93       	push	r16
 6e2:	1f 93       	push	r17
	switch(p)
 6e4:	06 2f       	mov	r16, r22
 6e6:	10 e0       	ldi	r17, 0x00	; 0
 6e8:	08 30       	cpi	r16, 0x08	; 8
 6ea:	11 05       	cpc	r17, r1
 6ec:	a0 f5       	brcc	.+104    	; 0x756 <DIO_voidSetPinDirection+0x76>
 6ee:	f8 01       	movw	r30, r16
 6f0:	e6 5d       	subi	r30, 0xD6	; 214
 6f2:	ff 4f       	sbci	r31, 0xFF	; 255
 6f4:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__tablejump2__>
	{
		case 0: ptr->DDR.PIN0=dir; break;
 6f8:	fc 01       	movw	r30, r24
 6fa:	21 81       	ldd	r18, Z+1	; 0x01
 6fc:	40 fb       	bst	r20, 0
 6fe:	20 f9       	bld	r18, 0
 700:	21 83       	std	Z+1, r18	; 0x01
 702:	29 c0       	rjmp	.+82     	; 0x756 <DIO_voidSetPinDirection+0x76>
		case 1: ptr->DDR.PIN1=dir; break;
 704:	fc 01       	movw	r30, r24
 706:	21 81       	ldd	r18, Z+1	; 0x01
 708:	40 fb       	bst	r20, 0
 70a:	21 f9       	bld	r18, 1
 70c:	21 83       	std	Z+1, r18	; 0x01
 70e:	23 c0       	rjmp	.+70     	; 0x756 <DIO_voidSetPinDirection+0x76>
		case 2: ptr->DDR.PIN2=dir; break;
 710:	fc 01       	movw	r30, r24
 712:	21 81       	ldd	r18, Z+1	; 0x01
 714:	40 fb       	bst	r20, 0
 716:	22 f9       	bld	r18, 2
 718:	21 83       	std	Z+1, r18	; 0x01
 71a:	1d c0       	rjmp	.+58     	; 0x756 <DIO_voidSetPinDirection+0x76>
		case 3: ptr->DDR.PIN3=dir; break;
 71c:	fc 01       	movw	r30, r24
 71e:	21 81       	ldd	r18, Z+1	; 0x01
 720:	40 fb       	bst	r20, 0
 722:	23 f9       	bld	r18, 3
 724:	21 83       	std	Z+1, r18	; 0x01
 726:	17 c0       	rjmp	.+46     	; 0x756 <DIO_voidSetPinDirection+0x76>
		case 4: ptr->DDR.PIN4=dir; break;
 728:	fc 01       	movw	r30, r24
 72a:	21 81       	ldd	r18, Z+1	; 0x01
 72c:	40 fb       	bst	r20, 0
 72e:	24 f9       	bld	r18, 4
 730:	21 83       	std	Z+1, r18	; 0x01
 732:	11 c0       	rjmp	.+34     	; 0x756 <DIO_voidSetPinDirection+0x76>
		case 5: ptr->DDR.PIN5=dir; break;
 734:	fc 01       	movw	r30, r24
 736:	21 81       	ldd	r18, Z+1	; 0x01
 738:	40 fb       	bst	r20, 0
 73a:	25 f9       	bld	r18, 5
 73c:	21 83       	std	Z+1, r18	; 0x01
 73e:	0b c0       	rjmp	.+22     	; 0x756 <DIO_voidSetPinDirection+0x76>
		case 6: ptr->DDR.PIN6=dir; break;
 740:	fc 01       	movw	r30, r24
 742:	21 81       	ldd	r18, Z+1	; 0x01
 744:	40 fb       	bst	r20, 0
 746:	26 f9       	bld	r18, 6
 748:	21 83       	std	Z+1, r18	; 0x01
 74a:	05 c0       	rjmp	.+10     	; 0x756 <DIO_voidSetPinDirection+0x76>
		case 7: ptr->DDR.PIN7=dir; break;
 74c:	fc 01       	movw	r30, r24
 74e:	21 81       	ldd	r18, Z+1	; 0x01
 750:	40 fb       	bst	r20, 0
 752:	27 f9       	bld	r18, 7
 754:	21 83       	std	Z+1, r18	; 0x01
	}
}
 756:	1f 91       	pop	r17
 758:	0f 91       	pop	r16
 75a:	08 95       	ret

0000075c <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(ports_t *ptr,unsigned char p,Value val)
{
 75c:	0f 93       	push	r16
 75e:	1f 93       	push	r17
	switch(p)
 760:	06 2f       	mov	r16, r22
 762:	10 e0       	ldi	r17, 0x00	; 0
 764:	08 30       	cpi	r16, 0x08	; 8
 766:	11 05       	cpc	r17, r1
 768:	a0 f5       	brcc	.+104    	; 0x7d2 <DIO_voidSetPinValue+0x76>
 76a:	f8 01       	movw	r30, r16
 76c:	ee 5c       	subi	r30, 0xCE	; 206
 76e:	ff 4f       	sbci	r31, 0xFF	; 255
 770:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__tablejump2__>
	{
		case 0: ptr->port.PIN0=val; break;
 774:	fc 01       	movw	r30, r24
 776:	22 81       	ldd	r18, Z+2	; 0x02
 778:	40 fb       	bst	r20, 0
 77a:	20 f9       	bld	r18, 0
 77c:	22 83       	std	Z+2, r18	; 0x02
 77e:	29 c0       	rjmp	.+82     	; 0x7d2 <DIO_voidSetPinValue+0x76>
		case 1: ptr->port.PIN1=val; break;
 780:	fc 01       	movw	r30, r24
 782:	22 81       	ldd	r18, Z+2	; 0x02
 784:	40 fb       	bst	r20, 0
 786:	21 f9       	bld	r18, 1
 788:	22 83       	std	Z+2, r18	; 0x02
 78a:	23 c0       	rjmp	.+70     	; 0x7d2 <DIO_voidSetPinValue+0x76>
		case 2: ptr->port.PIN2=val; break;
 78c:	fc 01       	movw	r30, r24
 78e:	22 81       	ldd	r18, Z+2	; 0x02
 790:	40 fb       	bst	r20, 0
 792:	22 f9       	bld	r18, 2
 794:	22 83       	std	Z+2, r18	; 0x02
 796:	1d c0       	rjmp	.+58     	; 0x7d2 <DIO_voidSetPinValue+0x76>
		case 3: ptr->port.PIN3=val; break;
 798:	fc 01       	movw	r30, r24
 79a:	22 81       	ldd	r18, Z+2	; 0x02
 79c:	40 fb       	bst	r20, 0
 79e:	23 f9       	bld	r18, 3
 7a0:	22 83       	std	Z+2, r18	; 0x02
 7a2:	17 c0       	rjmp	.+46     	; 0x7d2 <DIO_voidSetPinValue+0x76>
		case 4: ptr->port.PIN4=val; break;
 7a4:	fc 01       	movw	r30, r24
 7a6:	22 81       	ldd	r18, Z+2	; 0x02
 7a8:	40 fb       	bst	r20, 0
 7aa:	24 f9       	bld	r18, 4
 7ac:	22 83       	std	Z+2, r18	; 0x02
 7ae:	11 c0       	rjmp	.+34     	; 0x7d2 <DIO_voidSetPinValue+0x76>
		case 5: ptr->port.PIN5=val; break;
 7b0:	fc 01       	movw	r30, r24
 7b2:	22 81       	ldd	r18, Z+2	; 0x02
 7b4:	40 fb       	bst	r20, 0
 7b6:	25 f9       	bld	r18, 5
 7b8:	22 83       	std	Z+2, r18	; 0x02
 7ba:	0b c0       	rjmp	.+22     	; 0x7d2 <DIO_voidSetPinValue+0x76>
		case 6: ptr->port.PIN6=val; break;
 7bc:	fc 01       	movw	r30, r24
 7be:	22 81       	ldd	r18, Z+2	; 0x02
 7c0:	40 fb       	bst	r20, 0
 7c2:	26 f9       	bld	r18, 6
 7c4:	22 83       	std	Z+2, r18	; 0x02
 7c6:	05 c0       	rjmp	.+10     	; 0x7d2 <DIO_voidSetPinValue+0x76>
		case 7: ptr->port.PIN7=val; break;
 7c8:	fc 01       	movw	r30, r24
 7ca:	22 81       	ldd	r18, Z+2	; 0x02
 7cc:	40 fb       	bst	r20, 0
 7ce:	27 f9       	bld	r18, 7
 7d0:	22 83       	std	Z+2, r18	; 0x02
	}
}
 7d2:	1f 91       	pop	r17
 7d4:	0f 91       	pop	r16
 7d6:	08 95       	ret

000007d8 <DIO_GetPinValue>:
Value DIO_GetPinValue(ports_t *ptr,unsigned char p)
{
	Value val;
	switch(p)
 7d8:	46 2f       	mov	r20, r22
 7da:	50 e0       	ldi	r21, 0x00	; 0
 7dc:	48 30       	cpi	r20, 0x08	; 8
 7de:	51 05       	cpc	r21, r1
 7e0:	80 f5       	brcc	.+96     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 7e2:	fa 01       	movw	r30, r20
 7e4:	e6 5c       	subi	r30, 0xC6	; 198
 7e6:	ff 4f       	sbci	r31, 0xFF	; 255
 7e8:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__tablejump2__>
	{
		case 0: val=ptr->pin.PIN0; break;
 7ec:	fc 01       	movw	r30, r24
 7ee:	20 81       	ld	r18, Z
 7f0:	21 70       	andi	r18, 0x01	; 1
 7f2:	27 c0       	rjmp	.+78     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
		case 1: val=ptr->pin.PIN1; break;
 7f4:	fc 01       	movw	r30, r24
 7f6:	20 81       	ld	r18, Z
 7f8:	26 95       	lsr	r18
 7fa:	21 70       	andi	r18, 0x01	; 1
 7fc:	22 c0       	rjmp	.+68     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
		case 2: val=ptr->pin.PIN2; break;
 7fe:	fc 01       	movw	r30, r24
 800:	20 81       	ld	r18, Z
 802:	22 fb       	bst	r18, 2
 804:	22 27       	eor	r18, r18
 806:	20 f9       	bld	r18, 0
 808:	1c c0       	rjmp	.+56     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
		case 3: val=ptr->pin.PIN3; break;
 80a:	fc 01       	movw	r30, r24
 80c:	20 81       	ld	r18, Z
 80e:	23 fb       	bst	r18, 3
 810:	22 27       	eor	r18, r18
 812:	20 f9       	bld	r18, 0
 814:	16 c0       	rjmp	.+44     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
		case 4: val=ptr->pin.PIN4; break;
 816:	fc 01       	movw	r30, r24
 818:	20 81       	ld	r18, Z
 81a:	22 95       	swap	r18
 81c:	21 70       	andi	r18, 0x01	; 1
 81e:	11 c0       	rjmp	.+34     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
		case 5: val=ptr->pin.PIN5; break;
 820:	fc 01       	movw	r30, r24
 822:	20 81       	ld	r18, Z
 824:	25 fb       	bst	r18, 5
 826:	22 27       	eor	r18, r18
 828:	20 f9       	bld	r18, 0
 82a:	0b c0       	rjmp	.+22     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
		case 6: val=ptr->pin.PIN6; break;
 82c:	fc 01       	movw	r30, r24
 82e:	20 81       	ld	r18, Z
 830:	26 fb       	bst	r18, 6
 832:	22 27       	eor	r18, r18
 834:	20 f9       	bld	r18, 0
 836:	05 c0       	rjmp	.+10     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
		case 7: val=ptr->pin.PIN7; break;
 838:	fc 01       	movw	r30, r24
 83a:	20 81       	ld	r18, Z
 83c:	27 fb       	bst	r18, 7
 83e:	22 27       	eor	r18, r18
 840:	20 f9       	bld	r18, 0
	}
	return val;
	
}
 842:	82 2f       	mov	r24, r18
 844:	08 95       	ret

00000846 <__vector_1>:
	}
	
}

ISR(INT0_vect)
{
 846:	1f 92       	push	r1
 848:	0f 92       	push	r0
 84a:	0f b6       	in	r0, 0x3f	; 63
 84c:	0f 92       	push	r0
 84e:	11 24       	eor	r1, r1
 850:	2f 93       	push	r18
 852:	3f 93       	push	r19
 854:	4f 93       	push	r20
 856:	5f 93       	push	r21
 858:	6f 93       	push	r22
 85a:	7f 93       	push	r23
 85c:	8f 93       	push	r24
 85e:	9f 93       	push	r25
 860:	af 93       	push	r26
 862:	bf 93       	push	r27
 864:	ef 93       	push	r30
 866:	ff 93       	push	r31
	if (p_NTI[0]!=0)
 868:	e0 91 f0 00 	lds	r30, 0x00F0	; 0x8000f0 <p_NTI>
 86c:	f0 91 f1 00 	lds	r31, 0x00F1	; 0x8000f1 <p_NTI+0x1>
 870:	30 97       	sbiw	r30, 0x00	; 0
 872:	09 f0       	breq	.+2      	; 0x876 <__stack+0x17>
	{
		p_NTI[0]();
 874:	09 95       	icall
	}
	return;
}
 876:	ff 91       	pop	r31
 878:	ef 91       	pop	r30
 87a:	bf 91       	pop	r27
 87c:	af 91       	pop	r26
 87e:	9f 91       	pop	r25
 880:	8f 91       	pop	r24
 882:	7f 91       	pop	r23
 884:	6f 91       	pop	r22
 886:	5f 91       	pop	r21
 888:	4f 91       	pop	r20
 88a:	3f 91       	pop	r19
 88c:	2f 91       	pop	r18
 88e:	0f 90       	pop	r0
 890:	0f be       	out	0x3f, r0	; 63
 892:	0f 90       	pop	r0
 894:	1f 90       	pop	r1
 896:	18 95       	reti

00000898 <__vector_2>:

ISR(INT1_vect)
{
 898:	1f 92       	push	r1
 89a:	0f 92       	push	r0
 89c:	0f b6       	in	r0, 0x3f	; 63
 89e:	0f 92       	push	r0
 8a0:	11 24       	eor	r1, r1
 8a2:	2f 93       	push	r18
 8a4:	3f 93       	push	r19
 8a6:	4f 93       	push	r20
 8a8:	5f 93       	push	r21
 8aa:	6f 93       	push	r22
 8ac:	7f 93       	push	r23
 8ae:	8f 93       	push	r24
 8b0:	9f 93       	push	r25
 8b2:	af 93       	push	r26
 8b4:	bf 93       	push	r27
 8b6:	ef 93       	push	r30
 8b8:	ff 93       	push	r31
	if (p_NTI[1]!=0)
 8ba:	e0 91 f2 00 	lds	r30, 0x00F2	; 0x8000f2 <p_NTI+0x2>
 8be:	f0 91 f3 00 	lds	r31, 0x00F3	; 0x8000f3 <p_NTI+0x3>
 8c2:	30 97       	sbiw	r30, 0x00	; 0
 8c4:	09 f0       	breq	.+2      	; 0x8c8 <__vector_2+0x30>
	{
		p_NTI[1]();
 8c6:	09 95       	icall
	}
	return;
}
 8c8:	ff 91       	pop	r31
 8ca:	ef 91       	pop	r30
 8cc:	bf 91       	pop	r27
 8ce:	af 91       	pop	r26
 8d0:	9f 91       	pop	r25
 8d2:	8f 91       	pop	r24
 8d4:	7f 91       	pop	r23
 8d6:	6f 91       	pop	r22
 8d8:	5f 91       	pop	r21
 8da:	4f 91       	pop	r20
 8dc:	3f 91       	pop	r19
 8de:	2f 91       	pop	r18
 8e0:	0f 90       	pop	r0
 8e2:	0f be       	out	0x3f, r0	; 63
 8e4:	0f 90       	pop	r0
 8e6:	1f 90       	pop	r1
 8e8:	18 95       	reti

000008ea <__vector_3>:

ISR(INT2_vect)
{
 8ea:	1f 92       	push	r1
 8ec:	0f 92       	push	r0
 8ee:	0f b6       	in	r0, 0x3f	; 63
 8f0:	0f 92       	push	r0
 8f2:	11 24       	eor	r1, r1
 8f4:	2f 93       	push	r18
 8f6:	3f 93       	push	r19
 8f8:	4f 93       	push	r20
 8fa:	5f 93       	push	r21
 8fc:	6f 93       	push	r22
 8fe:	7f 93       	push	r23
 900:	8f 93       	push	r24
 902:	9f 93       	push	r25
 904:	af 93       	push	r26
 906:	bf 93       	push	r27
 908:	ef 93       	push	r30
 90a:	ff 93       	push	r31
	if (p_NTI[2]!=0) 
 90c:	e0 91 f4 00 	lds	r30, 0x00F4	; 0x8000f4 <p_NTI+0x4>
 910:	f0 91 f5 00 	lds	r31, 0x00F5	; 0x8000f5 <p_NTI+0x5>
 914:	30 97       	sbiw	r30, 0x00	; 0
 916:	09 f0       	breq	.+2      	; 0x91a <__vector_3+0x30>
	{
		p_NTI[2]();
 918:	09 95       	icall
	}
	return;
 91a:	ff 91       	pop	r31
 91c:	ef 91       	pop	r30
 91e:	bf 91       	pop	r27
 920:	af 91       	pop	r26
 922:	9f 91       	pop	r25
 924:	8f 91       	pop	r24
 926:	7f 91       	pop	r23
 928:	6f 91       	pop	r22
 92a:	5f 91       	pop	r21
 92c:	4f 91       	pop	r20
 92e:	3f 91       	pop	r19
 930:	2f 91       	pop	r18
 932:	0f 90       	pop	r0
 934:	0f be       	out	0x3f, r0	; 63
 936:	0f 90       	pop	r0
 938:	1f 90       	pop	r1
 93a:	18 95       	reti

0000093c <__tablejump2__>:
 93c:	ee 0f       	add	r30, r30
 93e:	ff 1f       	adc	r31, r31
 940:	05 90       	lpm	r0, Z+
 942:	f4 91       	lpm	r31, Z
 944:	e0 2d       	mov	r30, r0
 946:	09 94       	ijmp

00000948 <_exit>:
 948:	f8 94       	cli

0000094a <__stop_program>:
 94a:	ff cf       	rjmp	.-2      	; 0x94a <__stop_program>
