
NTI_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000008a0  00000934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800064  00800064  00000938  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000968  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003881  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001249  00000000  00000000  000045cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e13  00000000  00000000  00005816  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b30  00000000  00000000  0000762c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001102  00000000  00000000  0000815c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002480  00000000  00000000  0000925e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  0000b6de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 85 02 	jmp	0x50a	; 0x50a <__vector_1>
   8:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_2>
   c:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__vector_3>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__vector_6>
  1c:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__vector_7>
  20:	0c 94 a4 03 	jmp	0x748	; 0x748 <__vector_8>
  24:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__vector_9>
  28:	0c 94 29 03 	jmp	0x652	; 0x652 <__vector_10>
  2c:	0c 94 00 03 	jmp	0x600	; 0x600 <__vector_11>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__vector_13>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__vector_15>
  40:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_16>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	15 02       	muls	r17, r21
  56:	1b 02       	muls	r17, r27
  58:	21 02       	muls	r18, r17
  5a:	27 02       	muls	r18, r23
  5c:	2d 02       	muls	r18, r29
  5e:	33 02       	muls	r19, r19
  60:	39 02       	muls	r19, r25
  62:	3f 02       	muls	r19, r31
  64:	53 02       	muls	r21, r19
  66:	59 02       	muls	r21, r25
  68:	5f 02       	muls	r21, r31
  6a:	65 02       	muls	r22, r21
  6c:	6b 02       	muls	r22, r27
  6e:	71 02       	muls	r23, r17
  70:	77 02       	muls	r23, r23
  72:	7d 02       	muls	r23, r29

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e0 ea       	ldi	r30, 0xA0	; 160
  88:	f8 e0       	ldi	r31, 0x08	; 8
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a4 36       	cpi	r26, 0x64	; 100
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	a4 e6       	ldi	r26, 0x64	; 100
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	ac 37       	cpi	r26, 0x7C	; 124
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 c5 01 	call	0x38a	; 0x38a <main>
  aa:	0c 94 4e 04 	jmp	0x89c	; 0x89c <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <sevseg_init>:
#include <util/delay.h>
	
void sevseg_init(void)
{
	//set com as output for the four 7seg
	DIO_voidSetPinDirection(ptrA,2,1);
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	62 e0       	ldi	r22, 0x02	; 2
  b6:	89 e3       	ldi	r24, 0x39	; 57
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrA,3,1);
  be:	41 e0       	ldi	r20, 0x01	; 1
  c0:	63 e0       	ldi	r22, 0x03	; 3
  c2:	89 e3       	ldi	r24, 0x39	; 57
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,5,1);
  ca:	41 e0       	ldi	r20, 0x01	; 1
  cc:	65 e0       	ldi	r22, 0x05	; 5
  ce:	86 e3       	ldi	r24, 0x36	; 54
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,6,1);
  d6:	41 e0       	ldi	r20, 0x01	; 1
  d8:	66 e0       	ldi	r22, 0x06	; 6
  da:	86 e3       	ldi	r24, 0x36	; 54
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
	
    //enable only one 7seg
	DIO_voidSetPinValue(ptrA,2,1);
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	62 e0       	ldi	r22, 0x02	; 2
  e6:	89 e3       	ldi	r24, 0x39	; 57
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ptrA,3,0);
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	63 e0       	ldi	r22, 0x03	; 3
  f2:	89 e3       	ldi	r24, 0x39	; 57
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ptrB,5,1);
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	65 e0       	ldi	r22, 0x05	; 5
  fe:	86 e3       	ldi	r24, 0x36	; 54
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ptrB,6,1);
 106:	41 e0       	ldi	r20, 0x01	; 1
 108:	66 e0       	ldi	r22, 0x06	; 6
 10a:	86 e3       	ldi	r24, 0x36	; 54
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_voidSetPinValue>
	
	//set decoder pins as output
	DIO_voidSetPinDirection(ptrB,0,1);
 112:	41 e0       	ldi	r20, 0x01	; 1
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	86 e3       	ldi	r24, 0x36	; 54
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,1,1);
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	86 e3       	ldi	r24, 0x36	; 54
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,2,1);
 12a:	41 e0       	ldi	r20, 0x01	; 1
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	86 e3       	ldi	r24, 0x36	; 54
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ptrB,4,1);
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	64 e0       	ldi	r22, 0x04	; 4
 13a:	86 e3       	ldi	r24, 0x36	; 54
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
 142:	08 95       	ret

00000144 <keypad_init>:
{'M','N','O','S'}
};
void keypad_init (void)
{
	//set output pins rows
	DIO_voidSetPinDirection(PORT_OUT,FIRST_OUTPUT,OUTPUT);
 144:	41 e0       	ldi	r20, 0x01	; 1
 146:	64 e0       	ldi	r22, 0x04	; 4
 148:	86 e3       	ldi	r24, 0x36	; 54
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_OUT,SECOND_OUTPUT,OUTPUT);
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	65 e0       	ldi	r22, 0x05	; 5
 154:	86 e3       	ldi	r24, 0x36	; 54
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_OUT,THIRD_OUTPUT,OUTPUT);
 15c:	41 e0       	ldi	r20, 0x01	; 1
 15e:	66 e0       	ldi	r22, 0x06	; 6
 160:	86 e3       	ldi	r24, 0x36	; 54
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_OUT,FORTH_OUTPUT,OUTPUT);
 168:	41 e0       	ldi	r20, 0x01	; 1
 16a:	67 e0       	ldi	r22, 0x07	; 7
 16c:	86 e3       	ldi	r24, 0x36	; 54
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
	//set input pins cols
	DIO_voidSetPinDirection(PORT_IN,FIRST_INPUT,INPUT);
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	62 e0       	ldi	r22, 0x02	; 2
 178:	80 e3       	ldi	r24, 0x30	; 48
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_IN,SECOND_INPUT,INPUT);
 180:	40 e0       	ldi	r20, 0x00	; 0
 182:	63 e0       	ldi	r22, 0x03	; 3
 184:	80 e3       	ldi	r24, 0x30	; 48
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_IN,THIRD_INPUT,INPUT);
 18c:	40 e0       	ldi	r20, 0x00	; 0
 18e:	64 e0       	ldi	r22, 0x04	; 4
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_IN,FORTH_INPUT,INPUT);
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	65 e0       	ldi	r22, 0x05	; 5
 19c:	80 e3       	ldi	r24, 0x30	; 48
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
	//set output as high
	DIO_voidSetPinValue(PORT_OUT,FIRST_OUTPUT,HIGH);
 1a4:	41 e0       	ldi	r20, 0x01	; 1
 1a6:	64 e0       	ldi	r22, 0x04	; 4
 1a8:	86 e3       	ldi	r24, 0x36	; 54
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_OUT,SECOND_OUTPUT,HIGH);
 1b0:	41 e0       	ldi	r20, 0x01	; 1
 1b2:	65 e0       	ldi	r22, 0x05	; 5
 1b4:	86 e3       	ldi	r24, 0x36	; 54
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_OUT,SECOND_OUTPUT,HIGH);
 1bc:	41 e0       	ldi	r20, 0x01	; 1
 1be:	65 e0       	ldi	r22, 0x05	; 5
 1c0:	86 e3       	ldi	r24, 0x36	; 54
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_OUT,SECOND_OUTPUT,HIGH);
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	65 e0       	ldi	r22, 0x05	; 5
 1cc:	86 e3       	ldi	r24, 0x36	; 54
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_voidSetPinValue>
	//set input as high for pullup must in proteus
	DIO_voidSetPinValue(PORT_IN,FIRST_INPUT,HIGH);
 1d4:	41 e0       	ldi	r20, 0x01	; 1
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	80 e3       	ldi	r24, 0x30	; 48
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_IN,SECOND_INPUT,HIGH);
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	63 e0       	ldi	r22, 0x03	; 3
 1e4:	80 e3       	ldi	r24, 0x30	; 48
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_IN,THIRD_INPUT,HIGH);
 1ec:	41 e0       	ldi	r20, 0x01	; 1
 1ee:	64 e0       	ldi	r22, 0x04	; 4
 1f0:	80 e3       	ldi	r24, 0x30	; 48
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_IN,FORTH_INPUT,HIGH);;
 1f8:	41 e0       	ldi	r20, 0x01	; 1
 1fa:	65 e0       	ldi	r22, 0x05	; 5
 1fc:	80 e3       	ldi	r24, 0x30	; 48
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_voidSetPinValue>
 204:	08 95       	ret

00000206 <H_LCD_void_latchByte>:
void H_LCD_void_sendData(u8 copy_u8data )
{
	DIO_voidSetPinValue(RS_PORT,RS,HIGH);
	H_LCD_void_latchByte(copy_u8data);
	_delay_ms(1);
}
 206:	df 92       	push	r13
 208:	ef 92       	push	r14
 20a:	ff 92       	push	r15
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	d8 2e       	mov	r13, r24
 216:	e1 2c       	mov	r14, r1
 218:	f1 2c       	mov	r15, r1
 21a:	07 e0       	ldi	r16, 0x07	; 7
 21c:	10 e0       	ldi	r17, 0x00	; 0
 21e:	35 c0       	rjmp	.+106    	; 0x28a <H_LCD_void_latchByte+0x84>
 220:	4d 2d       	mov	r20, r13
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	00 2e       	mov	r0, r16
 226:	02 c0       	rjmp	.+4      	; 0x22c <H_LCD_void_latchByte+0x26>
 228:	55 95       	asr	r21
 22a:	47 95       	ror	r20
 22c:	0a 94       	dec	r0
 22e:	e2 f7       	brpl	.-8      	; 0x228 <H_LCD_void_latchByte+0x22>
 230:	41 70       	andi	r20, 0x01	; 1
 232:	fe 01       	movw	r30, r28
 234:	e0 5a       	subi	r30, 0xA0	; 160
 236:	ff 4f       	sbci	r31, 0xFF	; 255
 238:	60 81       	ld	r22, Z
 23a:	89 e3       	ldi	r24, 0x39	; 57
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_voidSetPinValue>
 242:	01 50       	subi	r16, 0x01	; 1
 244:	11 09       	sbc	r17, r1
 246:	21 96       	adiw	r28, 0x01	; 1
 248:	02 c0       	rjmp	.+4      	; 0x24e <H_LCD_void_latchByte+0x48>
 24a:	c0 e0       	ldi	r28, 0x00	; 0
 24c:	d0 e0       	ldi	r29, 0x00	; 0
 24e:	c4 30       	cpi	r28, 0x04	; 4
 250:	d1 05       	cpc	r29, r1
 252:	34 f3       	brlt	.-52     	; 0x220 <H_LCD_void_latchByte+0x1a>
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	62 e0       	ldi	r22, 0x02	; 2
 258:	89 e3       	ldi	r24, 0x39	; 57
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_voidSetPinValue>
 260:	8f e0       	ldi	r24, 0x0F	; 15
 262:	97 e2       	ldi	r25, 0x27	; 39
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <H_LCD_void_latchByte+0x5e>
 268:	00 c0       	rjmp	.+0      	; 0x26a <H_LCD_void_latchByte+0x64>
 26a:	00 00       	nop
 26c:	40 e0       	ldi	r20, 0x00	; 0
 26e:	62 e0       	ldi	r22, 0x02	; 2
 270:	89 e3       	ldi	r24, 0x39	; 57
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_voidSetPinValue>
 278:	8f e0       	ldi	r24, 0x0F	; 15
 27a:	97 e2       	ldi	r25, 0x27	; 39
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <H_LCD_void_latchByte+0x76>
 280:	00 c0       	rjmp	.+0      	; 0x282 <H_LCD_void_latchByte+0x7c>
 282:	00 00       	nop
 284:	9f ef       	ldi	r25, 0xFF	; 255
 286:	e9 1a       	sub	r14, r25
 288:	f9 0a       	sbc	r15, r25
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	e8 16       	cp	r14, r24
 28e:	f1 04       	cpc	r15, r1
 290:	e4 f2       	brlt	.-72     	; 0x24a <H_LCD_void_latchByte+0x44>
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	ff 90       	pop	r15
 29c:	ef 90       	pop	r14
 29e:	df 90       	pop	r13
 2a0:	08 95       	ret

000002a2 <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8command)
{
 2a2:	cf 93       	push	r28
 2a4:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue(RS_PORT,RS,LOW);
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	89 e3       	ldi	r24, 0x39	; 57
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_voidSetPinValue>
	H_LCD_void_latchByte(copy_u8command);
 2b2:	8c 2f       	mov	r24, r28
 2b4:	0e 94 03 01 	call	0x206	; 0x206 <H_LCD_void_latchByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b8:	8f ec       	ldi	r24, 0xCF	; 207
 2ba:	97 e0       	ldi	r25, 0x07	; 7
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <H_LCD_void_sendCommand+0x1a>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <H_LCD_void_sendCommand+0x20>
 2c2:	00 00       	nop
	_delay_ms(1);
}
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <H_LCD_void_Init>:

u8 LCD_pins[4]={D7,D6,D5,D4};
	
void H_LCD_void_Init(void)
{
	DIO_voidSetPinDirection(RS_PORT,RS,OUTPUT);
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	89 e3       	ldi	r24, 0x39	; 57
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(EN_PORT,EN,OUTPUT);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	62 e0       	ldi	r22, 0x02	; 2
 2d8:	89 e3       	ldi	r24, 0x39	; 57
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PINS_PORT,D4,OUTPUT);
 2e0:	41 e0       	ldi	r20, 0x01	; 1
 2e2:	63 e0       	ldi	r22, 0x03	; 3
 2e4:	89 e3       	ldi	r24, 0x39	; 57
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PINS_PORT,D5,OUTPUT);
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	64 e0       	ldi	r22, 0x04	; 4
 2f0:	89 e3       	ldi	r24, 0x39	; 57
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PINS_PORT,D6,OUTPUT);
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	65 e0       	ldi	r22, 0x05	; 5
 2fc:	89 e3       	ldi	r24, 0x39	; 57
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PINS_PORT,D7,OUTPUT);
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	66 e0       	ldi	r22, 0x06	; 6
 308:	89 e3       	ldi	r24, 0x39	; 57
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 09 02 	call	0x412	; 0x412 <DIO_voidSetPinDirection>
 310:	2f e7       	ldi	r18, 0x7F	; 127
 312:	88 e3       	ldi	r24, 0x38	; 56
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	21 50       	subi	r18, 0x01	; 1
 318:	80 40       	sbci	r24, 0x00	; 0
 31a:	90 40       	sbci	r25, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <H_LCD_void_Init+0x4e>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <H_LCD_void_Init+0x58>
 320:	00 00       	nop
	
	_delay_ms(50);
   DIO_voidSetPinValue(RS_PORT,RS,LOW);
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	89 e3       	ldi	r24, 0x39	; 57
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 47 02 	call	0x48e	; 0x48e <DIO_voidSetPinValue>
	H_LCD_void_sendCommand(0x02);
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	0e 94 51 01 	call	0x2a2	; 0x2a2 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x02);
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	0e 94 51 01 	call	0x2a2	; 0x2a2 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x28); //08
 33a:	88 e2       	ldi	r24, 0x28	; 40
 33c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <H_LCD_void_sendCommand>
 340:	8f ec       	ldi	r24, 0xCF	; 207
 342:	97 e0       	ldi	r25, 0x07	; 7
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <H_LCD_void_Init+0x7c>
 348:	00 c0       	rjmp	.+0      	; 0x34a <H_LCD_void_Init+0x82>
 34a:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(0x00);
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x0C);//display on off 0E
 352:	8c e0       	ldi	r24, 0x0C	; 12
 354:	0e 94 51 01 	call	0x2a2	; 0x2a2 <H_LCD_void_sendCommand>
 358:	8f ec       	ldi	r24, 0xCF	; 207
 35a:	97 e0       	ldi	r25, 0x07	; 7
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <H_LCD_void_Init+0x94>
 360:	00 c0       	rjmp	.+0      	; 0x362 <H_LCD_void_Init+0x9a>
 362:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(0x00);
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	0e 94 51 01 	call	0x2a2	; 0x2a2 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x01);
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <H_LCD_void_sendCommand>
 370:	8f e6       	ldi	r24, 0x6F	; 111
 372:	97 e1       	ldi	r25, 0x17	; 23
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <H_LCD_void_Init+0xac>
 378:	00 c0       	rjmp	.+0      	; 0x37a <H_LCD_void_Init+0xb2>
 37a:	00 00       	nop
	_delay_ms(3);
	H_LCD_void_sendCommand(0x00);
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x06);
 382:	86 e0       	ldi	r24, 0x06	; 6
 384:	0e 94 51 01 	call	0x2a2	; 0x2a2 <H_LCD_void_sendCommand>
 388:	08 95       	ret

0000038a <main>:
}


int main(void)
{
	H_LCD_void_Init();
 38a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <H_LCD_void_Init>
	sevseg_init();
 38e:	0e 94 59 00 	call	0xb2	; 0xb2 <sevseg_init>
	keypad_init();
 392:	0e 94 a2 00 	call	0x144	; 0x144 <keypad_init>
	ADC_Init();
 396:	0e 94 ce 01 	call	0x39c	; 0x39c <ADC_Init>
 39a:	ff cf       	rjmp	.-2      	; 0x39a <main+0x10>

0000039c <ADC_Init>:
	//set call back pointer
	if (p!= 0) EXT_INT_ptr=p;
	//enable interrupt
	SET_BIT(ADCSRA,ADIE);
	//start conversion
	SET_BIT(ADCSRA,ADSC);
 39c:	86 b1       	in	r24, 0x06	; 6
 39e:	88 7f       	andi	r24, 0xF8	; 248
 3a0:	86 b9       	out	0x06, r24	; 6
 3a2:	86 b1       	in	r24, 0x06	; 6
 3a4:	83 60       	ori	r24, 0x03	; 3
 3a6:	86 b9       	out	0x06, r24	; 6
 3a8:	87 b1       	in	r24, 0x07	; 7
 3aa:	8f 73       	andi	r24, 0x3F	; 63
 3ac:	87 b9       	out	0x07, r24	; 7
 3ae:	87 b1       	in	r24, 0x07	; 7
 3b0:	87 b9       	out	0x07, r24	; 7
 3b2:	87 b1       	in	r24, 0x07	; 7
 3b4:	8f 7d       	andi	r24, 0xDF	; 223
 3b6:	87 b9       	out	0x07, r24	; 7
 3b8:	86 b1       	in	r24, 0x06	; 6
 3ba:	80 68       	ori	r24, 0x80	; 128
 3bc:	86 b9       	out	0x06, r24	; 6
 3be:	08 95       	ret

000003c0 <__vector_16>:
	
}

ISR(ADC_vect)
{
 3c0:	1f 92       	push	r1
 3c2:	0f 92       	push	r0
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	0f 92       	push	r0
 3c8:	11 24       	eor	r1, r1
 3ca:	2f 93       	push	r18
 3cc:	3f 93       	push	r19
 3ce:	4f 93       	push	r20
 3d0:	5f 93       	push	r21
 3d2:	6f 93       	push	r22
 3d4:	7f 93       	push	r23
 3d6:	8f 93       	push	r24
 3d8:	9f 93       	push	r25
 3da:	af 93       	push	r26
 3dc:	bf 93       	push	r27
 3de:	ef 93       	push	r30
 3e0:	ff 93       	push	r31

	if (EXT_INT_ptr!=0)
 3e2:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__data_end>
 3e6:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <__data_end+0x1>
 3ea:	30 97       	sbiw	r30, 0x00	; 0
 3ec:	09 f0       	breq	.+2      	; 0x3f0 <__vector_16+0x30>
	{
		EXT_INT_ptr();
 3ee:	09 95       	icall
	}
}
 3f0:	ff 91       	pop	r31
 3f2:	ef 91       	pop	r30
 3f4:	bf 91       	pop	r27
 3f6:	af 91       	pop	r26
 3f8:	9f 91       	pop	r25
 3fa:	8f 91       	pop	r24
 3fc:	7f 91       	pop	r23
 3fe:	6f 91       	pop	r22
 400:	5f 91       	pop	r21
 402:	4f 91       	pop	r20
 404:	3f 91       	pop	r19
 406:	2f 91       	pop	r18
 408:	0f 90       	pop	r0
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	0f 90       	pop	r0
 40e:	1f 90       	pop	r1
 410:	18 95       	reti

00000412 <DIO_voidSetPinDirection>:

#include "C:\Users\USER\Desktop\nti repo\NTI\NTI_AVR\NTI_AVR\NTI_AVR\MCAL\DIO\Dio.h"
#include "C:\Users\USER\Desktop\nti repo\NTI\NTI_AVR\NTI_AVR\NTI_AVR\MCAL\DIO\Dio_Private.h"
#include "C:\Users\USER\Desktop\nti repo\NTI\NTI_AVR\NTI_AVR\NTI_AVR\stdtypes.h"
void DIO_voidSetPinDirection(ports_t *ptr,unsigned char p,Direction dir )
{
 412:	0f 93       	push	r16
 414:	1f 93       	push	r17
	switch(p)
 416:	06 2f       	mov	r16, r22
 418:	10 e0       	ldi	r17, 0x00	; 0
 41a:	08 30       	cpi	r16, 0x08	; 8
 41c:	11 05       	cpc	r17, r1
 41e:	a0 f5       	brcc	.+104    	; 0x488 <DIO_voidSetPinDirection+0x76>
 420:	f8 01       	movw	r30, r16
 422:	e6 5d       	subi	r30, 0xD6	; 214
 424:	ff 4f       	sbci	r31, 0xFF	; 255
 426:	0c 94 48 04 	jmp	0x890	; 0x890 <__tablejump2__>
	{
		case 0: ptr->DDR.PIN0=dir; break;
 42a:	fc 01       	movw	r30, r24
 42c:	21 81       	ldd	r18, Z+1	; 0x01
 42e:	40 fb       	bst	r20, 0
 430:	20 f9       	bld	r18, 0
 432:	21 83       	std	Z+1, r18	; 0x01
 434:	29 c0       	rjmp	.+82     	; 0x488 <DIO_voidSetPinDirection+0x76>
		case 1: ptr->DDR.PIN1=dir; break;
 436:	fc 01       	movw	r30, r24
 438:	21 81       	ldd	r18, Z+1	; 0x01
 43a:	40 fb       	bst	r20, 0
 43c:	21 f9       	bld	r18, 1
 43e:	21 83       	std	Z+1, r18	; 0x01
 440:	23 c0       	rjmp	.+70     	; 0x488 <DIO_voidSetPinDirection+0x76>
		case 2: ptr->DDR.PIN2=dir; break;
 442:	fc 01       	movw	r30, r24
 444:	21 81       	ldd	r18, Z+1	; 0x01
 446:	40 fb       	bst	r20, 0
 448:	22 f9       	bld	r18, 2
 44a:	21 83       	std	Z+1, r18	; 0x01
 44c:	1d c0       	rjmp	.+58     	; 0x488 <DIO_voidSetPinDirection+0x76>
		case 3: ptr->DDR.PIN3=dir; break;
 44e:	fc 01       	movw	r30, r24
 450:	21 81       	ldd	r18, Z+1	; 0x01
 452:	40 fb       	bst	r20, 0
 454:	23 f9       	bld	r18, 3
 456:	21 83       	std	Z+1, r18	; 0x01
 458:	17 c0       	rjmp	.+46     	; 0x488 <DIO_voidSetPinDirection+0x76>
		case 4: ptr->DDR.PIN4=dir; break;
 45a:	fc 01       	movw	r30, r24
 45c:	21 81       	ldd	r18, Z+1	; 0x01
 45e:	40 fb       	bst	r20, 0
 460:	24 f9       	bld	r18, 4
 462:	21 83       	std	Z+1, r18	; 0x01
 464:	11 c0       	rjmp	.+34     	; 0x488 <DIO_voidSetPinDirection+0x76>
		case 5: ptr->DDR.PIN5=dir; break;
 466:	fc 01       	movw	r30, r24
 468:	21 81       	ldd	r18, Z+1	; 0x01
 46a:	40 fb       	bst	r20, 0
 46c:	25 f9       	bld	r18, 5
 46e:	21 83       	std	Z+1, r18	; 0x01
 470:	0b c0       	rjmp	.+22     	; 0x488 <DIO_voidSetPinDirection+0x76>
		case 6: ptr->DDR.PIN6=dir; break;
 472:	fc 01       	movw	r30, r24
 474:	21 81       	ldd	r18, Z+1	; 0x01
 476:	40 fb       	bst	r20, 0
 478:	26 f9       	bld	r18, 6
 47a:	21 83       	std	Z+1, r18	; 0x01
 47c:	05 c0       	rjmp	.+10     	; 0x488 <DIO_voidSetPinDirection+0x76>
		case 7: ptr->DDR.PIN7=dir; break;
 47e:	fc 01       	movw	r30, r24
 480:	21 81       	ldd	r18, Z+1	; 0x01
 482:	40 fb       	bst	r20, 0
 484:	27 f9       	bld	r18, 7
 486:	21 83       	std	Z+1, r18	; 0x01
	}
}
 488:	1f 91       	pop	r17
 48a:	0f 91       	pop	r16
 48c:	08 95       	ret

0000048e <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(ports_t *ptr,unsigned char p,Value val)
{
 48e:	0f 93       	push	r16
 490:	1f 93       	push	r17
	switch(p)
 492:	06 2f       	mov	r16, r22
 494:	10 e0       	ldi	r17, 0x00	; 0
 496:	08 30       	cpi	r16, 0x08	; 8
 498:	11 05       	cpc	r17, r1
 49a:	a0 f5       	brcc	.+104    	; 0x504 <DIO_voidSetPinValue+0x76>
 49c:	f8 01       	movw	r30, r16
 49e:	ee 5c       	subi	r30, 0xCE	; 206
 4a0:	ff 4f       	sbci	r31, 0xFF	; 255
 4a2:	0c 94 48 04 	jmp	0x890	; 0x890 <__tablejump2__>
	{
		case 0: ptr->port.PIN0=val; break;
 4a6:	fc 01       	movw	r30, r24
 4a8:	22 81       	ldd	r18, Z+2	; 0x02
 4aa:	40 fb       	bst	r20, 0
 4ac:	20 f9       	bld	r18, 0
 4ae:	22 83       	std	Z+2, r18	; 0x02
 4b0:	29 c0       	rjmp	.+82     	; 0x504 <DIO_voidSetPinValue+0x76>
		case 1: ptr->port.PIN1=val; break;
 4b2:	fc 01       	movw	r30, r24
 4b4:	22 81       	ldd	r18, Z+2	; 0x02
 4b6:	40 fb       	bst	r20, 0
 4b8:	21 f9       	bld	r18, 1
 4ba:	22 83       	std	Z+2, r18	; 0x02
 4bc:	23 c0       	rjmp	.+70     	; 0x504 <DIO_voidSetPinValue+0x76>
		case 2: ptr->port.PIN2=val; break;
 4be:	fc 01       	movw	r30, r24
 4c0:	22 81       	ldd	r18, Z+2	; 0x02
 4c2:	40 fb       	bst	r20, 0
 4c4:	22 f9       	bld	r18, 2
 4c6:	22 83       	std	Z+2, r18	; 0x02
 4c8:	1d c0       	rjmp	.+58     	; 0x504 <DIO_voidSetPinValue+0x76>
		case 3: ptr->port.PIN3=val; break;
 4ca:	fc 01       	movw	r30, r24
 4cc:	22 81       	ldd	r18, Z+2	; 0x02
 4ce:	40 fb       	bst	r20, 0
 4d0:	23 f9       	bld	r18, 3
 4d2:	22 83       	std	Z+2, r18	; 0x02
 4d4:	17 c0       	rjmp	.+46     	; 0x504 <DIO_voidSetPinValue+0x76>
		case 4: ptr->port.PIN4=val; break;
 4d6:	fc 01       	movw	r30, r24
 4d8:	22 81       	ldd	r18, Z+2	; 0x02
 4da:	40 fb       	bst	r20, 0
 4dc:	24 f9       	bld	r18, 4
 4de:	22 83       	std	Z+2, r18	; 0x02
 4e0:	11 c0       	rjmp	.+34     	; 0x504 <DIO_voidSetPinValue+0x76>
		case 5: ptr->port.PIN5=val; break;
 4e2:	fc 01       	movw	r30, r24
 4e4:	22 81       	ldd	r18, Z+2	; 0x02
 4e6:	40 fb       	bst	r20, 0
 4e8:	25 f9       	bld	r18, 5
 4ea:	22 83       	std	Z+2, r18	; 0x02
 4ec:	0b c0       	rjmp	.+22     	; 0x504 <DIO_voidSetPinValue+0x76>
		case 6: ptr->port.PIN6=val; break;
 4ee:	fc 01       	movw	r30, r24
 4f0:	22 81       	ldd	r18, Z+2	; 0x02
 4f2:	40 fb       	bst	r20, 0
 4f4:	26 f9       	bld	r18, 6
 4f6:	22 83       	std	Z+2, r18	; 0x02
 4f8:	05 c0       	rjmp	.+10     	; 0x504 <DIO_voidSetPinValue+0x76>
		case 7: ptr->port.PIN7=val; break;
 4fa:	fc 01       	movw	r30, r24
 4fc:	22 81       	ldd	r18, Z+2	; 0x02
 4fe:	40 fb       	bst	r20, 0
 500:	27 f9       	bld	r18, 7
 502:	22 83       	std	Z+2, r18	; 0x02
	}
}
 504:	1f 91       	pop	r17
 506:	0f 91       	pop	r16
 508:	08 95       	ret

0000050a <__vector_1>:
	}
	
}

ISR(INT0_vect)
{
 50a:	1f 92       	push	r1
 50c:	0f 92       	push	r0
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	0f 92       	push	r0
 512:	11 24       	eor	r1, r1
 514:	2f 93       	push	r18
 516:	3f 93       	push	r19
 518:	4f 93       	push	r20
 51a:	5f 93       	push	r21
 51c:	6f 93       	push	r22
 51e:	7f 93       	push	r23
 520:	8f 93       	push	r24
 522:	9f 93       	push	r25
 524:	af 93       	push	r26
 526:	bf 93       	push	r27
 528:	ef 93       	push	r30
 52a:	ff 93       	push	r31
	if (p_NTI[0]!=0)
 52c:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <p_NTI>
 530:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <p_NTI+0x1>
 534:	30 97       	sbiw	r30, 0x00	; 0
 536:	09 f0       	breq	.+2      	; 0x53a <__vector_1+0x30>
	{
		p_NTI[0]();
 538:	09 95       	icall
	}
	return;
}
 53a:	ff 91       	pop	r31
 53c:	ef 91       	pop	r30
 53e:	bf 91       	pop	r27
 540:	af 91       	pop	r26
 542:	9f 91       	pop	r25
 544:	8f 91       	pop	r24
 546:	7f 91       	pop	r23
 548:	6f 91       	pop	r22
 54a:	5f 91       	pop	r21
 54c:	4f 91       	pop	r20
 54e:	3f 91       	pop	r19
 550:	2f 91       	pop	r18
 552:	0f 90       	pop	r0
 554:	0f be       	out	0x3f, r0	; 63
 556:	0f 90       	pop	r0
 558:	1f 90       	pop	r1
 55a:	18 95       	reti

0000055c <__vector_2>:

ISR(INT1_vect)
{
 55c:	1f 92       	push	r1
 55e:	0f 92       	push	r0
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	0f 92       	push	r0
 564:	11 24       	eor	r1, r1
 566:	2f 93       	push	r18
 568:	3f 93       	push	r19
 56a:	4f 93       	push	r20
 56c:	5f 93       	push	r21
 56e:	6f 93       	push	r22
 570:	7f 93       	push	r23
 572:	8f 93       	push	r24
 574:	9f 93       	push	r25
 576:	af 93       	push	r26
 578:	bf 93       	push	r27
 57a:	ef 93       	push	r30
 57c:	ff 93       	push	r31
	if (p_NTI[1]!=0)
 57e:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <p_NTI+0x2>
 582:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <p_NTI+0x3>
 586:	30 97       	sbiw	r30, 0x00	; 0
 588:	09 f0       	breq	.+2      	; 0x58c <__vector_2+0x30>
	{
		p_NTI[1]();
 58a:	09 95       	icall
	}
	return;
}
 58c:	ff 91       	pop	r31
 58e:	ef 91       	pop	r30
 590:	bf 91       	pop	r27
 592:	af 91       	pop	r26
 594:	9f 91       	pop	r25
 596:	8f 91       	pop	r24
 598:	7f 91       	pop	r23
 59a:	6f 91       	pop	r22
 59c:	5f 91       	pop	r21
 59e:	4f 91       	pop	r20
 5a0:	3f 91       	pop	r19
 5a2:	2f 91       	pop	r18
 5a4:	0f 90       	pop	r0
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	0f 90       	pop	r0
 5aa:	1f 90       	pop	r1
 5ac:	18 95       	reti

000005ae <__vector_3>:

ISR(INT2_vect)
{
 5ae:	1f 92       	push	r1
 5b0:	0f 92       	push	r0
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	0f 92       	push	r0
 5b6:	11 24       	eor	r1, r1
 5b8:	2f 93       	push	r18
 5ba:	3f 93       	push	r19
 5bc:	4f 93       	push	r20
 5be:	5f 93       	push	r21
 5c0:	6f 93       	push	r22
 5c2:	7f 93       	push	r23
 5c4:	8f 93       	push	r24
 5c6:	9f 93       	push	r25
 5c8:	af 93       	push	r26
 5ca:	bf 93       	push	r27
 5cc:	ef 93       	push	r30
 5ce:	ff 93       	push	r31
	if (p_NTI[2]!=0) 
 5d0:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <p_NTI+0x4>
 5d4:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <p_NTI+0x5>
 5d8:	30 97       	sbiw	r30, 0x00	; 0
 5da:	09 f0       	breq	.+2      	; 0x5de <__vector_3+0x30>
	{
		p_NTI[2]();
 5dc:	09 95       	icall
	}
	return;
 5de:	ff 91       	pop	r31
 5e0:	ef 91       	pop	r30
 5e2:	bf 91       	pop	r27
 5e4:	af 91       	pop	r26
 5e6:	9f 91       	pop	r25
 5e8:	8f 91       	pop	r24
 5ea:	7f 91       	pop	r23
 5ec:	6f 91       	pop	r22
 5ee:	5f 91       	pop	r21
 5f0:	4f 91       	pop	r20
 5f2:	3f 91       	pop	r19
 5f4:	2f 91       	pop	r18
 5f6:	0f 90       	pop	r0
 5f8:	0f be       	out	0x3f, r0	; 63
 5fa:	0f 90       	pop	r0
 5fc:	1f 90       	pop	r1
 5fe:	18 95       	reti

00000600 <__vector_11>:
	u32 t_total=ton+t_off;
	u8 duty =((u32)ton *100) /(u32)t_total;

	return duty;
	
}
 600:	1f 92       	push	r1
 602:	0f 92       	push	r0
 604:	0f b6       	in	r0, 0x3f	; 63
 606:	0f 92       	push	r0
 608:	11 24       	eor	r1, r1
 60a:	2f 93       	push	r18
 60c:	3f 93       	push	r19
 60e:	4f 93       	push	r20
 610:	5f 93       	push	r21
 612:	6f 93       	push	r22
 614:	7f 93       	push	r23
 616:	8f 93       	push	r24
 618:	9f 93       	push	r25
 61a:	af 93       	push	r26
 61c:	bf 93       	push	r27
 61e:	ef 93       	push	r30
 620:	ff 93       	push	r31
 622:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <OVF_ptr>
 626:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <OVF_ptr+0x1>
 62a:	30 97       	sbiw	r30, 0x00	; 0
 62c:	09 f0       	breq	.+2      	; 0x630 <__vector_11+0x30>
 62e:	09 95       	icall
 630:	ff 91       	pop	r31
 632:	ef 91       	pop	r30
 634:	bf 91       	pop	r27
 636:	af 91       	pop	r26
 638:	9f 91       	pop	r25
 63a:	8f 91       	pop	r24
 63c:	7f 91       	pop	r23
 63e:	6f 91       	pop	r22
 640:	5f 91       	pop	r21
 642:	4f 91       	pop	r20
 644:	3f 91       	pop	r19
 646:	2f 91       	pop	r18
 648:	0f 90       	pop	r0
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	0f 90       	pop	r0
 64e:	1f 90       	pop	r1
 650:	18 95       	reti

00000652 <__vector_10>:
 652:	1f 92       	push	r1
 654:	0f 92       	push	r0
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	0f 92       	push	r0
 65a:	11 24       	eor	r1, r1
 65c:	2f 93       	push	r18
 65e:	3f 93       	push	r19
 660:	4f 93       	push	r20
 662:	5f 93       	push	r21
 664:	6f 93       	push	r22
 666:	7f 93       	push	r23
 668:	8f 93       	push	r24
 66a:	9f 93       	push	r25
 66c:	af 93       	push	r26
 66e:	bf 93       	push	r27
 670:	ef 93       	push	r30
 672:	ff 93       	push	r31
 674:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <CM_ptr>
 678:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <CM_ptr+0x1>
 67c:	30 97       	sbiw	r30, 0x00	; 0
 67e:	09 f0       	breq	.+2      	; 0x682 <__vector_10+0x30>
 680:	09 95       	icall
 682:	ff 91       	pop	r31
 684:	ef 91       	pop	r30
 686:	bf 91       	pop	r27
 688:	af 91       	pop	r26
 68a:	9f 91       	pop	r25
 68c:	8f 91       	pop	r24
 68e:	7f 91       	pop	r23
 690:	6f 91       	pop	r22
 692:	5f 91       	pop	r21
 694:	4f 91       	pop	r20
 696:	3f 91       	pop	r19
 698:	2f 91       	pop	r18
 69a:	0f 90       	pop	r0
 69c:	0f be       	out	0x3f, r0	; 63
 69e:	0f 90       	pop	r0
 6a0:	1f 90       	pop	r1
 6a2:	18 95       	reti

000006a4 <__vector_9>:
{
	Timer1_ICU_Fptr=LocalFptr;
}

ISR(TIMER1_OVF_vect)
{
 6a4:	1f 92       	push	r1
 6a6:	0f 92       	push	r0
 6a8:	0f b6       	in	r0, 0x3f	; 63
 6aa:	0f 92       	push	r0
 6ac:	11 24       	eor	r1, r1
 6ae:	2f 93       	push	r18
 6b0:	3f 93       	push	r19
 6b2:	4f 93       	push	r20
 6b4:	5f 93       	push	r21
 6b6:	6f 93       	push	r22
 6b8:	7f 93       	push	r23
 6ba:	8f 93       	push	r24
 6bc:	9f 93       	push	r25
 6be:	af 93       	push	r26
 6c0:	bf 93       	push	r27
 6c2:	ef 93       	push	r30
 6c4:	ff 93       	push	r31
	if(Timer1_OVF_Fptr!=0)
 6c6:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <Timer1_OVF_Fptr>
 6ca:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <Timer1_OVF_Fptr+0x1>
 6ce:	30 97       	sbiw	r30, 0x00	; 0
 6d0:	09 f0       	breq	.+2      	; 0x6d4 <__vector_9+0x30>
	{
		Timer1_OVF_Fptr();
 6d2:	09 95       	icall
	}
}
 6d4:	ff 91       	pop	r31
 6d6:	ef 91       	pop	r30
 6d8:	bf 91       	pop	r27
 6da:	af 91       	pop	r26
 6dc:	9f 91       	pop	r25
 6de:	8f 91       	pop	r24
 6e0:	7f 91       	pop	r23
 6e2:	6f 91       	pop	r22
 6e4:	5f 91       	pop	r21
 6e6:	4f 91       	pop	r20
 6e8:	3f 91       	pop	r19
 6ea:	2f 91       	pop	r18
 6ec:	0f 90       	pop	r0
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	0f 90       	pop	r0
 6f2:	1f 90       	pop	r1
 6f4:	18 95       	reti

000006f6 <__vector_7>:
ISR(TIMER1_OCA_vect)
{
 6f6:	1f 92       	push	r1
 6f8:	0f 92       	push	r0
 6fa:	0f b6       	in	r0, 0x3f	; 63
 6fc:	0f 92       	push	r0
 6fe:	11 24       	eor	r1, r1
 700:	2f 93       	push	r18
 702:	3f 93       	push	r19
 704:	4f 93       	push	r20
 706:	5f 93       	push	r21
 708:	6f 93       	push	r22
 70a:	7f 93       	push	r23
 70c:	8f 93       	push	r24
 70e:	9f 93       	push	r25
 710:	af 93       	push	r26
 712:	bf 93       	push	r27
 714:	ef 93       	push	r30
 716:	ff 93       	push	r31
	if(Timer1_OCA_Fptr!=0)
 718:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <Timer1_OCA_Fptr>
 71c:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <Timer1_OCA_Fptr+0x1>
 720:	30 97       	sbiw	r30, 0x00	; 0
 722:	09 f0       	breq	.+2      	; 0x726 <__vector_7+0x30>
	{
		Timer1_OCA_Fptr();
 724:	09 95       	icall
	}
}
 726:	ff 91       	pop	r31
 728:	ef 91       	pop	r30
 72a:	bf 91       	pop	r27
 72c:	af 91       	pop	r26
 72e:	9f 91       	pop	r25
 730:	8f 91       	pop	r24
 732:	7f 91       	pop	r23
 734:	6f 91       	pop	r22
 736:	5f 91       	pop	r21
 738:	4f 91       	pop	r20
 73a:	3f 91       	pop	r19
 73c:	2f 91       	pop	r18
 73e:	0f 90       	pop	r0
 740:	0f be       	out	0x3f, r0	; 63
 742:	0f 90       	pop	r0
 744:	1f 90       	pop	r1
 746:	18 95       	reti

00000748 <__vector_8>:
ISR(TIMER1_OCB_vect)
{
 748:	1f 92       	push	r1
 74a:	0f 92       	push	r0
 74c:	0f b6       	in	r0, 0x3f	; 63
 74e:	0f 92       	push	r0
 750:	11 24       	eor	r1, r1
 752:	2f 93       	push	r18
 754:	3f 93       	push	r19
 756:	4f 93       	push	r20
 758:	5f 93       	push	r21
 75a:	6f 93       	push	r22
 75c:	7f 93       	push	r23
 75e:	8f 93       	push	r24
 760:	9f 93       	push	r25
 762:	af 93       	push	r26
 764:	bf 93       	push	r27
 766:	ef 93       	push	r30
 768:	ff 93       	push	r31
	if(Timer1_OCB_Fptr!=0)
 76a:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <Timer1_OCB_Fptr>
 76e:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <Timer1_OCB_Fptr+0x1>
 772:	30 97       	sbiw	r30, 0x00	; 0
 774:	09 f0       	breq	.+2      	; 0x778 <__vector_8+0x30>
	{
		Timer1_OCB_Fptr();
 776:	09 95       	icall
	}
}
 778:	ff 91       	pop	r31
 77a:	ef 91       	pop	r30
 77c:	bf 91       	pop	r27
 77e:	af 91       	pop	r26
 780:	9f 91       	pop	r25
 782:	8f 91       	pop	r24
 784:	7f 91       	pop	r23
 786:	6f 91       	pop	r22
 788:	5f 91       	pop	r21
 78a:	4f 91       	pop	r20
 78c:	3f 91       	pop	r19
 78e:	2f 91       	pop	r18
 790:	0f 90       	pop	r0
 792:	0f be       	out	0x3f, r0	; 63
 794:	0f 90       	pop	r0
 796:	1f 90       	pop	r1
 798:	18 95       	reti

0000079a <__vector_6>:
ISR(TIMER1_ICU_vect)
{
 79a:	1f 92       	push	r1
 79c:	0f 92       	push	r0
 79e:	0f b6       	in	r0, 0x3f	; 63
 7a0:	0f 92       	push	r0
 7a2:	11 24       	eor	r1, r1
 7a4:	2f 93       	push	r18
 7a6:	3f 93       	push	r19
 7a8:	4f 93       	push	r20
 7aa:	5f 93       	push	r21
 7ac:	6f 93       	push	r22
 7ae:	7f 93       	push	r23
 7b0:	8f 93       	push	r24
 7b2:	9f 93       	push	r25
 7b4:	af 93       	push	r26
 7b6:	bf 93       	push	r27
 7b8:	ef 93       	push	r30
 7ba:	ff 93       	push	r31
	if(Timer1_ICU_Fptr!=0)
 7bc:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <Timer1_ICU_Fptr>
 7c0:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <Timer1_ICU_Fptr+0x1>
 7c4:	30 97       	sbiw	r30, 0x00	; 0
 7c6:	09 f0       	breq	.+2      	; 0x7ca <__vector_6+0x30>
	{
		Timer1_ICU_Fptr();
 7c8:	09 95       	icall
	}
}
 7ca:	ff 91       	pop	r31
 7cc:	ef 91       	pop	r30
 7ce:	bf 91       	pop	r27
 7d0:	af 91       	pop	r26
 7d2:	9f 91       	pop	r25
 7d4:	8f 91       	pop	r24
 7d6:	7f 91       	pop	r23
 7d8:	6f 91       	pop	r22
 7da:	5f 91       	pop	r21
 7dc:	4f 91       	pop	r20
 7de:	3f 91       	pop	r19
 7e0:	2f 91       	pop	r18
 7e2:	0f 90       	pop	r0
 7e4:	0f be       	out	0x3f, r0	; 63
 7e6:	0f 90       	pop	r0
 7e8:	1f 90       	pop	r1
 7ea:	18 95       	reti

000007ec <__vector_13>:
	{
		Uart_TX_Fptr=LocalFPtr;
	}
}
ISR(UART_RX_vect)
{
 7ec:	1f 92       	push	r1
 7ee:	0f 92       	push	r0
 7f0:	0f b6       	in	r0, 0x3f	; 63
 7f2:	0f 92       	push	r0
 7f4:	11 24       	eor	r1, r1
 7f6:	2f 93       	push	r18
 7f8:	3f 93       	push	r19
 7fa:	4f 93       	push	r20
 7fc:	5f 93       	push	r21
 7fe:	6f 93       	push	r22
 800:	7f 93       	push	r23
 802:	8f 93       	push	r24
 804:	9f 93       	push	r25
 806:	af 93       	push	r26
 808:	bf 93       	push	r27
 80a:	ef 93       	push	r30
 80c:	ff 93       	push	r31
	
	if (Uart_RX_Fptr!=0)
 80e:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <Uart_RX_Fptr>
 812:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <Uart_RX_Fptr+0x1>
 816:	30 97       	sbiw	r30, 0x00	; 0
 818:	09 f0       	breq	.+2      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
	{
		Uart_RX_Fptr();
 81a:	09 95       	icall
	}
}
 81c:	ff 91       	pop	r31
 81e:	ef 91       	pop	r30
 820:	bf 91       	pop	r27
 822:	af 91       	pop	r26
 824:	9f 91       	pop	r25
 826:	8f 91       	pop	r24
 828:	7f 91       	pop	r23
 82a:	6f 91       	pop	r22
 82c:	5f 91       	pop	r21
 82e:	4f 91       	pop	r20
 830:	3f 91       	pop	r19
 832:	2f 91       	pop	r18
 834:	0f 90       	pop	r0
 836:	0f be       	out	0x3f, r0	; 63
 838:	0f 90       	pop	r0
 83a:	1f 90       	pop	r1
 83c:	18 95       	reti

0000083e <__vector_15>:
ISR (UART_TX_vect)
{
 83e:	1f 92       	push	r1
 840:	0f 92       	push	r0
 842:	0f b6       	in	r0, 0x3f	; 63
 844:	0f 92       	push	r0
 846:	11 24       	eor	r1, r1
 848:	2f 93       	push	r18
 84a:	3f 93       	push	r19
 84c:	4f 93       	push	r20
 84e:	5f 93       	push	r21
 850:	6f 93       	push	r22
 852:	7f 93       	push	r23
 854:	8f 93       	push	r24
 856:	9f 93       	push	r25
 858:	af 93       	push	r26
 85a:	bf 93       	push	r27
 85c:	ef 93       	push	r30
 85e:	ff 93       	push	r31
	if (Uart_TX_Fptr!=0)
 860:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <Uart_TX_Fptr>
 864:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <Uart_TX_Fptr+0x1>
 868:	30 97       	sbiw	r30, 0x00	; 0
 86a:	09 f0       	breq	.+2      	; 0x86e <__stack+0xf>
	{
		Uart_TX_Fptr();
 86c:	09 95       	icall
	}
	
}
 86e:	ff 91       	pop	r31
 870:	ef 91       	pop	r30
 872:	bf 91       	pop	r27
 874:	af 91       	pop	r26
 876:	9f 91       	pop	r25
 878:	8f 91       	pop	r24
 87a:	7f 91       	pop	r23
 87c:	6f 91       	pop	r22
 87e:	5f 91       	pop	r21
 880:	4f 91       	pop	r20
 882:	3f 91       	pop	r19
 884:	2f 91       	pop	r18
 886:	0f 90       	pop	r0
 888:	0f be       	out	0x3f, r0	; 63
 88a:	0f 90       	pop	r0
 88c:	1f 90       	pop	r1
 88e:	18 95       	reti

00000890 <__tablejump2__>:
 890:	ee 0f       	add	r30, r30
 892:	ff 1f       	adc	r31, r31
 894:	05 90       	lpm	r0, Z+
 896:	f4 91       	lpm	r31, Z
 898:	e0 2d       	mov	r30, r0
 89a:	09 94       	ijmp

0000089c <_exit>:
 89c:	f8 94       	cli

0000089e <__stop_program>:
 89e:	ff cf       	rjmp	.-2      	; 0x89e <__stop_program>
